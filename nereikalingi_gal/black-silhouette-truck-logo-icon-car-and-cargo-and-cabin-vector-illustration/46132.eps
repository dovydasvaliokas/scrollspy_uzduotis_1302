%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1501.m00.i121.n061.P.c25.92387506 Silhouette truck icon.eps
%%Creator: Adobe Illustrator(R) 18.1
%%For:  
%%CreationDate: 1/6/2015
%%BoundingBox: 0 0 388 347
%%HiResBoundingBox: 0 0 387.8750 346.6576
%%CropBox: 0 0 387.8750 346.6576
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 18.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 18.1.1 x446 R agm 4.7721 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c014 79.156821, 2014/08/29-03:07:50        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmp:ModifyDate>2015-01-05T15:18:34+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-01-05T15:18:33+03:00</xmp:CreateDate>
         <xmp:MetadataDate>2015-01-05T15:18:34+03:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>232</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA6AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWFeafzHuNG8yP5&#xA;fs/L2oarefoi71aKe3jP1dmtVJS350PxysAmwNGZBQ8tlXjz/wDOUfnB4PL83+H4La4kae817S3M&#xA;3rnS0kEUc9sWCAGqyVX4mPEELxOKsjvv+cs/LUQIs/KfmK4ILANJaRxIStOh9SQ/P4dsVYj5i/5y&#xA;8vb7TLqw0ry7JpF1eQyR2+pXOoW0U1vyBRZ1t5UUOyncKXFadcVYHN+dv5melo8c/mi2iu/KoklW&#xA;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&#xA;kl/eK3D9yisy1FSOm1e2Kv0zVVVQqgKqiiqNgAOwxVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYqhb7SdKv+P1+ygu+H2PXiSTjXw5g0xVdZabp1hG0djaw2kbGrJBGsYJ8&#xA;SFAxVEYq7FXYq7FXYqo3dnZ3kJgu4I7iBtzFKiuhI/yWBGKqFloei2MhlstPtrWUiheGGONiPCqg&#xA;HFUbirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVeMfm7/zkzo35d+Zl8vNotxql4sKTzyLKkEai&#xA;X7CqSshY0G+wp74qwf8A6Hj0r/qUZ/8ApNT/AKo4q7/oePSv+pRn/wCk1P8Aqjirv+h49K/6lGf/&#xA;AKTU/wCqOKu/6Hj0r/qUZ/8ApNT/AKo4q7/oePSv+pRn/wCk1P8Aqjirv+h49K/6lGf/AKTU/wCq&#xA;OKu/6Hj0r/qUZ/8ApNT/AKo4q7/oePSv+pRn/wCk1P8Aqjirv+h49K/6lGf/AKTU/wCqOKu/6Hj0&#xA;r/qUZ/8ApNT/AKo4q7/oePSv+pRn/wCk1P8Aqjirv+h49K/6lGf/AKTU/wCqOKu/6Hj0r/qUZ/8A&#xA;pNT/AKo4q7/oePSv+pRn/wCk1P8Aqjirv+h49K/6lGf/AKTU/wCqOKu/6Hj0r/qUZ/8ApNT/AKo4&#xA;q7/oePSv+pRn/wCk1P8Aqjirv+h49K/6lGf/AKTU/wCqOKu/6Hj0r/qUZ/8ApNT/AKo4q7/oePSv&#xA;+pRn/wCk1P8Aqjirv+h49K/6lGf/AKTU/wCqOKu/6Hj0r/qUZ/8ApNT/AKo4qq2v/OcGgvcxJdeV&#xA;bmG2ZgJpY7qOR1QndlQxxhiB25DFX01irsVdirGPzD/MTy95B8vjXde9Y2RmS2VbZBJIZJAxUUJU&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:DocumentID>xmp.did:9F66C6D2C194E4119EB2B31B8A0B82A2</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:9F66C6D2C194E4119EB2B31B8A0B82A2</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:9E66C6D2C194E4119EB2B31B8A0B82A2</stRef:instanceID>
            <stRef:documentID>xmp.did:9E66C6D2C194E4119EB2B31B8A0B82A2</stRef:documentID>
            <stRef:originalDocumentID>uuid:1bb0f6be-76da-402c-9c49-9ecdf601cd18</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EED464CD3F8DE4119072E2B85FCB5D2F</stEvt:instanceID>
                  <stEvt:when>2014-12-27T02:36:51+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:EFD464CD3F8DE4119072E2B85FCB5D2F</stEvt:instanceID>
                  <stEvt:when>2014-12-27T02:37:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A2177B32588DE4119072E2B85FCB5D2F</stEvt:instanceID>
                  <stEvt:when>2014-12-27T02:37:47+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9E66C6D2C194E4119EB2B31B8A0B82A2</stEvt:instanceID>
                  <stEvt:when>2015-01-05T15:09:45+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9F66C6D2C194E4119EB2B31B8A0B82A2</stEvt:instanceID>
                  <stEvt:when>2015-01-05T15:18:34+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <dc:format>application/postscript</dc:format>
         <pdf:Producer>Adobe PDF Library 9.9</pdf:Producer>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -346.658 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 346.658 li
387.875 346.658 li
387.875 0 li
cp
clp
342.794 6.43573 mo
342.794 8.07318 li
343.375 8.09296 343.958 8.11383 344.542 8.13458 cv
344.542 6.44781 li
344.268 6.50586 343.987 6.53986 343.695 6.53986 cv
343.384 6.53986 343.084 6.50146 342.794 6.43573 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
334.097 6.43573 mo
334.097 7.81787 li
334.677 7.83209 335.26 7.84747 335.841 7.86273 cv
335.841 6.44781 li
335.57 6.50586 335.289 6.53986 334.997 6.53986 cv
334.686 6.53986 334.386 6.50146 334.097 6.43573 cv
cp
f
325.399 6.43573 mo
325.399 7.64032 li
325.979 7.64905 326.56 7.65894 327.143 7.66882 cv
327.143 6.44781 li
326.872 6.50586 326.589 6.53986 326.299 6.53986 cv
325.988 6.53986 325.688 6.50146 325.399 6.43573 cv
cp
f
334.997 6.23303 mo
336.872 6.23303 338.397 4.83563 338.397 3.117 cv
338.397 1.3985 336.872 0 334.997 0 cv
333.121 0 331.595 1.3985 331.595 3.117 cv
331.595 4.83563 333.121 6.23303 334.997 6.23303 cv
cp
f
343.695 6.23303 mo
345.572 6.23303 347.097 4.83563 347.097 3.117 cv
347.097 1.3985 345.572 0 343.695 0 cv
341.819 0 340.293 1.3985 340.293 3.117 cv
340.293 4.83563 341.819 6.23303 343.695 6.23303 cv
cp
f
326.299 6.23303 mo
328.174 6.23303 329.699 4.83563 329.699 3.117 cv
329.699 1.3985 328.174 0 326.299 0 cv
324.423 0 322.897 1.3985 322.897 3.117 cv
322.897 4.83563 324.423 6.23303 326.299 6.23303 cv
cp
f
359.419 106.59 mo
359.237 112.367 358.838 118.14 358.22 123.896 cv
358.332 123.896 li
359.971 123.896 361.306 125.133 361.306 126.655 cv
361.306 132.99 li
361.306 134.511 359.971 135.748 358.332 135.748 cv
344.075 135.748 li
344.075 141.128 li
344.075 143.76 346.745 145.902 350.024 145.902 cv
357.159 145.902 li
360.44 145.902 363.108 143.76 363.108 141.128 cv
363.108 111.005 li
363.108 109.014 361.582 107.305 359.419 106.59 cv
cp
f
371.644 60.5494 mo
371.734 59.3087 371.094 58.0538 370.022 57.7239 cv
368.812 57.3907 367.602 57.0575 366.39 56.7244 cv
366.39 55.7916 li
367.867 55.7916 369.066 54.6934 369.066 53.3387 cv
369.066 42.7632 li
369.066 41.4086 367.867 40.3104 366.39 40.3104 cv
366.302 40.3104 li
365.973 38.9952 364.726 38.012 363.235 38.012 cv
358.325 38.012 li
358.108 37.361 357.553 36.8404 356.843 36.6102 cv
356.587 36.527 356.313 36.4787 356.026 36.4787 cv
321.747 36.4787 li
325.694 36.6036 329.642 36.7494 333.581 37.0497 cv
337.531 37.3303 341.479 37.7194 345.403 38.3112 cv
347.36 38.6258 349.318 38.9722 351.245 39.4763 cv
352.205 39.7327 353.163 40.0177 354.083 40.4068 cv
354.542 40.6074 354.993 40.83 355.403 41.1225 cv
355.607 41.2683 355.8 41.4349 355.953 41.6344 cv
356.107 41.8327 356.216 42.0783 356.203 42.3281 cv
356.192 42.0783 356.065 41.8546 355.901 41.6793 cv
355.736 41.5029 355.535 41.3615 355.326 41.2387 cv
354.906 40.9943 354.447 40.8189 353.985 40.6665 cv
353.058 40.3608 352.095 40.1515 351.133 39.9739 cv
349.202 39.6242 347.249 39.3875 345.289 39.2078 cv
343.332 39.017 341.37 38.8735 339.403 38.7639 cv
337.439 38.6543 335.473 38.5513 333.505 38.4822 cv
329.568 38.354 325.629 38.2411 321.687 38.2192 cv
317.748 38.1742 313.807 38.1677 309.866 38.2203 cv
305.927 38.2411 301.985 38.3287 298.046 38.4471 cv
294.107 38.5469 290.172 38.7343 286.238 38.9414 cv
284.271 39.0488 282.307 39.1924 280.346 39.3404 cv
278.382 39.4894 276.422 39.6725 274.469 39.9026 cv
272.516 40.123 270.567 40.3992 268.645 40.7893 cv
267.684 40.9888 266.729 41.22 265.808 41.5455 cv
265.348 41.7078 264.894 41.8941 264.48 42.1484 cv
264.274 42.2755 264.076 42.4213 263.914 42.6011 cv
263.754 42.7797 263.629 43.0045 263.618 43.2543 cv
263.605 43.0045 263.71 42.7589 263.862 42.5583 cv
264.013 42.3555 264.201 42.1857 264.401 42.0344 cv
264.804 41.733 265.251 41.4995 265.705 41.2902 cv
266.617 40.8803 267.568 40.5745 268.524 40.2972 cv
270.438 39.7525 272.388 39.3666 274.339 39.0138 cv
278.25 38.342 282.189 37.874 286.133 37.5155 cv
290.076 37.1385 294.028 36.9116 297.981 36.7122 cv
300.273 36.608 302.568 36.5346 304.864 36.4787 cv
262.811 36.4787 li
262.524 36.4787 262.25 36.527 261.994 36.6102 cv
261.286 36.8404 260.731 37.361 260.512 38.012 cv
255.602 38.012 li
254.113 38.012 252.864 38.9952 252.535 40.3104 cv
252.448 40.3104 li
250.97 40.3104 249.771 41.4086 249.771 42.7632 cv
249.771 53.3387 li
249.771 54.6934 250.97 55.7916 252.448 55.7916 cv
252.448 56.7244 li
251.238 57.0575 250.025 57.3907 248.815 57.7239 cv
247.743 58.0538 247.103 59.3087 247.193 60.5494 cv
247.263 61.4635 247.263 62.382 247.193 63.295 cv
247.103 64.5356 247.743 65.7906 248.815 66.1204 cv
250.025 66.4537 251.238 66.7869 252.448 67.1211 cv
252.448 68.1328 li
252.448 69.779 253.864 71.1183 255.602 71.1183 cv
256.886 71.1183 li
256.952 70.7095 257.025 70.3007 257.097 69.8919 cv
255.602 69.8919 li
254.6 69.8919 253.787 69.1028 253.787 68.1328 cv
253.787 67.4894 li
253.875 67.5135 253.962 67.5376 254.05 67.5617 cv
255.113 67.8927 256.38 66.423 256.547 64.2364 cv
256.665 62.6966 256.665 61.1479 256.547 59.608 cv
256.38 57.4214 255.113 55.9517 254.05 56.2827 cv
253.962 56.3068 253.875 56.3309 253.787 56.355 cv
253.787 55.7916 li
253.954 55.7916 li
255.433 55.7916 256.63 54.6934 256.63 53.3387 cv
256.63 42.7632 li
256.63 41.4086 255.433 40.3104 253.954 40.3104 cv
253.929 40.3104 li
254.208 39.6812 254.852 39.2385 255.602 39.2385 cv
260.411 39.2385 li
260.411 65.156 li
260.411 66.1018 261.102 66.9053 262.053 67.1902 cv
262.292 67.2614 262.546 67.302 262.811 67.302 cv
356.026 67.302 li
356.291 67.302 356.545 67.2614 356.784 67.1902 cv
357.738 66.9053 358.426 66.1018 358.426 65.156 cv
358.426 39.2385 li
363.235 39.2385 li
363.985 39.2385 364.632 39.6812 364.908 40.3104 cv
364.884 40.3104 li
363.406 40.3104 362.207 41.4086 362.207 42.7632 cv
362.207 53.3387 li
362.207 54.6934 363.406 55.7916 364.884 55.7916 cv
365.052 55.7916 li
365.052 56.355 li
364.963 56.3309 364.875 56.3068 364.787 56.2827 cv
363.724 55.9517 362.457 57.4214 362.29 59.608 cv
362.172 61.1479 362.172 62.6966 362.29 64.2364 cv
362.457 66.423 363.724 67.8927 364.787 67.5617 cv
364.875 67.5376 364.963 67.5135 365.052 67.4894 cv
365.052 68.1328 li
365.052 69.1028 364.237 69.8919 363.235 69.8919 cv
362.558 69.8919 li
362.558 69.893 362.558 69.893 362.558 69.894 cv
362.656 70.2974 362.742 70.704 362.773 71.1183 cv
363.235 71.1183 li
364.976 71.1183 366.39 69.779 366.39 68.1328 cv
366.39 67.1211 li
367.602 66.7869 368.812 66.4537 370.022 66.1204 cv
371.094 65.7906 371.734 64.5356 371.644 63.295 cv
371.574 62.382 371.574 61.4635 371.644 60.5494 cv
cp
f
328.263 118.976 mo
327.952 120.395 327.117 121.302 326.681 121.302 cv
310.252 121.302 li
309.57 121.302 li
293.141 121.302 li
292.704 121.302 291.869 120.395 291.558 118.976 cv
282.329 76.5447 li
282.283 76.3287 282.264 76.1183 282.268 75.9177 cv
260.858 69.7395 li
284.094 74.4009 li
309.57 74.4009 li
310.252 74.4009 li
335.947 74.4009 li
359.182 69.7395 li
337.556 75.9803 li
337.553 76.1622 337.534 76.3517 337.492 76.5447 cv
328.263 118.976 li
cp
337.569 110.096 mo
344.147 106.796 349.259 105.121 352.764 105.121 cv
354.789 105.121 355.82 105.701 356.326 106.188 cv
356.81 106.652 356.966 107.164 356.951 107.46 cv
356.703 112.495 li
356.646 113.649 355.48 115.419 354.149 115.419 cv
354.079 115.417 li
338.408 115.443 li
338.362 115.443 li
335.21 115.443 333.101 114.906 332.86 114.042 cv
332.683 113.408 333.358 112.209 337.569 110.096 cv
cp
356.192 119.72 mo
356.188 119.874 356.186 120.01 356.186 120.127 cv
356.186 120.943 355.46 121.609 354.568 121.609 cv
339.844 121.609 li
338.952 121.609 338.226 120.943 338.22 120.154 cv
338.651 119.516 349.035 117.93 355.456 117.082 cv
355.589 117.082 355.701 117.125 355.795 117.213 cv
356.247 117.638 356.214 118.942 356.192 119.72 cv
cp
286.961 114.042 mo
286.72 114.906 284.611 115.443 281.459 115.443 cv
281.413 115.443 li
265.742 115.417 li
265.672 115.419 li
264.344 115.419 263.175 113.649 263.118 112.495 cv
262.871 107.46 li
262.855 107.164 263.011 106.652 263.495 106.188 cv
264.002 105.701 265.032 105.121 267.06 105.121 cv
270.563 105.121 275.674 106.796 282.253 110.096 cv
286.466 112.209 287.139 113.408 286.961 114.042 cv
cp
279.977 121.609 mo
265.253 121.609 li
264.361 121.609 263.636 120.943 263.636 120.127 cv
263.636 120.01 263.634 119.874 263.629 119.72 cv
263.609 118.942 263.574 117.638 264.028 117.213 cv
264.122 117.125 264.232 117.082 264.366 117.082 cv
270.786 117.93 281.17 119.516 281.602 120.154 cv
281.595 120.943 280.87 121.609 279.977 121.609 cv
cp
358.706 103.422 mo
360.175 103.388 361.3 102.814 361.392 102.321 cv
363.448 91.25 363.448 80.0224 361.392 68.9515 cv
361.3 68.4572 360.175 67.8828 358.706 67.8489 cv
357.722 67.8259 356.736 67.8062 355.749 67.7843 cv
355.46 67.8687 355.155 67.9147 354.837 67.9147 cv
310.252 67.9147 li
309.57 67.9147 li
264.984 67.9147 li
264.666 67.9147 264.359 67.8687 264.072 67.7843 cv
263.086 67.8062 262.099 67.8259 261.115 67.8489 cv
259.648 67.8828 258.522 68.4572 258.43 68.9515 cv
256.374 80.0224 256.374 91.25 258.43 102.321 cv
258.522 102.814 259.648 103.388 261.115 103.422 cv
269.784 103.624 278.517 103.77 287.248 103.864 cv
287.382 104.479 li
278.601 104.385 269.817 104.238 261.097 104.036 cv
261.067 104.035 261.036 104.033 261.005 104.032 cv
261.141 110.663 261.564 117.29 262.274 123.896 cv
309.57 123.896 li
310.252 123.896 li
357.547 123.896 li
358.257 117.29 358.68 110.663 358.816 104.032 cv
358.785 104.033 358.755 104.035 358.724 104.036 cv
350.006 104.238 341.221 104.385 332.439 104.479 cv
332.573 103.864 li
341.304 103.77 350.037 103.624 358.706 103.422 cv
cp
f
360.635 132.99 mo
360.635 126.655 li
360.635 125.471 359.603 124.509 358.332 124.509 cv
310.252 124.509 li
309.57 124.509 li
261.49 124.509 li
260.218 124.509 259.186 125.471 259.186 126.655 cv
259.186 132.99 li
259.186 134.172 260.218 135.136 261.49 135.136 cv
309.57 135.136 li
310.252 135.136 li
358.332 135.136 li
359.603 135.136 360.635 134.172 360.635 132.99 cv
cp
f
331.975 81.3036 mo
310.252 81.3036 li
309.57 81.3036 li
287.847 81.3036 li
286.81 81.3036 285.97 81.7595 285.97 82.3229 cv
285.97 82.8851 286.81 83.3422 287.847 83.3422 cv
309.57 83.3422 li
310.252 83.3422 li
331.975 83.3422 li
333.011 83.3422 333.851 82.8851 333.851 82.3229 cv
333.851 81.7595 333.011 81.3036 331.975 81.3036 cv
cp
f
331.069 85.2887 mo
310.252 85.2887 li
309.57 85.2887 li
288.752 85.2887 li
287.755 85.2887 286.946 85.7447 286.946 86.308 cv
286.946 86.8702 287.755 87.3273 288.752 87.3273 cv
309.57 87.3273 li
310.252 87.3273 li
331.069 87.3273 li
332.067 87.3273 332.876 86.8702 332.876 86.308 cv
332.876 85.7447 332.067 85.2887 331.069 85.2887 cv
cp
f
330.201 89.2727 mo
310.252 89.2727 li
309.57 89.2727 li
289.622 89.2727 li
288.662 89.2727 287.886 89.7299 287.886 90.2932 cv
287.886 90.8554 288.662 91.3124 289.622 91.3124 cv
309.57 91.3124 li
310.252 91.3124 li
330.201 91.3124 li
331.159 91.3124 331.935 90.8554 331.935 90.2932 cv
331.935 89.7299 331.159 89.2727 330.201 89.2727 cv
cp
f
329.364 93.2579 mo
310.252 93.2579 li
309.57 93.2579 li
290.457 93.2579 li
289.537 93.2579 288.789 93.7148 288.789 94.2783 cv
288.789 94.8406 289.537 95.2975 290.457 95.2975 cv
309.57 95.2975 li
310.252 95.2975 li
329.364 95.2975 li
330.285 95.2975 331.032 94.8406 331.032 94.2783 cv
331.032 93.7148 330.285 93.2579 329.364 93.2579 cv
cp
f
328.559 97.243 mo
310.252 97.243 li
309.57 97.243 li
291.262 97.243 li
290.376 97.243 289.657 97.7 289.657 98.2634 cv
289.657 98.8257 290.376 99.2827 291.262 99.2827 cv
309.57 99.2827 li
310.252 99.2827 li
328.559 99.2827 li
329.445 99.2827 330.164 98.8257 330.164 98.2634 cv
330.164 97.7 329.445 97.243 328.559 97.243 cv
cp
f
327.786 101.228 mo
310.252 101.228 li
309.57 101.228 li
292.036 101.228 li
291.183 101.228 290.493 101.685 290.493 102.249 cv
290.493 102.811 291.183 103.268 292.036 103.268 cv
309.57 103.268 li
310.252 103.268 li
327.786 103.268 li
328.638 103.268 329.329 102.811 329.329 102.249 cv
329.329 101.685 328.638 101.228 327.786 101.228 cv
cp
f
327.042 105.213 mo
310.252 105.213 li
309.57 105.213 li
292.779 105.213 li
291.959 105.213 291.295 105.67 291.295 106.234 cv
291.295 106.796 291.959 107.253 292.779 107.253 cv
309.57 107.253 li
310.252 107.253 li
327.042 107.253 li
327.862 107.253 328.527 106.796 328.527 106.234 cv
328.527 105.67 327.862 105.213 327.042 105.213 cv
cp
f
326.328 109.198 mo
310.252 109.198 li
309.57 109.198 li
293.493 109.198 li
292.706 109.198 292.066 109.655 292.066 110.219 cv
292.066 110.781 292.706 111.238 293.493 111.238 cv
309.57 111.238 li
310.252 111.238 li
326.328 111.238 li
327.115 111.238 327.755 110.781 327.755 110.219 cv
327.755 109.655 327.115 109.198 326.328 109.198 cv
cp
f
325.64 113.183 mo
310.252 113.183 li
309.57 113.183 li
294.182 113.183 li
293.423 113.183 292.809 113.641 292.809 114.204 cv
292.809 114.766 293.423 115.223 294.182 115.223 cv
309.57 115.223 li
310.252 115.223 li
325.64 115.223 li
326.398 115.223 327.012 114.766 327.012 114.204 cv
327.012 113.641 326.398 113.183 325.64 113.183 cv
cp
f
324.98 117.169 mo
310.252 117.169 li
309.57 117.169 li
294.842 117.169 li
294.114 117.169 293.524 117.626 293.524 118.189 cv
293.524 118.751 294.114 119.208 294.842 119.208 cv
309.57 119.208 li
310.252 119.208 li
324.98 119.208 li
325.708 119.208 326.299 118.751 326.299 118.189 cv
326.299 117.626 325.708 117.169 324.98 117.169 cv
cp
f
275.28 6.44781 mo
275.28 8.13458 li
275.863 8.11383 276.446 8.09296 277.027 8.07318 cv
277.027 6.43573 li
276.737 6.50146 276.437 6.53986 276.126 6.53986 cv
275.834 6.53986 275.554 6.50586 275.28 6.44781 cv
cp
f
283.98 6.44781 mo
283.98 7.86273 li
284.563 7.84747 285.144 7.83209 285.725 7.81787 cv
285.725 6.43573 li
285.435 6.50146 285.135 6.53986 284.824 6.53986 cv
284.532 6.53986 284.252 6.50586 283.98 6.44781 cv
cp
f
292.678 6.44781 mo
292.678 7.66882 li
293.261 7.65894 293.842 7.64905 294.423 7.64032 cv
294.423 6.43573 li
294.133 6.50146 293.833 6.53986 293.524 6.53986 cv
293.233 6.53986 292.95 6.50586 292.678 6.44781 cv
cp
f
284.824 6.23303 mo
286.7 6.23303 288.226 4.83563 288.226 3.117 cv
288.226 1.3985 286.7 0 284.824 0 cv
282.95 0 281.424 1.3985 281.424 3.117 cv
281.424 4.83563 282.95 6.23303 284.824 6.23303 cv
cp
f
276.126 6.23303 mo
278.002 6.23303 279.528 4.83563 279.528 3.117 cv
279.528 1.3985 278.002 0 276.126 0 cv
274.252 0 272.724 1.3985 272.724 3.117 cv
272.724 4.83563 274.252 6.23303 276.126 6.23303 cv
cp
f
293.524 6.23303 mo
295.398 6.23303 296.924 4.83563 296.924 3.117 cv
296.924 1.3985 295.398 0 293.524 0 cv
291.648 0 290.122 1.3985 290.122 3.117 cv
290.122 4.83563 291.648 6.23303 293.524 6.23303 cv
cp
f
258.515 132.99 mo
258.515 126.655 li
258.515 125.133 259.85 123.896 261.49 123.896 cv
261.602 123.896 li
260.986 118.14 260.584 112.367 260.402 106.59 cv
258.241 107.305 256.713 109.014 256.713 111.005 cv
256.713 141.128 li
256.713 143.76 259.381 145.902 262.662 145.902 cv
269.797 145.902 li
273.079 145.902 275.747 143.76 275.747 141.128 cv
275.747 135.748 li
261.49 135.748 li
259.85 135.748 258.515 134.511 258.515 132.99 cv
cp
f
268.708 15.4604 mo
271.216 11.9247 272.755 11.1826 273.603 11.1826 cv
273.971 11.1826 274.289 11.3229 274.545 11.6013 cv
274.975 12.0649 275.126 12.8003 275.067 13.1313 cv
275.041 13.1993 272.031 22.0047 271.797 22.5505 cv
271.547 23.1313 267.779 23.5303 265.183 23.6279 cv
265.137 23.629 li
264.841 23.629 264.741 23.5161 264.688 23.4306 cv
264.217 22.6339 265.683 19.7294 268.708 15.4604 cv
cp
345.276 11.6013 mo
345.532 11.3229 345.85 11.1826 346.218 11.1826 cv
347.069 11.1826 348.606 11.9247 351.113 15.4604 cv
354.14 19.7294 355.605 22.6339 355.133 23.4306 cv
355.081 23.5161 354.98 23.629 354.684 23.629 cv
354.638 23.6279 li
352.043 23.5303 348.275 23.1313 348.025 22.5505 cv
347.79 22.0047 344.778 13.1993 344.754 13.1313 cv
344.695 12.8003 344.846 12.0649 345.276 11.6013 cv
cp
259.876 35.8913 mo
260.087 35.9175 260.308 35.9384 260.554 35.9449 cv
261.685 35.9767 262.825 36.0041 263.96 36.0337 cv
264.28 35.9274 264.624 35.866 264.984 35.866 cv
309.57 35.866 li
310.252 35.866 li
354.837 35.866 li
355.197 35.866 355.541 35.9274 355.861 36.0337 cv
356.997 36.0041 358.137 35.9767 359.268 35.9449 cv
359.513 35.9384 359.734 35.9175 359.945 35.8913 cv
360.767 35.7892 361.328 35.5592 361.528 35.3497 cv
361.563 35.3148 361.6 35.2632 361.596 35.2172 cv
360.708 27.7653 356.648 19.6724 348.818 9.75116 cv
348.575 9.44318 347.865 9.09247 347.045 8.91827 cv
346.771 8.86017 346.486 8.82178 346.201 8.81091 cv
333.862 8.35602 322.069 8.13458 310.159 8.13245 cv
310.076 8.13245 309.993 8.13245 309.912 8.13245 cv
309.828 8.13245 309.745 8.13245 309.662 8.13245 cv
297.753 8.13458 285.959 8.35602 273.62 8.81091 cv
273.336 8.82178 273.051 8.86017 272.776 8.91827 cv
271.957 9.09247 271.247 9.44318 271.003 9.75116 cv
263.173 19.6724 259.114 27.7653 258.226 35.2172 cv
258.221 35.2632 258.261 35.3148 258.294 35.3497 cv
258.493 35.5592 259.054 35.7892 259.876 35.8913 cv
cp
f
255.251 133.5 mo
256.172 133.5 li
256.172 131.864 li
255.251 131.864 li
255.251 133.5 li
cp
f
255.251 130.8 mo
256.172 130.8 li
256.172 129.162 li
255.251 129.162 li
255.251 130.8 li
cp
f
255.251 127.269 mo
256.172 127.269 li
256.172 125.631 li
255.251 125.631 li
255.251 127.269 li
cp
f
255.251 123.737 mo
256.172 123.737 li
256.172 122.101 li
255.251 122.101 li
255.251 123.737 li
cp
f
255.251 121.036 mo
256.172 121.036 li
256.172 119.399 li
255.251 119.399 li
255.251 121.036 li
cp
f
363.768 133.5 mo
364.689 133.5 li
364.689 131.864 li
363.768 131.864 li
363.768 133.5 li
cp
f
363.768 130.8 mo
364.689 130.8 li
364.689 129.162 li
363.768 129.162 li
363.768 130.8 li
cp
f
363.768 127.269 mo
364.689 127.269 li
364.689 125.631 li
363.768 125.631 li
363.768 127.269 li
cp
f
363.768 123.737 mo
364.689 123.737 li
364.689 122.101 li
363.768 122.101 li
363.768 123.737 li
cp
f
363.768 121.036 mo
364.689 121.036 li
364.689 119.399 li
363.768 119.399 li
363.768 121.036 li
cp
f
338.018 322.434 mo
338.104 322.235 338.225 322.046 338.387 321.883 cv
338.441 321.828 338.504 321.786 338.566 321.74 cv
337.873 321.309 337.109 320.986 336.293 320.794 cv
336.303 320.87 336.316 320.946 336.316 321.025 cv
336.316 321.255 336.269 321.473 336.188 321.675 cv
336.842 321.838 337.455 322.096 338.018 322.434 cv
cp
f
144.347 322.433 mo
144.435 322.231 144.559 322.043 144.719 321.883 cv
144.773 321.828 144.837 321.786 144.898 321.74 cv
144.205 321.309 143.44 320.986 142.624 320.794 cv
142.635 320.87 142.648 320.946 142.648 321.025 cv
142.648 321.255 142.601 321.473 142.521 321.675 cv
143.172 321.838 143.785 322.096 144.347 322.433 cv
cp
f
147.357 326.304 mo
148.266 326.304 li
148.07 325.554 147.766 324.85 147.366 324.207 cv
147.319 324.268 147.275 324.331 147.22 324.385 cv
147.06 324.545 146.873 324.669 146.671 324.756 cv
146.96 325.238 147.194 325.755 147.357 326.304 cv
cp
f
137.411 322.434 mo
137.973 322.096 138.586 321.838 139.238 321.675 cv
139.158 321.473 139.11 321.255 139.11 321.025 cv
139.11 320.946 139.124 320.87 139.134 320.794 cv
138.317 320.986 137.553 321.309 136.86 321.74 cv
136.921 321.786 136.983 321.828 137.038 321.883 cv
137.199 322.043 137.323 322.231 137.411 322.434 cv
cp
f
106.349 300.124 mo
106.349 298.397 li
352.021 298.878 li
383.539 300.124 li
106.349 300.124 li
cp
234.537 320.546 mo
234.537 315.757 li
239.269 315.757 li
239.269 319.592 li
245.109 319.592 li
256.029 319.587 256.568 319.556 264.818 319.837 cv
234.537 320.546 li
cp
231.514 313.684 mo
231.406 313.666 231.295 313.656 231.18 313.656 cv
195.843 313.656 li
195.106 313.656 194.509 314.043 194.509 314.52 cv
194.509 313.656 li
194.509 313.179 195.106 312.791 195.843 312.791 cv
230.18 312.791 li
230.916 312.791 231.514 313.179 231.514 313.656 cv
231.514 313.684 li
cp
192.676 320.546 mo
183.13 320.546 li
183.13 315.757 li
192.676 315.757 li
192.676 320.546 li
cp
62.9277 295.101 mo
57.8682 294.904 52.7578 295.733 48.0957 297.661 cv
45.7676 298.626 43.5576 299.874 41.5713 301.408 cv
39.585 302.94 37.8262 304.763 36.4258 306.83 cv
35.0205 308.892 33.9795 311.192 33.3525 313.6 cv
32.7217 316.011 32.5029 318.509 32.6191 321.009 cv
31.4678 321.041 li
31.3965 318.459 31.6729 315.837 32.3799 313.335 cv
33.082 310.832 34.2158 308.452 35.7158 306.336 cv
37.2119 304.218 39.0664 302.37 41.1367 300.833 cv
43.207 299.296 45.4912 298.065 47.8799 297.127 cv
52.6641 295.253 57.8467 294.519 62.9424 294.813 cv
68.0371 295.112 73.0811 296.456 77.5605 298.878 cv
73.0361 296.542 67.9883 295.302 62.9277 295.101 cv
cp
385.451 200.742 mo
103.477 200.742 li
102.139 200.742 101.053 201.495 101.053 202.425 cv
101.053 300.926 li
101.053 301.855 102.139 302.609 103.477 302.609 cv
91.9609 302.609 li
91.9727 302.522 91.9814 302.434 91.9814 302.344 cv
91.9814 246.16 li
27.5645 246.16 li
27.7969 246.356 28.4482 246.572 29.4014 246.668 cv
29.6455 246.693 29.9043 246.999 30.1875 247.006 cv
31.501 247.036 54.7598 246.986 54.7598 246.986 cv
54.7598 267.78 li
50.0918 273.434 li
34.082 273.434 li
32.9561 273.434 32.0439 274.247 32.0439 275.249 cv
32.0439 300.781 li
32.0439 301.783 32.9561 307.059 34.082 307.059 cv
33.2178 307.059 li
32.0918 307.059 31.1797 301.783 31.1797 300.781 cv
31.1797 276.202 li
27.5547 276.874 li
27.5605 276.834 27.5654 276.794 27.5703 276.754 cv
26.5273 276.754 li
26.4541 276.754 26.3828 276.745 26.3125 276.729 cv
31.1797 276.01 li
31.1797 275.249 li
31.1797 274.247 32.0918 273.434 33.2178 273.434 cv
33.2383 273.434 li
31.418 272.792 29.3066 272.511 27.0518 272.489 cv
27.1182 272.165 27.166 271.815 27.1865 271.441 cv
27.2686 269.994 27.2686 268.539 27.1865 267.091 cv
27.0713 265.038 26.1865 263.657 25.4443 263.967 cv
25.3828 263.991 25.3213 264.013 25.2598 264.036 cv
25.2598 263.506 li
25.377 263.506 li
26.4092 263.506 27.2451 262.475 27.2451 261.203 cv
27.2451 251.266 li
27.2451 249.994 26.4092 248.962 25.377 248.962 cv
25.3604 248.962 li
25.5537 248.37 26.0039 247.953 26.5273 247.953 cv
28.7354 247.953 li
28.7412 247.57 28.748 247.186 28.7549 246.802 cv
26.5273 246.802 li
25.4883 246.802 24.6162 247.725 24.3867 248.962 cv
24.3262 248.962 li
23.2939 248.962 22.458 249.994 22.458 251.266 cv
22.458 261.203 li
22.458 262.475 23.2939 263.506 24.3262 263.506 cv
24.3262 264.382 li
23.4805 264.696 22.6357 265.009 21.791 265.322 cv
21.043 265.632 20.5957 266.811 20.6582 267.977 cv
20.707 268.834 20.707 269.698 20.6582 270.556 cv
20.6094 271.469 20.874 272.388 21.3506 272.894 cv
1.26459 276.874 4 280.023 4 280.023 cv
24.8701 276.942 li
24.9639 277.078 25.0684 277.205 25.1816 277.316 cv
4 281.252 li
4 283.068 li
9.80371 282.809 15.3408 282.586 15.3262 282.683 cv
8.20898 321.217 li
8.12402 321.786 9.53607 322.323 11.1611 322.752 cv
11.9473 322.073 14.7363 320.895 16.6348 320.191 cv
16.6348 318.345 li
16.5439 318.486 16.4463 318.572 16.3467 318.572 cv
16.3232 318.57 li
11.0156 318.594 li
11 318.594 li
9.93262 318.594 9.21881 318.089 9.13672 317.277 cv
9.07709 316.681 9.30573 315.555 10.7314 313.57 cv
12.959 310.469 14.6904 308.897 15.877 308.897 cv
16.1992 308.897 16.4453 309.019 16.6348 309.194 cv
16.6348 306.849 li
16.6348 305.577 17.9346 304.544 19.5381 304.544 cv
20.9492 304.544 li
22.2803 304.544 23.4004 305.257 23.7422 306.227 cv
23.21 305.727 22.415 305.409 21.5254 305.409 cv
20.1143 305.409 li
18.5107 305.409 17.2109 306.441 17.2109 307.712 cv
17.2109 322.563 li
17.2109 322.779 17.251 322.986 17.3213 323.184 cv
17.2148 323.084 17.1201 322.976 17.0361 322.864 cv
17.0361 322.909 17.0361 322.955 17.0361 322.994 cv
17.0361 323.761 16.79 324.386 16.4883 324.386 cv
11.502 324.386 li
11.3027 324.386 11.1299 324.112 11.0332 323.714 cv
4 323.714 li
4 326.152 li
35.291 326.152 li
35.3389 325.499 35.3828 324.848 35.4258 324.196 cv
40.8457 324.196 li
42.7041 315.484 50.457 308.929 59.7148 308.929 cv
68.9736 308.929 76.7266 315.484 78.585 324.196 cv
115.74 324.196 li
115.74 322.658 li
122.269 322.658 li
122.378 322.294 124.061 319.047 125.744 315.825 cv
125.993 315.757 li
129.56 311.505 134.907 308.793 140.879 308.793 cv
145.301 308.793 149.369 310.294 152.639 312.791 cv
180.802 312.791 li
181.69 312.791 182.41 313.179 182.41 313.656 cv
182.41 313.684 li
182.281 313.666 182.148 313.656 182.008 313.656 cv
153.694 313.656 li
157.289 316.821 159.719 321.278 160.215 326.304 cv
180.497 326.304 li
181.951 326.304 183.13 325.273 183.13 324 cv
183.13 322.658 li
192.676 322.658 li
192.676 324 li
192.676 325.273 193.912 326.304 195.437 326.304 cv
231.775 326.304 li
233.301 326.304 234.537 325.273 234.537 324 cv
234.537 322.658 li
243.377 322.658 li
254.496 322.658 256.426 322.586 262.123 322.432 cv
262.123 322.433 262.123 322.433 262.123 322.433 cv
266.111 322.658 li
266.328 321.936 266.582 321.231 266.879 320.546 cv
266.74 320.546 li
267.023 320.261 267.17 319.944 267.338 319.592 cv
270.525 313.203 277.111 308.793 284.723 308.793 cv
292.332 308.793 298.916 313.202 302.104 319.588 cv
307.957 319.586 311.578 319.586 317.166 319.589 cv
320.352 313.202 326.938 308.793 334.547 308.793 cv
340.519 308.793 345.865 311.505 349.432 315.757 cv
363.252 315.757 li
363.252 302.609 li
367.141 302.609 li
367.141 320.546 li
352.391 320.546 li
352.685 321.231 352.94 321.936 353.156 322.658 cv
370.164 322.658 li
370.164 302.609 li
385.451 302.609 li
386.789 302.609 387.875 301.855 387.875 300.926 cv
387.875 202.425 li
387.875 201.495 386.789 200.742 385.451 200.742 cv
cp
f
331.078 322.433 mo
331.641 322.096 332.254 321.838 332.906 321.675 cv
332.824 321.473 332.777 321.255 332.777 321.025 cv
332.777 320.946 332.791 320.87 332.801 320.794 cv
331.984 320.987 331.221 321.309 330.529 321.74 cv
330.59 321.786 330.652 321.828 330.707 321.883 cv
330.867 322.043 330.992 322.231 331.078 322.433 cv
cp
f
281.252 322.434 mo
281.815 322.096 282.428 321.838 283.08 321.675 cv
283 321.473 282.953 321.255 282.953 321.025 cv
282.953 320.946 282.967 320.87 282.977 320.794 cv
282.16 320.986 281.396 321.309 280.703 321.74 cv
280.764 321.785 280.826 321.828 280.881 321.882 cv
281.045 322.045 281.166 322.234 281.252 322.434 cv
cp
f
288.191 322.434 mo
288.277 322.235 288.398 322.046 288.563 321.883 cv
288.617 321.828 288.68 321.786 288.74 321.74 cv
288.049 321.309 287.283 320.986 286.467 320.794 cv
286.477 320.87 286.49 320.946 286.49 321.025 cv
286.49 321.255 286.443 321.473 286.363 321.675 cv
287.016 321.838 287.629 322.096 288.191 322.434 cv
cp
f
5 337.539 mo
39.2793 337.539 li
39.2793 327.556 li
0 327.556 li
5 337.539 li
cp
f
13.2119 286.689 mo
13.2119 286.16 12.5752 285.731 11.7881 285.731 cv
4 285.731 li
4 287.646 li
11.7881 287.646 li
12.5752 287.646 13.2119 287.217 13.2119 286.689 cv
cp
f
4 291.39 mo
11.1016 291.39 li
11.8584 291.39 12.4707 290.961 12.4707 290.433 cv
12.4707 289.904 11.8584 289.475 11.1016 289.475 cv
4 289.475 li
4 291.39 li
cp
f
4 295.134 mo
10.4424 295.134 li
11.1689 295.134 11.7588 294.706 11.7588 294.177 cv
11.7588 293.648 11.1689 293.219 10.4424 293.219 cv
4 293.219 li
4 295.134 li
cp
f
4 298.878 mo
9.80762 298.878 li
10.5068 298.878 11.0732 298.45 11.0732 297.921 cv
11.0732 297.392 10.5068 296.963 9.80762 296.963 cv
4 296.963 li
4 298.878 li
cp
f
4 302.622 mo
9.19818 302.622 li
9.87012 302.622 10.415 302.194 10.415 301.665 cv
10.415 301.136 9.87012 300.707 9.19818 300.707 cv
4 300.707 li
4 302.622 li
cp
f
4 306.367 mo
8.61133 306.367 li
9.25781 306.367 9.78131 305.938 9.78131 305.41 cv
9.78131 304.88 9.25781 304.451 8.61133 304.451 cv
4 304.451 li
4 306.367 li
cp
f
4 310.111 mo
8.04688 310.111 li
8.66888 310.111 9.17188 309.682 9.17188 309.153 cv
9.17188 308.624 8.66888 308.195 8.04688 308.195 cv
4 308.195 li
4 310.111 li
cp
f
4 313.855 mo
7.50488 313.855 li
8.10248 313.855 8.58691 313.425 8.58691 312.897 cv
8.58691 312.369 8.10248 311.939 7.50488 311.939 cv
4 311.939 li
4 313.855 li
cp
f
4 317.599 mo
6.9834 317.599 li
7.55762 317.599 8.02338 317.169 8.02338 316.641 cv
8.02338 316.113 7.55762 315.683 6.9834 315.683 cv
4 315.683 li
4 317.599 li
cp
f
4 321.343 mo
6.48242 321.343 li
7.03418 321.343 7.48242 320.914 7.48242 320.385 cv
7.48242 319.856 7.03418 319.427 6.48242 319.427 cv
4 319.427 li
4 321.343 li
cp
f
44.5195 219.266 mo
45.2031 219.685 46.0801 219.936 47.0342 219.936 cv
49.2139 219.936 50.9883 218.622 50.9883 217.008 cv
50.9883 215.394 49.2139 214.081 47.0342 214.081 cv
46.042 214.081 45.1357 214.355 44.4404 214.803 cv
44.5254 215.234 44.5527 218.993 44.5195 219.266 cv
cp
f
45.3076 225.285 mo
45.2783 225.348 39.1914 233.622 38.9189 234.133 cv
38.6279 234.68 38.5742 235.054 35.5605 235.146 cv
35.5078 235.147 li
35.165 235.147 35.0469 235.04 34.9883 234.961 cv
34.4404 234.212 36.1416 231.483 39.6543 227.473 cv
42.5645 224.151 44.3496 223.453 45.335 223.453 cv
45.7627 223.453 46.1309 223.585 46.4307 223.847 cv
46.9287 224.283 45.376 224.974 45.3076 225.285 cv
cp
87.2295 220.587 mo
87.2207 220.578 87.2051 220.587 87.1924 220.587 cv
74.4414 220.589 61.7988 220.77 48.6738 221.132 cv
48.6738 220.138 li
48.418 220.193 48.1533 220.224 47.8799 220.224 cv
47.5879 220.224 47.3057 220.188 47.0342 220.126 cv
47.0342 221.178 li
46.4736 221.194 45.918 221.208 45.3564 221.225 cv
45.0254 221.235 44.6934 221.271 44.375 221.327 cv
43.4258 221.49 42.6006 221.82 42.3174 222.108 cv
33.6719 230.976 28.9883 238.289 27.665 245.007 cv
91.9443 245.007 li
91.792 239.73 91.0264 224.384 87.2295 220.587 cv
cp
f
95.8691 249.105 mo
94.5967 249.105 93.5654 250.136 93.5654 251.409 cv
93.5654 298.477 li
93.5654 299.749 94.5967 300.781 95.8691 300.781 cv
97.3086 300.781 li
98.5811 300.781 99.6133 299.749 99.6133 298.477 cv
99.6133 251.409 li
99.6133 250.136 98.5811 249.105 97.3086 249.105 cv
95.8691 249.105 li
cp
f
97.3086 219.073 mo
97.3574 219.073 97.4053 219.068 97.4531 219.065 cv
97.4531 213.224 li
97.4053 213.22 97.3574 213.216 97.3086 213.216 cv
97.3086 213.216 56.4248 219.073 57.6973 219.073 cv
97.3086 219.073 li
cp
f
59.7148 338.881 mo
53.8389 338.881 49.0586 334.101 49.0586 328.225 cv
49.0586 322.349 53.8389 317.569 59.7148 317.569 cv
65.5908 317.569 70.3711 322.349 70.3711 328.225 cv
70.3711 334.101 65.5908 338.881 59.7148 338.881 cv
cp
59.7148 309.793 mo
49.5352 309.793 41.2832 318.045 41.2832 328.225 cv
41.2832 338.405 49.5352 346.658 59.7148 346.658 cv
69.8955 346.658 78.1475 338.405 78.1475 328.225 cv
78.1475 318.045 69.8955 309.793 59.7148 309.793 cv
cp
f
59.7148 336.866 mo
54.9512 336.866 51.0752 332.99 51.0752 328.225 cv
51.0752 323.461 54.9512 319.585 59.7148 319.585 cv
64.4795 319.585 68.3555 323.461 68.3555 328.225 cv
68.3555 332.99 64.4795 336.866 59.7148 336.866 cv
cp
59.7148 318.145 mo
54.1572 318.145 49.6348 322.667 49.6348 328.225 cv
49.6348 333.784 54.1572 338.305 59.7148 338.305 cv
65.2734 338.305 69.7949 333.784 69.7949 328.225 cv
69.7949 322.667 65.2734 318.145 59.7148 318.145 cv
cp
f
59.7148 322.465 mo
56.5391 322.465 53.9551 325.049 53.9551 328.225 cv
53.9551 331.402 56.5391 333.986 59.7148 333.986 cv
62.8916 333.986 65.4756 331.402 65.4756 328.225 cv
65.4756 325.049 62.8916 322.465 59.7148 322.465 cv
cp
f
59.7148 321.794 mo
60.1396 321.794 60.4844 321.45 60.4844 321.025 cv
60.4844 320.601 60.1396 320.256 59.7148 320.256 cv
59.29 320.256 58.9463 320.601 58.9463 321.025 cv
58.9463 321.45 59.29 321.794 59.7148 321.794 cv
cp
f
59.7148 334.657 mo
59.29 334.657 58.9463 335 58.9463 335.425 cv
58.9463 335.85 59.29 336.195 59.7148 336.195 cv
60.1396 336.195 60.4844 335.85 60.4844 335.425 cv
60.4844 335 60.1396 334.657 59.7148 334.657 cv
cp
f
55.168 323.677 mo
55.4678 323.377 55.4678 322.89 55.168 322.59 cv
54.8672 322.29 54.3809 322.29 54.0801 322.59 cv
53.7803 322.89 53.7803 323.377 54.0801 323.677 cv
54.3809 323.978 54.8672 323.978 55.168 323.677 cv
cp
f
64.2627 332.773 mo
63.9619 333.073 63.9619 333.56 64.2627 333.861 cv
64.5635 334.161 65.0498 334.161 65.3506 333.861 cv
65.6504 333.56 65.6504 333.073 65.3506 332.773 cv
65.0498 332.472 64.5635 332.472 64.2627 332.773 cv
cp
f
52.5146 327.456 mo
52.0908 327.456 51.7461 327.8 51.7461 328.225 cv
51.7461 328.65 52.0908 328.995 52.5146 328.994 cv
52.9395 328.995 53.2842 328.65 53.2842 328.225 cv
53.2842 327.8 52.9395 327.456 52.5146 327.456 cv
cp
f
66.915 328.995 mo
67.3398 328.995 67.6846 328.65 67.6846 328.225 cv
67.6846 327.8 67.3398 327.456 66.915 327.456 cv
66.4902 327.456 66.1465 327.8 66.1465 328.225 cv
66.1465 328.65 66.4902 328.994 66.915 328.995 cv
cp
f
54.0801 332.773 mo
53.7803 333.073 53.7803 333.56 54.0801 333.86 cv
54.3809 334.161 54.8672 334.161 55.167 333.86 cv
55.4678 333.56 55.4678 333.073 55.167 332.773 cv
54.8672 332.472 54.3809 332.472 54.0801 332.773 cv
cp
f
64.2627 322.59 mo
63.9619 322.89 63.9619 323.377 64.2627 323.677 cv
64.5625 323.978 65.0498 323.978 65.3506 323.677 cv
65.6504 323.377 65.6504 322.89 65.3506 322.59 cv
65.0498 322.289 64.5625 322.289 64.2627 322.59 cv
cp
f
140.879 338.881 mo
135.003 338.881 130.223 334.101 130.223 328.225 cv
130.223 322.349 135.003 317.569 140.879 317.569 cv
146.755 317.569 151.535 322.349 151.535 328.225 cv
151.535 334.101 146.755 338.881 140.879 338.881 cv
cp
140.879 309.793 mo
130.699 309.793 122.446 318.045 122.446 328.225 cv
122.446 338.405 130.699 346.658 140.879 346.658 cv
151.059 346.658 159.312 338.405 159.312 328.225 cv
159.312 318.045 151.059 309.793 140.879 309.793 cv
cp
f
140.879 336.866 mo
136.115 336.866 132.239 332.99 132.239 328.225 cv
132.239 323.461 136.115 319.585 140.879 319.585 cv
145.644 319.585 149.519 323.461 149.519 328.225 cv
149.519 332.99 145.644 336.866 140.879 336.866 cv
cp
140.879 318.145 mo
135.321 318.145 130.799 322.667 130.799 328.225 cv
130.799 333.784 135.321 338.305 140.879 338.305 cv
146.438 338.305 150.959 333.784 150.959 328.225 cv
150.959 322.667 146.438 318.145 140.879 318.145 cv
cp
f
140.879 322.465 mo
137.703 322.465 135.119 325.049 135.119 328.225 cv
135.119 331.402 137.703 333.986 140.879 333.986 cv
144.055 333.986 146.639 331.402 146.639 328.225 cv
146.639 325.049 144.055 322.465 140.879 322.465 cv
cp
f
140.879 321.794 mo
141.304 321.794 141.648 321.45 141.648 321.025 cv
141.648 320.601 141.304 320.256 140.879 320.256 cv
140.454 320.256 140.11 320.601 140.11 321.025 cv
140.11 321.45 140.454 321.794 140.879 321.794 cv
cp
f
140.879 334.657 mo
140.454 334.657 140.11 335 140.11 335.425 cv
140.11 335.85 140.454 336.195 140.879 336.195 cv
141.304 336.195 141.648 335.85 141.648 335.425 cv
141.648 335 141.304 334.657 140.879 334.657 cv
cp
f
136.331 323.677 mo
136.632 323.377 136.632 322.89 136.331 322.59 cv
136.031 322.29 135.544 322.29 135.244 322.59 cv
134.943 322.89 134.943 323.377 135.244 323.677 cv
135.544 323.978 136.031 323.978 136.331 323.677 cv
cp
f
145.427 332.773 mo
145.126 333.073 145.126 333.56 145.427 333.861 cv
145.727 334.161 146.214 334.161 146.514 333.861 cv
146.815 333.56 146.815 333.073 146.514 332.773 cv
146.214 332.472 145.727 332.472 145.427 332.773 cv
cp
f
133.679 327.456 mo
133.254 327.456 132.91 327.8 132.91 328.225 cv
132.91 328.65 133.254 328.995 133.679 328.994 cv
134.104 328.995 134.448 328.65 134.448 328.225 cv
134.448 327.8 134.104 327.456 133.679 327.456 cv
cp
f
147.31 328.225 mo
147.31 328.65 147.654 328.994 148.079 328.995 cv
148.504 328.995 148.848 328.65 148.848 328.225 cv
148.848 327.8 148.504 327.456 148.079 327.456 cv
147.654 327.456 147.31 327.8 147.31 328.225 cv
cp
f
135.244 332.773 mo
134.943 333.073 134.943 333.56 135.244 333.86 cv
135.544 334.161 136.031 334.161 136.331 333.86 cv
136.632 333.56 136.632 333.073 136.331 332.773 cv
136.031 332.472 135.544 332.472 135.244 332.773 cv
cp
f
146.514 323.677 mo
146.815 323.377 146.815 322.89 146.514 322.59 cv
146.214 322.289 145.727 322.289 145.426 322.59 cv
145.126 322.89 145.126 323.377 145.426 323.677 cv
145.727 323.978 146.214 323.978 146.514 323.677 cv
cp
f
334.547 338.881 mo
328.672 338.881 323.891 334.101 323.891 328.225 cv
323.891 322.349 328.672 317.569 334.547 317.569 cv
340.424 317.569 345.203 322.349 345.203 328.225 cv
345.203 334.101 340.424 338.881 334.547 338.881 cv
cp
334.547 309.793 mo
324.367 309.793 316.115 318.045 316.115 328.225 cv
316.115 338.405 324.367 346.658 334.547 346.658 cv
344.727 346.658 352.979 338.405 352.979 328.225 cv
352.979 318.045 344.727 309.793 334.547 309.793 cv
cp
f
334.547 336.866 mo
329.783 336.866 325.906 332.99 325.906 328.225 cv
325.906 323.461 329.783 319.585 334.547 319.585 cv
339.31 319.585 343.188 323.461 343.188 328.225 cv
343.188 332.99 339.31 336.866 334.547 336.866 cv
cp
334.547 318.145 mo
328.988 318.145 324.467 322.667 324.467 328.225 cv
324.467 333.784 328.988 338.305 334.547 338.305 cv
340.106 338.305 344.627 333.784 344.627 328.225 cv
344.627 322.667 340.106 318.145 334.547 318.145 cv
cp
f
334.547 322.465 mo
331.371 322.465 328.787 325.049 328.787 328.225 cv
328.787 331.402 331.371 333.986 334.547 333.986 cv
337.723 333.986 340.307 331.402 340.307 328.225 cv
340.307 325.049 337.723 322.465 334.547 322.465 cv
cp
f
334.547 321.794 mo
334.973 321.794 335.316 321.45 335.316 321.025 cv
335.316 320.601 334.973 320.256 334.547 320.256 cv
334.123 320.256 333.777 320.601 333.777 321.025 cv
333.777 321.45 334.123 321.794 334.547 321.794 cv
cp
f
334.547 334.657 mo
334.123 334.657 333.777 335 333.777 335.425 cv
333.777 335.85 334.123 336.195 334.547 336.195 cv
334.973 336.195 335.316 335.85 335.316 335.425 cv
335.316 335 334.973 334.657 334.547 334.657 cv
cp
f
330 323.677 mo
330.301 323.377 330.301 322.89 330 322.59 cv
329.699 322.29 329.213 322.29 328.912 322.59 cv
328.611 322.89 328.611 323.377 328.912 323.677 cv
329.213 323.978 329.699 323.978 330 323.677 cv
cp
f
339.094 332.773 mo
338.795 333.073 338.795 333.56 339.094 333.861 cv
339.394 334.161 339.883 334.161 340.182 333.861 cv
340.482 333.56 340.482 333.073 340.182 332.773 cv
339.883 332.472 339.394 332.472 339.094 332.773 cv
cp
f
327.348 327.456 mo
326.922 327.456 326.578 327.8 326.578 328.225 cv
326.578 328.65 326.922 328.995 327.348 328.994 cv
327.771 328.995 328.115 328.65 328.115 328.225 cv
328.115 327.8 327.771 327.456 327.348 327.456 cv
cp
f
341.748 328.995 mo
342.172 328.995 342.516 328.65 342.516 328.225 cv
342.516 327.8 342.172 327.456 341.748 327.456 cv
341.322 327.456 340.979 327.8 340.979 328.225 cv
340.979 328.65 341.322 328.994 341.748 328.995 cv
cp
f
328.912 332.773 mo
328.611 333.073 328.611 333.56 328.912 333.86 cv
329.213 334.161 329.699 334.161 330 333.86 cv
330.301 333.56 330.301 333.073 330 332.773 cv
329.699 332.472 329.213 332.472 328.912 332.773 cv
cp
f
339.094 322.59 mo
338.795 322.89 338.795 323.377 339.094 323.677 cv
339.394 323.978 339.881 323.978 340.182 323.677 cv
340.482 323.377 340.482 322.89 340.182 322.59 cv
339.881 322.289 339.394 322.289 339.094 322.59 cv
cp
f
284.723 338.881 mo
278.846 338.881 274.066 334.101 274.066 328.225 cv
274.066 322.349 278.846 317.569 284.723 317.569 cv
290.598 317.569 295.379 322.349 295.379 328.225 cv
295.379 334.101 290.598 338.881 284.723 338.881 cv
cp
284.723 309.793 mo
274.543 309.793 266.289 318.045 266.289 328.225 cv
266.289 338.405 274.543 346.658 284.723 346.658 cv
294.902 346.658 303.154 338.405 303.154 328.225 cv
303.154 318.045 294.902 309.793 284.723 309.793 cv
cp
f
284.723 336.866 mo
279.959 336.866 276.082 332.99 276.082 328.225 cv
276.082 323.461 279.959 319.585 284.723 319.585 cv
289.486 319.585 293.363 323.461 293.363 328.225 cv
293.363 332.99 289.486 336.866 284.723 336.866 cv
cp
284.723 318.145 mo
279.164 318.145 274.643 322.667 274.643 328.225 cv
274.643 333.784 279.164 338.305 284.723 338.305 cv
290.281 338.305 294.803 333.784 294.803 328.225 cv
294.803 322.667 290.281 318.145 284.723 318.145 cv
cp
f
284.723 322.465 mo
281.547 322.465 278.963 325.049 278.963 328.225 cv
278.963 331.402 281.547 333.986 284.723 333.986 cv
287.898 333.986 290.482 331.402 290.482 328.225 cv
290.482 325.049 287.898 322.465 284.723 322.465 cv
cp
f
284.723 321.794 mo
285.146 321.794 285.49 321.45 285.49 321.025 cv
285.49 320.601 285.146 320.256 284.723 320.256 cv
284.297 320.256 283.953 320.601 283.953 321.025 cv
283.953 321.45 284.297 321.794 284.723 321.794 cv
cp
f
284.723 334.657 mo
284.297 334.657 283.953 335 283.953 335.425 cv
283.953 335.85 284.297 336.195 284.723 336.195 cv
285.146 336.195 285.49 335.85 285.49 335.425 cv
285.49 335 285.146 334.657 284.723 334.657 cv
cp
f
280.176 323.677 mo
280.475 323.377 280.475 322.89 280.176 322.59 cv
279.875 322.29 279.387 322.29 279.088 322.59 cv
278.787 322.89 278.787 323.377 279.088 323.677 cv
279.387 323.978 279.875 323.978 280.176 323.677 cv
cp
f
289.269 332.773 mo
288.969 333.073 288.969 333.56 289.269 333.861 cv
289.57 334.161 290.057 334.161 290.357 333.861 cv
290.658 333.56 290.658 333.073 290.357 332.773 cv
290.057 332.472 289.57 332.472 289.269 332.773 cv
cp
f
277.521 327.456 mo
277.098 327.456 276.754 327.8 276.754 328.225 cv
276.754 328.65 277.098 328.995 277.521 328.994 cv
277.947 328.995 278.291 328.65 278.291 328.225 cv
278.291 327.8 277.947 327.456 277.521 327.456 cv
cp
f
291.922 328.995 mo
292.348 328.995 292.691 328.65 292.691 328.225 cv
292.691 327.8 292.348 327.456 291.922 327.456 cv
291.498 327.456 291.154 327.8 291.154 328.225 cv
291.154 328.65 291.498 328.994 291.922 328.995 cv
cp
f
279.088 332.773 mo
278.787 333.073 278.787 333.56 279.088 333.86 cv
279.387 334.161 279.875 334.161 280.174 333.86 cv
280.475 333.56 280.475 333.073 280.174 332.773 cv
279.875 332.472 279.387 332.472 279.088 332.773 cv
cp
f
289.269 322.59 mo
288.969 322.89 288.969 323.377 289.269 323.677 cv
289.57 323.978 290.057 323.978 290.357 323.677 cv
290.658 323.377 290.658 322.89 290.357 322.59 cv
290.057 322.289 289.57 322.289 289.269 322.59 cv
cp
f
372.875 303.953 mo
372.322 303.953 371.875 304.401 371.875 304.953 cv
371.875 314.703 li
371.875 315.256 372.322 315.703 372.875 315.703 cv
373.428 315.703 373.875 315.256 373.875 314.703 cv
373.875 304.953 li
373.875 304.401 373.428 303.953 372.875 303.953 cv
cp
f
74.9038 7.99359 mo
74.9316 9.4057 li
76.7666 9.27289 78.6699 9.13611 80.6167 8.99652 cv
80.6167 7.75531 li
79.3818 7.57764 78.3779 6.66058 78.0244 5.43011 cv
76.7666 5.54633 li
76.5396 6.61761 75.8379 7.52478 74.9038 7.99359 cv
cp
f
46.5313 9.96722 mo
46.4707 11.5492 li
45.6484 11.6225 li
50.1914 11.2162 54.7012 10.8539 59.2222 10.5326 cv
59.6563 10.5014 li
62.8438 10.2768 66.7573 9.99451 71.146 9.6781 cv
71.8125 9.63031 72.4917 9.58148 73.1802 9.53174 cv
73.1802 8.3197 li
71.9282 8.19769 70.8921 7.3266 70.4902 6.1264 cv
48.0581 8.19958 li
47.7612 8.94861 47.2183 9.57764 46.5313 9.96722 cv
cp
f
44.6558 11.7113 mo
44.6558 10.3735 li
43.5874 10.2797 42.6729 9.65472 42.1743 8.74359 cv
40.9995 8.85199 li
40.8037 12.0707 li
42.2886 11.9281 43.7666 11.7914 45.2427 11.6586 cv
44.6558 11.7113 li
cp
f
82.6357 7.3656 mo
82.6357 8.85291 li
84.2783 8.7348 85.9478 8.61664 87.6411 8.49652 cv
87.5928 7.05701 li
86.5962 6.69568 85.8271 5.82849 85.563 4.73383 cv
84.3716 4.8432 li
84.1895 5.9223 83.5337 6.85291 82.6357 7.3656 cv
cp
f
90.0303 6.9115 mo
90.0767 8.32269 li
91.1938 8.23578 92.5376 8.1098 93.9502 7.97699 cv
97.3115 7.66058 101.121 7.30219 103.72 7.30219 cv
105.412 7.30219 106.209 7.45648 106.628 7.65369 cv
107.171 8.1098 li
107.616 8.59222 li
106.962 8.6225 li
106.66 9.39398 105.742 11.8803 104.325 17.0434 cv
104.631 17.0375 li
105.676 12.936 106.293 10.6244 107.682 8.88129 cv
107.899 8.60883 li
117.291 12.4574 li
117.663 10.6469 li
117.663 1.76703 li
91.9663 4.14203 li
91.8105 5.35681 91.0605 6.40271 90.0303 6.9115 cv
cp
f
212.602 118.54 mo
210.035 118.465 li
210.293 118.786 210.537 119.141 210.767 119.532 cv
212.602 118.54 li
cp
f
119.324 1.76703 mo
119.324 10.8979 li
121.011 13.5063 li
125.896 18.9916 127.148 22.6586 127.192 23.977 cv
127.047 106.616 li
217.938 114.692 li
217.938 68.4477 li
119.324 1.76703 li
cp
f
108.499 70.0326 mo
108.65 70.0277 108.798 69.9613 108.914 69.8432 cv
108.976 69.7797 109.028 69.7035 109.066 69.6205 cv
107.695 69.2592 106.598 67.5815 106.368 65.3754 cv
106.198 63.7592 106.143 62.1137 106.206 60.4858 cv
106.26 59.0453 106.723 57.7318 107.447 56.8979 cv
106.524 56.2709 105.951 55.2533 105.914 54.1254 cv
105.555 43.2719 li
105.523 42.2768 105.928 41.3266 106.629 40.6381 cv
103.779 40.7787 li
100.082 60.0238 li
100.35 68.1479 li
100.492 68.101 li
101.456 68.0942 li
102.18 68.0873 102.902 68.0824 103.623 68.0776 cv
104.732 68.0776 105.213 68.6381 105.403 68.9711 cv
105.509 69.1576 105.577 69.3637 105.606 69.5863 cv
106.591 69.3305 li
106.571 69.2973 106.554 69.2621 106.535 69.2309 cv
106.56 69.2602 106.583 69.2943 106.608 69.3256 cv
106.62 69.3227 li
106.613 69.3315 li
106.801 69.559 106.967 69.807 107.11 70.0727 cv
108.499 70.0326 li
cp
f
106.082 70.1029 mo
106.933 70.0776 li
106.842 69.8158 106.731 69.5707 106.601 69.349 cv
106.082 70.1029 li
cp
f
203.658 122.78 mo
204.28 121.651 205.162 120.952 206.142 120.968 cv
206.461 120.973 206.769 121.056 207.063 121.202 cv
208.859 121.314 210.309 123.843 210.313 126.914 cv
210.316 129.984 208.875 132.465 207.078 132.517 cv
206.785 132.654 206.477 132.726 206.157 132.72 cv
205.179 132.703 204.293 131.976 203.669 130.828 cv
203.106 129.74 202.763 128.327 202.761 126.789 cv
202.758 125.249 203.098 123.848 203.658 122.78 cv
cp
185.608 122.289 mo
186.305 120.957 187.343 120.105 188.533 120.069 cv
188.921 120.057 189.301 120.134 189.666 120.286 cv
191.854 120.314 193.744 123.135 193.908 126.66 cv
194.071 130.183 192.446 133.112 190.267 133.273 cv
189.919 133.446 189.547 133.546 189.159 133.558 cv
187.967 133.595 186.856 132.809 186.037 131.525 cv
185.296 130.309 184.806 128.706 184.725 126.94 cv
184.643 125.173 184.983 123.546 185.608 122.289 cv
cp
148.989 121.271 mo
149.957 119.64 151.361 118.6 152.945 118.563 cv
153.462 118.551 153.964 118.649 154.443 118.837 cv
157.351 118.885 159.78 122.366 159.892 126.7 cv
160.002 131.032 157.753 134.622 154.852 134.805 cv
154.383 135.016 153.886 135.136 153.37 135.149 cv
151.785 135.186 150.33 134.211 149.28 132.628 cv
148.333 131.128 147.731 129.156 147.674 126.984 cv
147.619 124.812 148.12 122.814 148.989 121.271 cv
cp
127.044 114.692 mo
140.692 115.646 li
140.464 115.888 140.25 116.143 140.044 116.407 cv
130.16 116.116 li
130.118 116.116 129.76 116.119 129.159 116.119 cv
127.442 116.119 123.743 116.097 120.039 115.943 cv
120.048 116 119.304 116.055 119.324 116.111 cv
120.689 120.078 120.622 123.3 120.663 126.906 cv
136.775 127.132 li
136.775 127.167 136.775 127.203 136.775 127.238 cv
136.978 135.159 141.278 140.457 147.354 141.153 cv
148.408 141.273 150.102 141.218 150.965 141.081 cv
150.955 141.034 150.942 140.987 150.932 140.939 cv
149.385 140.262 147.96 139.041 146.763 137.339 cv
146.498 136.963 146.25 136.567 146.017 136.157 cv
147.851 139.301 150.556 141.27 153.524 141.201 cv
156.429 141.133 158.981 139.128 160.655 136.019 cv
162.049 133.509 162.853 130.215 162.762 126.632 cv
162.669 123.049 161.699 119.798 160.178 117.354 cv
158.345 114.327 155.695 112.444 152.79 112.511 cv
149.822 112.581 147.221 114.672 145.549 117.898 cv
145.762 117.478 145.989 117.071 146.234 116.682 cv
147.403 114.831 148.855 113.501 150.464 112.775 cv
151.345 112.378 152.274 112.161 153.229 112.138 cv
155.93 112.076 158.495 113.572 160.448 116.352 cv
160.46 116.37 160.473 116.389 160.485 116.408 cv
179.815 117.151 li
179.679 117.283 179.548 117.422 179.421 117.565 cv
160.886 117.019 li
162.529 119.656 163.477 123.027 163.57 126.614 cv
163.577 126.914 163.577 127.211 163.573 127.508 cv
176.563 127.691 li
177.007 133.855 180.282 137.94 184.745 138.466 cv
185.541 138.56 186.813 138.509 187.459 138.394 cv
187.451 138.355 187.441 138.317 187.432 138.278 cv
186.257 137.734 185.161 136.747 184.229 135.368 cv
184.024 135.062 183.831 134.742 183.648 134.409 cv
185.085 136.958 187.155 138.549 189.387 138.481 cv
191.571 138.414 193.452 136.773 194.655 134.238 cv
195.656 132.19 196.2 129.507 196.065 126.593 cv
195.93 123.678 195.139 121.038 193.95 119.056 cv
192.517 116.602 190.488 115.081 188.305 115.147 cv
186.074 115.215 184.156 116.927 182.959 119.558 cv
183.111 119.214 183.273 118.883 183.451 118.566 cv
184.296 117.054 185.363 115.968 186.56 115.372 cv
187.216 115.044 187.909 114.864 188.629 114.842 cv
190.485 114.786 192.278 115.792 193.734 117.687 cv
199.291 117.901 li
199.201 117.978 199.113 118.058 199.027 118.142 cv
193.961 117.993 li
194.019 118.075 194.078 118.155 194.135 118.24 cv
195.625 120.446 196.526 123.406 196.672 126.575 cv
196.734 127.897 196.659 129.19 196.46 130.415 cv
197.345 133.968 199.512 136.313 202.352 136.81 cv
203.003 136.923 204.049 136.93 204.584 136.857 cv
204.578 136.823 204.572 136.789 204.565 136.754 cv
203.62 136.234 202.757 135.332 202.044 134.095 cv
201.886 133.821 201.739 133.534 201.6 133.238 cv
202.688 135.513 204.329 136.979 206.164 137.009 cv
207.959 137.039 209.565 135.687 210.646 133.533 cv
211.545 131.792 212.09 129.482 212.086 126.943 cv
212.083 124.403 211.531 122.077 210.628 120.305 cv
209.541 118.113 207.932 116.71 206.136 116.68 cv
204.301 116.649 202.663 118.061 201.583 120.3 cv
201.721 120.007 201.866 119.725 202.024 119.457 cv
202.773 118.176 203.69 117.275 204.695 116.805 cv
205.245 116.547 205.821 116.417 206.412 116.427 cv
207.683 116.448 208.89 117.107 209.908 118.309 cv
212.822 118.421 li
217.606 115.839 li
127.655 110.119 li
127.044 114.692 li
cp
f
209.381 126.473 mo
209.244 126.471 209.135 126.66 209.135 126.894 cv
209.136 127.127 209.246 127.32 209.382 127.322 cv
209.453 127.323 209.518 127.271 209.562 127.189 cv
209.541 127.947 209.438 128.665 209.264 129.32 cv
209.511 128.617 209.652 127.789 209.651 126.903 cv
209.649 126.016 209.506 125.183 209.258 124.473 cv
209.433 125.132 209.539 125.855 209.562 126.614 cv
209.516 126.53 209.452 126.475 209.381 126.473 cv
cp
f
204.212 126.812 mo
204.207 124.185 205.446 122.068 206.975 122.093 cv
208.502 122.119 209.747 124.277 209.75 126.905 cv
209.755 129.532 208.515 131.648 206.987 131.622 cv
205.46 131.597 204.214 129.439 204.212 126.812 cv
cp
206.988 132.416 mo
208.771 132.447 210.217 129.977 210.212 126.911 cv
210.208 123.847 208.756 121.33 206.973 121.3 cv
205.19 121.27 203.744 123.74 203.749 126.804 cv
203.753 129.87 205.207 132.387 206.988 132.416 cv
cp
f
208.919 126.89 mo
208.918 125.139 208.087 123.7 207.069 123.683 cv
206.051 123.666 205.225 125.078 205.226 126.83 cv
205.229 128.581 206.06 130.02 207.077 130.036 cv
208.097 130.053 208.922 128.641 208.919 126.89 cv
cp
f
207.068 123.314 mo
207.204 123.316 207.315 123.127 207.313 122.894 cv
207.313 122.66 207.203 122.466 207.067 122.465 cv
206.931 122.462 206.821 122.652 206.821 122.885 cv
206.821 123.12 206.932 123.311 207.068 123.314 cv
cp
f
207.325 130.834 mo
207.324 130.6 207.215 130.409 207.077 130.406 cv
206.941 130.404 206.831 130.592 206.832 130.826 cv
206.832 131.061 206.943 131.252 207.079 131.254 cv
207.215 131.256 207.325 131.069 207.325 130.834 cv
cp
f
205.612 124.328 mo
205.708 124.164 205.707 123.895 205.61 123.727 cv
205.515 123.56 205.358 123.558 205.263 123.722 cv
205.166 123.885 205.166 124.155 205.263 124.323 cv
205.359 124.489 205.516 124.492 205.612 124.328 cv
cp
f
208.533 129.391 mo
208.438 129.555 208.44 129.824 208.536 129.992 cv
208.632 130.159 208.788 130.161 208.884 129.997 cv
208.981 129.833 208.981 129.565 208.883 129.397 cv
208.787 129.231 208.63 129.228 208.533 129.391 cv
cp
f
204.765 126.398 mo
204.628 126.395 204.518 126.582 204.519 126.817 cv
204.519 127.051 204.629 127.243 204.765 127.245 cv
204.901 127.249 205.012 127.06 205.012 126.826 cv
205.012 126.591 204.899 126.4 204.765 126.398 cv
cp
f
205.269 129.337 mo
205.174 129.501 205.174 129.77 205.271 129.937 cv
205.367 130.105 205.523 130.108 205.619 129.943 cv
205.716 129.779 205.715 129.51 205.619 129.342 cv
205.523 129.176 205.367 129.173 205.269 129.337 cv
cp
f
208.876 124.382 mo
208.972 124.218 208.972 123.95 208.876 123.782 cv
208.779 123.615 208.623 123.612 208.526 123.776 cv
208.432 123.941 208.432 124.209 208.527 124.375 cv
208.624 124.543 208.78 124.546 208.876 124.382 cv
cp
f
192.752 126.206 mo
192.588 126.211 192.464 126.434 192.476 126.703 cv
192.488 126.971 192.633 127.185 192.798 127.18 cv
192.885 127.178 192.959 127.115 193.011 127.017 cv
193.025 127.888 192.934 128.719 192.758 129.48 cv
193.021 128.66 193.15 127.702 193.103 126.684 cv
193.056 125.665 192.839 124.718 192.5 123.916 cv
192.747 124.664 192.914 125.488 192.98 126.357 cv
192.92 126.263 192.84 126.203 192.752 126.206 cv
cp
f
189.603 121.314 mo
191.46 121.257 193.085 123.664 193.225 126.68 cv
193.365 129.695 191.967 132.195 190.11 132.251 cv
188.252 132.308 186.628 129.902 186.489 126.885 cv
186.347 123.87 187.746 121.37 189.603 121.314 cv
cp
190.152 133.163 mo
192.319 133.096 193.949 130.181 193.787 126.663 cv
193.623 123.145 191.727 120.337 189.56 120.403 cv
187.393 120.469 185.763 123.385 185.926 126.903 cv
186.089 130.42 187.985 133.229 190.152 133.163 cv
cp
f
190.138 130.425 mo
191.376 130.387 192.308 128.721 192.214 126.711 cv
192.122 124.701 191.038 123.096 189.8 123.134 cv
188.562 123.171 187.629 124.837 187.723 126.848 cv
187.816 128.859 188.899 130.463 190.138 130.425 cv
cp
f
189.78 122.709 mo
189.945 122.703 190.069 122.482 190.057 122.213 cv
190.044 121.945 189.9 121.73 189.735 121.735 cv
189.569 121.741 189.445 121.962 189.458 122.231 cv
189.47 122.5 189.614 122.714 189.78 122.709 cv
cp
f
190.157 130.85 mo
189.991 130.855 189.867 131.078 189.88 131.346 cv
189.893 131.615 190.038 131.828 190.202 131.824 cv
190.368 131.819 190.491 131.596 190.479 131.328 cv
190.467 131.059 190.323 130.845 190.157 130.85 cv
cp
f
188.063 123.955 mo
188.17 123.761 188.156 123.453 188.03 123.267 cv
187.904 123.08 187.714 123.086 187.607 123.28 cv
187.498 123.473 187.513 123.782 187.638 123.968 cv
187.765 124.155 187.954 124.149 188.063 123.955 cv
cp
f
191.875 129.603 mo
191.768 129.797 191.781 130.105 191.908 130.291 cv
192.033 130.478 192.222 130.472 192.331 130.279 cv
192.44 130.085 192.425 129.777 192.299 129.59 cv
192.173 129.405 191.983 129.411 191.875 129.603 cv
cp
f
187.139 126.378 mo
186.973 126.383 186.849 126.606 186.861 126.874 cv
186.875 127.143 187.019 127.357 187.184 127.352 cv
187.349 127.347 187.474 127.124 187.461 126.856 cv
187.449 126.587 187.305 126.374 187.139 126.378 cv
cp
f
188.361 130.4 mo
188.469 130.206 188.455 129.898 188.329 129.711 cv
188.203 129.525 188.014 129.531 187.905 129.725 cv
187.797 129.918 187.812 130.226 187.937 130.413 cv
188.064 130.6 188.252 130.594 188.361 130.4 cv
cp
f
192.032 123.834 mo
192.14 123.64 192.126 123.332 192.001 123.145 cv
191.874 122.959 191.685 122.964 191.577 123.159 cv
191.468 123.352 191.481 123.661 191.608 123.847 cv
191.733 124.034 191.923 124.028 192.032 123.834 cv
cp
f
108.36 135.27 mo
107.724 135.531 107.055 135.669 106.364 135.661 cv
104.25 135.638 102.357 134.274 101.035 132.113 cv
99.8452 130.069 99.1396 127.409 99.1733 124.508 cv
99.2085 121.608 99.9775 118.964 101.215 116.946 cv
102.587 114.813 104.513 113.489 106.628 113.512 cv
107.318 113.52 107.983 113.672 108.614 113.946 cv
112.491 114.142 115.558 118.898 115.489 124.684 cv
115.42 130.47 112.241 135.159 108.36 135.27 cv
cp
115.792 93.4818 mo
113.263 94.5844 113.381 100.901 113.503 103.28 cv
112.58 101.63 112.468 96.3432 113.182 94.683 cv
113.583 93.7494 114.648 93.2641 115.021 92.3588 cv
114.726 75.5942 li
115.18 74.1869 114.822 72.4145 115.275 69.4174 cv
115.275 79.8217 115.998 86.1 115.792 93.4818 cv
cp
109.824 106.043 mo
108.834 105.659 107.796 105.442 106.724 105.43 cv
105.648 105.419 104.603 105.614 103.6 105.979 cv
100.909 106.959 98.5366 109.208 96.7935 112.289 cv
97.0977 111.738 97.4209 111.205 97.7671 110.698 cv
99.4175 108.282 101.417 106.577 103.597 105.681 cv
103.601 105.679 103.603 105.678 103.606 105.677 cv
103.417 105.647 105.217 105.231 106.542 104.91 cv
106.713 104.918 106.881 104.93 107.04 104.941 cv
107.411 104.965 107.762 104.99 108.052 104.993 cv
111.81 105.033 114.613 106.785 117.139 110.671 cv
117.432 111.122 117.671 111.471 117.875 111.772 cv
118.348 112.463 118.649 112.906 119.027 113.707 cv
120.966 113.806 122.242 113.949 123.276 114.065 cv
124.059 114.153 124.706 114.225 125.388 114.247 cv
125.468 111.288 125.435 91.9584 125.402 71.5678 cv
125.371 52.5834 125.338 32.9555 125.384 22.0922 cv
120.381 14.6762 li
108.204 9.68604 li
107.032 11.31 106.475 13.5004 105.422 17.6401 cv
105.373 17.8363 li
103.828 23.9106 101.493 33.0893 104.017 34.6928 cv
106.693 36.394 li
102.464 36.6147 li
102.827 36.8481 103.14 37.1479 103.382 37.4965 cv
107.394 37.2943 li
107.464 37.2914 107.535 37.2895 107.606 37.2895 cv
109.159 37.2895 110.553 38.1654 111.229 39.5443 cv
112.93 39.7943 114.218 41.1908 114.274 42.8979 cv
114.634 53.7992 li
114.675 55.0395 114.048 56.1811 113.045 56.8539 cv
113.666 57.0131 114.288 57.1723 114.909 57.3324 cv
116.394 57.7641 117.416 59.393 117.354 61.2104 cv
117.319 62.1108 117.349 63.019 117.442 63.9106 cv
117.625 65.7192 116.723 67.4086 115.301 67.9301 cv
112.559 68.8334 li
112.569 69.1235 li
112.606 70.2358 112.178 71.3285 111.396 72.1205 cv
110.654 72.8725 109.663 73.3031 108.604 73.3324 cv
107.649 73.3588 li
107.459 74.2973 106.944 75.1264 106.014 75.599 cv
105.685 75.4711 106.215 75.5385 106.244 75.433 cv
106.039 75.2387 li
106.611 74.7006 106.967 73.9281 107.132 73.0912 cv
107.062 72.4242 li
107.029 72.099 106.958 71.7738 106.892 71.5121 cv
105.951 70.2914 li
105.049 71.5971 li
102.712 75.0404 103.109 87.7787 103.598 102.586 cv
104.513 102.449 105.414 102.379 106.286 102.379 cv
113.485 102.379 117.509 107.226 117.566 109.208 cv
117.61 110.72 li
116.727 109.464 li
113.832 105.349 109.416 104.718 107.593 104.643 cv
107.815 104.581 107.929 104.54 107.87 104.534 cv
107.661 104.508 105.846 103.862 102.857 105.085 cv
102.239 105.339 101.57 105.67 100.854 106.107 cv
100.704 106.209 li
100.666 106.21 li
99.9775 106.736 li
99.1079 107.4 98.2915 108.138 97.5503 108.931 cv
92.7998 114.011 91.5176 118.911 90.4033 124.66 cv
90.9902 125.96 li
90.5405 137.341 li
90.5229 137.368 li
90.4136 137.521 90.3428 137.62 90.3101 137.669 cv
90.2944 137.701 li
90.2495 137.757 li
90.1665 137.861 90.0815 137.962 89.9956 138.064 cv
89.8081 138.288 li
89.501 138.291 li
88.9497 138.283 li
91.2603 141.06 94.3813 142.853 98.0386 143.399 cv
99.4399 143.608 101.701 143.612 102.86 143.468 cv
102.848 143.405 102.835 143.34 102.823 143.276 cv
100.794 142.303 98.9512 140.611 97.4395 138.284 cv
97.3159 138.094 97.2105 137.884 97.093 137.687 cv
99.3757 141.379 102.629 143.704 106.269 143.744 cv
110.148 143.786 113.653 141.226 116.044 137.155 cv
118.028 133.869 119.266 129.51 119.322 124.726 cv
119.378 119.939 118.245 115.557 116.338 112.227 cv
114.68 109.245 112.417 107.049 109.824 106.043 cv
cp
f
113.468 125.461 mo
113.623 125.463 113.762 125.364 113.862 125.207 cv
113.798 126.636 113.553 127.992 113.163 129.226 cv
113.714 127.901 114.04 126.34 114.06 124.668 cv
114.08 122.997 113.79 121.43 113.272 120.092 cv
113.632 121.334 113.845 122.695 113.874 124.124 cv
113.779 123.966 113.643 123.864 113.488 123.863 cv
113.194 123.86 112.951 124.215 112.946 124.656 cv
112.941 125.097 113.174 125.457 113.468 125.461 cv
cp
f
108.185 133.585 mo
104.886 133.55 102.249 129.493 102.307 124.541 cv
102.366 119.59 105.099 115.591 108.398 115.626 cv
111.699 115.663 114.335 119.719 114.276 124.671 cv
114.218 129.622 111.485 133.622 108.185 133.585 cv
cp
108.416 114.13 mo
104.566 114.088 101.378 118.754 101.31 124.531 cv
101.241 130.307 104.317 135.04 108.167 135.082 cv
112.017 135.124 115.206 130.457 115.274 124.682 cv
115.343 118.905 112.266 114.172 108.416 114.13 cv
cp
f
108.563 118.622 mo
106.362 118.598 104.542 121.264 104.502 124.565 cv
104.462 127.867 106.22 130.571 108.42 130.595 cv
110.62 130.619 112.442 127.953 112.481 124.652 cv
112.52 121.35 110.763 118.646 108.563 118.622 cv
cp
f
108.571 117.924 mo
108.865 117.927 109.107 117.573 109.112 117.131 cv
109.118 116.69 108.884 116.33 108.589 116.327 cv
108.295 116.323 108.052 116.678 108.048 117.12 cv
108.042 117.561 108.277 117.921 108.571 117.924 cv
cp
f
108.412 131.291 mo
108.118 131.289 107.875 131.645 107.87 132.085 cv
107.864 132.527 108.099 132.887 108.393 132.89 cv
108.688 132.894 108.929 132.539 108.935 132.097 cv
108.94 131.656 108.706 131.295 108.412 131.291 cv
cp
f
105.398 119.848 mo
105.608 119.539 105.615 119.033 105.411 118.717 cv
105.206 118.404 104.869 118.4 104.658 118.709 cv
104.446 119.02 104.44 119.526 104.644 119.84 cv
104.849 120.154 105.185 120.158 105.398 119.848 cv
cp
f
111.585 129.368 mo
111.373 129.678 111.367 130.184 111.572 130.499 cv
111.776 130.813 112.113 130.817 112.324 130.506 cv
112.537 130.197 112.542 129.691 112.338 129.376 cv
112.134 129.062 111.797 129.059 111.585 129.368 cv
cp
f
103.513 123.755 mo
103.219 123.752 102.977 124.107 102.971 124.548 cv
102.966 124.99 103.201 125.351 103.495 125.354 cv
103.789 125.357 104.031 125.001 104.037 124.56 cv
104.042 124.119 103.808 123.758 103.513 123.755 cv
cp
f
104.532 129.292 mo
104.32 129.602 104.314 130.108 104.518 130.422 cv
104.723 130.737 105.06 130.741 105.271 130.43 cv
105.484 130.12 105.49 129.615 105.285 129.3 cv
105.081 128.986 104.744 128.983 104.532 129.292 cv
cp
f
111.696 119.915 mo
111.901 120.231 112.238 120.234 112.45 119.924 cv
112.663 119.615 112.669 119.109 112.464 118.793 cv
112.26 118.48 111.922 118.476 111.71 118.786 cv
111.499 119.096 111.493 119.602 111.696 119.915 cv
cp
f
158.37 126.135 mo
158.149 126.141 157.977 126.413 157.987 126.744 cv
157.995 127.074 158.18 127.337 158.4 127.332 cv
158.516 127.331 158.618 127.252 158.688 127.133 cv
158.68 128.203 158.535 129.224 158.278 130.158 cv
158.652 129.152 158.854 127.976 158.82 126.724 cv
158.789 125.472 158.529 124.306 158.102 123.319 cv
158.407 124.24 158.606 125.252 158.667 126.322 cv
158.591 126.206 158.485 126.133 158.37 126.135 cv
cp
f
154.329 120.101 mo
156.801 120.043 158.888 123.012 158.983 126.72 cv
159.078 130.427 157.145 133.491 154.673 133.548 cv
152.202 133.606 150.116 130.636 150.021 126.929 cv
149.925 123.221 151.858 120.158 154.329 120.101 cv
cp
154.702 134.668 mo
157.585 134.602 159.841 131.029 159.73 126.703 cv
159.618 122.377 157.184 118.914 154.301 118.98 cv
151.417 119.047 149.162 122.62 149.274 126.947 cv
149.384 131.272 151.819 134.736 154.702 134.668 cv
cp
f
154.919 131.469 mo
156.567 131.431 157.856 129.389 157.792 126.917 cv
157.729 124.446 156.337 122.466 154.691 122.504 cv
153.043 122.542 151.754 124.584 151.817 127.056 cv
151.88 129.528 153.273 131.507 154.919 131.469 cv
cp
f
154.523 121.816 mo
154.743 121.811 154.914 121.539 154.906 121.208 cv
154.898 120.877 154.712 120.614 154.492 120.62 cv
154.272 120.624 154.1 120.897 154.109 121.228 cv
154.117 121.558 154.303 121.822 154.523 121.816 cv
cp
f
154.779 131.826 mo
154.559 131.831 154.387 132.103 154.396 132.434 cv
154.404 132.764 154.589 133.028 154.81 133.023 cv
155.03 133.018 155.201 132.745 155.193 132.415 cv
155.185 132.084 154.999 131.821 154.779 131.826 cv
cp
f
152.202 123.337 mo
152.352 123.1 152.341 122.72 152.181 122.491 cv
152.018 122.261 151.766 122.266 151.616 122.503 cv
151.467 122.742 151.476 123.12 151.638 123.35 cv
151.798 123.581 152.051 123.574 152.202 123.337 cv
cp
f
157.1 130.304 mo
156.95 130.542 156.959 130.921 157.121 131.152 cv
157.283 131.381 157.536 131.376 157.685 131.138 cv
157.835 130.902 157.826 130.522 157.664 130.291 cv
157.502 130.062 157.25 130.068 157.1 130.304 cv
cp
f
150.901 126.309 mo
150.681 126.315 150.509 126.586 150.517 126.916 cv
150.526 127.247 150.712 127.511 150.932 127.506 cv
151.152 127.501 151.323 127.229 151.315 126.899 cv
151.307 126.568 151.121 126.305 150.901 126.309 cv
cp
f
152.405 131.261 mo
152.554 131.023 152.544 130.645 152.382 130.414 cv
152.221 130.185 151.969 130.191 151.819 130.428 cv
151.669 130.665 151.679 131.044 151.84 131.274 cv
152.002 131.504 152.254 131.499 152.405 131.261 cv
cp
f
157.483 123.214 mo
157.632 122.977 157.623 122.598 157.461 122.368 cv
157.3 122.138 157.046 122.144 156.897 122.38 cv
156.748 122.618 156.757 122.997 156.919 123.227 cv
157.081 123.457 157.333 123.452 157.483 123.214 cv
cp
f
12.4365 137.754 mo
14.5215 140.919 17.458 142.969 20.957 143.557 cv
22.2002 143.766 24.2056 143.77 25.2329 143.626 cv
25.2222 143.563 25.2114 143.499 25.2007 143.434 cv
23.4009 142.461 21.7671 140.769 20.4258 138.443 cv
20.314 138.249 20.2192 138.036 20.1133 137.835 cv
22.1372 141.533 25.0249 143.862 28.2559 143.902 cv
31.562 143.942 34.5591 141.576 36.6689 137.78 cv
12.8799 137.78 li
12.7305 137.78 12.5845 137.76 12.4365 137.754 cv
cp
f
81.0552 7.20551 mo
81.0552 7.20551 81.0552 7.20551 81.0562 7.20551 cv
81.1157 7.20551 81.1748 7.20349 81.2354 7.19958 cv
82.707 7.0932 83.8628 5.7182 83.8115 4.1322 cv
83.7612 2.6449 82.6436 1.47992 81.2651 1.47992 cv
81.2026 1.47992 81.1392 1.48279 81.0757 1.48773 cv
79.6021 1.60004 78.4468 2.97504 78.499 4.55414 cv
78.5469 6.04138 79.6704 7.20551 81.0552 7.20551 cv
cp
f
88.6323 6.65961 mo
88.6919 6.65961 88.751 6.65759 88.8115 6.65369 cv
88.9048 6.64691 88.9971 6.63422 89.0869 6.61761 cv
89.1045 6.61469 89.1221 6.60883 89.1392 6.6059 cv
90.4502 6.33441 91.4355 5.0434 91.3862 3.57068 cv
91.3374 2.07361 90.2178 .901794 88.8384 .901794 cv
88.7759 .901794 88.7134 .904724 88.6499 .90863 cv
87.1768 1.02191 86.0205 2.40472 86.0728 3.99164 cv
86.123 5.48773 87.2466 6.65961 88.6323 6.65961 cv
cp
f
73.479 7.75238 mo
73.5386 7.75238 73.5991 7.74939 73.6602 7.74548 cv
75.1323 7.6391 76.2876 6.27094 76.2354 4.6947 cv
76.187 3.21619 75.0698 2.05902 73.6924 2.05902 cv
73.6284 2.05902 73.5649 2.06104 73.5005 2.0658 cv
72.0278 2.1781 70.8716 3.54633 70.9229 5.11664 cv
70.9717 6.59424 72.0942 7.7514 73.479 7.75238 cv
cp
f
21.8037 112.022 mo
24.2676 114.066 24.689 115.227 24.6089 115.84 cv
24.4995 116.677 23.3164 117.195 21.5229 117.191 cv
21.4961 117.19 li
12.5767 117.144 li
12.5366 117.145 li
11.7808 117.143 11.0605 115.445 10.9907 114.336 cv
10.6909 109.507 li
10.6724 109.223 10.7441 108.732 11.0063 108.286 cv
11.2788 107.817 11.8462 107.258 12.9995 107.253 cv
14.9937 107.244 17.9556 108.844 21.8037 112.022 cv
cp
26.8306 123.581 mo
12.1279 123.479 li
11.2378 123.472 10.4922 122.83 10.4653 122.047 cv
10.4624 121.936 10.4551 121.804 10.4463 121.658 cv
10.4009 120.911 10.3262 119.661 10.7646 119.255 cv
10.856 119.171 10.9644 119.13 11.0977 119.131 cv
17.5347 119.973 27.0508 121.7 27.5024 122.322 cv
27.5205 123.087 27.7217 123.587 26.8306 123.581 cv
cp
68.1001 111.709 mo
73.6348 108.394 77.9663 106.695 80.9731 106.681 cv
82.7114 106.672 83.6147 107.253 84.0654 107.743 cv
84.4976 108.209 84.647 108.726 84.645 109.026 cv
84.5991 114.109 li
84.5879 115.275 83.6465 117.058 82.5054 117.056 cv
82.4448 117.055 li
68.9971 117.05 li
68.957 117.049 li
66.2524 117.043 64.4263 116.504 64.1895 115.643 cv
64.0176 115.012 64.5562 113.819 68.1001 111.709 cv
cp
82.1182 123.468 mo
67.416 123.37 li
66.5259 123.365 66.189 122.063 66.1563 121.278 cv
66.5659 120.644 76.4727 119.739 82.855 118.911 cv
82.9878 118.911 83.0996 118.955 83.1968 119.043 cv
83.6616 119.473 83.6719 120.789 83.6782 121.574 cv
83.6792 121.728 83.6802 121.868 83.6846 121.984 cv
83.7109 122.807 83.0083 123.473 82.1182 123.468 cv
cp
6.92291 72.2524 mo
6.94238 72.8373 7.11041 73.3783 7.38281 73.8236 cv
7.55658 74.1078 7.0752 77.517 7.0752 77.517 cv
9.01221 104.58 li
9.02728 105.06 5.95508 106.021 7.42041 106.046 cv
16.0801 106.192 16.1313 106.784 7.42242 106.633 cv
7.39209 106.632 7.3623 106.63 7.33148 106.629 cv
7.67682 112.975 8.30859 119.319 9.2251 125.649 cv
89.5264 124.67 li
89.3154 118.221 92.2793 113 95.4976 108.865 cv
96.1714 107.999 96.5454 107.247 97.4541 106.554 cv
90.313 105.953 90.395 105.91 83.4009 106.019 cv
78.082 106.416 li
76.5435 106.445 li
78.812 106.151 82.813 105.661 85.3374 105.397 cv
89.21 105.322 94.7808 104.889 98.8428 105.43 cv
99.7852 104.794 101.314 103.739 101.309 103.564 cv
100.771 87.2895 101.608 74.7279 104.167 71.0199 cv
64.7856 78.7924 li
64.7905 78.975 59.293 121.884 59.293 121.884 cv
59.0112 123.749 48.479 123.429 48.479 123.429 cv
31.394 123.314 li
30.958 123.311 30.0957 122.425 29.7383 121.043 cv
20.7026 79.1479 li
20.6484 78.9408 20.6226 79.6049 20.6196 79.4106 cv
10.2031 75.0111 li
10.3179 75.0082 li
10.3179 74.9975 10.3179 74.9877 10.3179 74.977 cv
20.8633 76.4486 li
63.2031 75.0844 li
104.167 71.0199 li
104.456 70.601 105.093 69.0902 103.63 69.099 cv
102.646 69.1039 101.661 69.1127 100.677 69.1205 cv
100.392 69.2152 100.089 69.2719 99.7725 69.2807 cv
60.6162 71.269 li
76.5435 69.4174 97.1177 68.4555 97.6548 66.9955 cv
102.879 39.8012 li
107.491 39.5736 li
108.027 39.5473 108.514 39.7758 108.847 40.1557 cv
108.896 40.2113 108.94 40.2709 108.981 40.3315 cv
109.038 40.4154 109.09 40.5033 109.132 40.5971 cv
109.109 40.5981 li
107.692 40.6674 106.58 41.85 106.625 43.2397 cv
106.983 54.0932 li
107.03 55.4828 108.216 56.5658 109.635 56.5121 cv
109.795 56.5063 li
109.815 57.0854 li
109.729 57.0639 109.644 57.0424 109.559 57.0199 cv
108.526 56.7182 107.361 58.2738 107.276 60.5238 cv
107.214 62.1078 107.268 63.6967 107.433 65.2748 cv
107.667 67.5131 108.932 68.9858 109.942 68.6147 cv
110.025 68.5873 110.109 68.56 110.193 68.5326 cv
110.214 69.1947 li
110.247 70.1918 109.492 71.0258 108.531 71.0531 cv
107.881 71.0717 li
107.881 71.0717 107.881 71.0717 107.881 71.0727 cv
107.989 71.4848 108.084 71.8998 108.128 72.3246 cv
108.573 72.3119 li
110.242 72.266 111.555 70.85 111.499 69.1557 cv
111.464 68.1147 li
112.615 67.7358 113.766 67.3568 114.917 66.977 cv
115.933 66.6049 116.505 65.2904 116.377 64.0111 cv
116.279 63.0707 116.248 62.1225 116.284 61.1772 cv
116.327 59.893 115.669 58.6205 114.631 58.3178 cv
113.457 58.016 112.285 57.7162 111.111 57.4164 cv
111.08 56.4565 li
112.498 56.4027 113.61 55.2279 113.565 53.8315 cv
113.204 42.9311 li
113.158 41.5346 111.971 40.4594 110.554 40.5277 cv
110.47 40.5317 li
110.109 39.1928 108.879 38.2426 107.45 38.3139 cv
102.741 38.5512 li
102.509 37.8949 101.96 37.3901 101.272 37.1889 cv
101.023 37.1166 100.759 37.0805 100.483 37.0951 cv
67.6074 38.7817 li
71.396 38.7123 75.1875 38.6645 78.9771 38.7738 cv
82.7749 38.8647 86.5728 39.0668 90.356 39.4779 cv
92.2446 39.7035 94.1333 39.9613 95.9976 40.3842 cv
96.9272 40.601 97.8555 40.8471 98.7524 41.2006 cv
99.1982 41.3832 99.6396 41.5893 100.042 41.8695 cv
100.243 42.0102 100.433 42.1713 100.589 42.3686 cv
100.743 42.5639 100.856 42.81 100.85 43.0658 cv
100.831 42.811 100.703 42.5883 100.539 42.4164 cv
100.375 42.2436 100.178 42.1078 99.9736 41.9926 cv
99.5615 41.7621 99.1162 41.6049 98.6665 41.4711 cv
97.7671 41.2016 96.8384 41.0336 95.9072 40.8969 cv
94.0444 40.6313 92.1626 40.4838 90.2783 40.393 cv
88.3945 40.2934 86.5073 40.2406 84.6187 40.224 cv
82.73 40.2065 80.8403 40.1957 78.9507 40.2211 cv
75.1689 40.2807 71.3887 40.3568 67.6084 40.5248 cv
63.8271 40.6693 60.0479 40.851 56.2695 41.0942 cv
52.4912 41.3041 48.7139 41.5795 44.9404 41.8852 cv
41.165 42.1723 37.396 42.5443 33.6313 42.934 cv
31.7476 43.1313 29.8691 43.3656 27.9907 43.602 cv
26.1133 43.8402 24.2393 44.1108 22.373 44.4242 cv
20.5059 44.7299 18.647 45.0883 16.8145 45.5541 cv
15.8999 45.7904 14.9907 46.058 14.1177 46.4145 cv
13.6816 46.5912 13.2524 46.7914 12.8633 47.0541 cv
12.8364 47.0727 12.812 47.0942 12.7866 47.1127 cv
10.9951 51.5541 9.62451 59.059 11.3301 71.2172 cv
11.3608 71.4467 11.8071 71.31 12.061 71.3031 cv
12.061 71.3031 25.3594 71.2943 41.4736 71.017 cv
10.1582 71.9496 li
9.84082 71.9584 9.53369 71.9233 9.24463 71.851 cv
8.45313 71.893 8.14893 72.31 8.03809 72.7592 cv
7.98492 72.5912 7.95209 72.4106 7.9458 72.2221 cv
7.92969 71.7524 li
7.92529 71.6078 li
7.96729 71.6205 8.00928 71.6332 8.05267 71.6469 cv
8.07709 71.6547 8.10352 71.6625 8.12939 71.6703 cv
8.45209 71.7856 8.78998 71.6313 9.08502 71.2807 cv
9.5415 70.7348 9.89697 69.7094 9.93311 68.436 cv
9.97412 66.9604 9.92578 65.4799 9.78662 64.0111 cv
9.59082 61.9262 8.57672 60.558 7.77393 60.9047 cv
7.70752 60.9301 7.64063 60.9565 7.5752 60.9818 cv
7.55658 60.4438 li
7.68457 60.4389 li
8.81451 60.3959 9.69531 59.311 9.65228 58.016 cv
9.31842 47.9076 li
9.27643 46.6127 8.32617 45.6078 7.19629 45.6625 cv
7.17871 45.6635 li
7.37061 45.0522 7.84961 44.6049 8.42242 44.5766 cv
11.8286 44.518 li
11.8379 44.269 13.6313 43.3725 13.6641 43.2426 cv
8.38428 43.4047 li
7.24561 43.4623 6.32373 44.4477 6.11377 45.7152 cv
6.04688 45.7192 li
4.91748 45.7738 4.03662 46.8637 4.07861 48.1537 cv
4.4126 58.225 li
4.45459 59.5151 5.40479 60.5258 6.53369 60.4828 cv
6.56348 61.3715 li
5.64838 61.724 4.73389 62.0756 3.81927 62.4272 cv
3.01123 62.7719 2.56049 63.9828 2.66803 65.1606 cv
2.75 66.0268 2.77881 66.9008 2.75439 67.7709 cv
2.72461 68.9526 3.25391 70.1303 4.08252 70.4193 cv
5.01862 70.7074 5.95508 70.9965 6.89111 71.2865 cv
6.92291 72.2524 li
cp
f
20.4463 41.2113 mo
20.124 41.2192 li
16.7622 41.391 li
16.6294 41.3979 14.5898 42.7807 12.8838 46.8725 cv
13.2358 46.601 13.6191 46.3754 14.0103 46.1723 cv
14.8735 45.7358 15.7749 45.3969 16.6826 45.0854 cv
18.5015 44.4692 20.3594 44.0043 22.2212 43.5697 cv
25.9507 42.7328 29.7124 42.0873 33.4839 41.5473 cv
37.2529 40.9858 41.0361 40.5707 44.8218 40.1811 cv
47.0176 39.9652 49.2153 39.7807 51.4136 39.6127 cv
20.4702 41.2006 li
20.4463 41.2113 li
cp
f
89.7642 137.402 mo
89.7734 137.383 89.8564 137.264 90.019 137.038 cv
90.2754 136.636 90.1738 127.387 90.3838 126.96 cv
84.645 127.282 8.14447 126.226 8.14447 126.226 cv
7.05078 126.216 6.19043 127.128 6.22748 128.259 cv
6.22748 128.259 7.38568 136.378 8.48053 136.397 cv
89.5112 137.707 li
89.5962 137.606 89.6821 137.504 89.7642 137.402 cv
cp
f
60.3315 81.2387 mo
43.1807 81.6225 li
42.644 81.6342 li
25.4927 82.018 li
24.6733 82.0365 24.0259 82.5229 24.0454 83.1059 cv
24.0649 83.6869 24.7441 84.1459 25.5625 84.1283 cv
42.7139 83.7709 li
43.2515 83.7592 li
60.4028 83.4018 li
61.2212 83.3852 61.8687 82.8852 61.8491 82.2885 cv
61.8296 81.6908 61.1509 81.2211 60.3315 81.2387 cv
cp
f
59.7568 85.4789 mo
43.3193 85.7983 li
42.7813 85.809 li
26.3428 86.1283 li
25.5562 86.144 24.9336 86.6283 24.9541 87.2113 cv
24.9727 87.7934 25.626 88.2543 26.4126 88.2406 cv
42.8521 87.9457 li
43.3896 87.936 li
59.8286 87.641 li
60.6162 87.6264 61.2368 87.1303 61.2173 86.5336 cv
61.1978 85.936 60.5444 85.4643 59.7568 85.4789 cv
cp
f
59.21 89.7152 mo
43.4565 89.975 li
42.9185 89.9848 li
27.1665 90.2445 li
26.4097 90.2572 25.8115 90.7397 25.8306 91.3227 cv
25.8501 91.8979 26.4639 92.3549 27.2095 92.3559 cv
27.2188 92.3559 27.2266 92.3578 27.2358 92.3568 cv
42.9893 92.1205 li
43.5269 92.1117 li
59.2803 91.8754 li
60.0386 91.8637 60.6357 91.3695 60.6162 90.7729 cv
60.5967 90.1762 59.9668 89.7026 59.21 89.7152 cv
cp
f
58.6885 93.9457 mo
43.5947 94.1518 li
43.0571 94.1596 li
27.9634 94.3647 li
27.2349 94.3744 26.6616 94.8559 26.6807 95.4379 cv
26.6992 96.016 27.2944 96.476 28.0122 96.477 cv
28.0195 96.477 28.0259 96.4779 28.0327 96.4779 cv
43.1274 96.2953 li
43.6655 96.2885 li
58.7593 96.1049 li
59.4873 96.0961 60.062 95.6049 60.0415 95.0082 cv
60.022 94.4125 59.4165 93.936 58.6885 93.9457 cv
cp
f
58.1929 98.1723 mo
43.7329 98.3276 li
43.1953 98.3334 li
28.7344 98.4887 li
28.0347 98.4965 27.4829 98.975 27.5024 99.559 cv
27.5215 100.137 28.0962 100.603 28.7896 100.603 cv
28.7949 100.603 28.7988 100.604 28.8052 100.604 cv
43.2661 100.47 li
43.8037 100.465 li
58.2637 100.331 li
58.9639 100.326 59.5151 99.8354 59.4956 99.2397 cv
59.4761 98.643 58.8921 98.1654 58.1929 98.1723 cv
cp
f
57.7217 102.396 mo
43.8701 102.504 li
43.3325 102.508 li
29.4819 102.617 li
28.8091 102.622 28.2788 103.099 28.2979 103.683 cv
28.3174 104.264 28.8735 104.732 29.5425 104.732 cv
29.5454 104.732 29.5488 104.732 29.5518 104.732 cv
43.4033 104.645 li
43.9409 104.641 li
57.7925 104.554 li
58.4663 104.549 58.9946 104.062 58.9751 103.466 cv
58.9556 102.87 58.3945 102.391 57.7217 102.396 cv
cp
f
57.2729 106.616 mo
44.0083 106.681 li
43.4707 106.684 li
30.2061 106.749 li
29.5591 106.751 29.0498 107.228 29.0693 107.812 cv
29.0879 108.394 29.6265 108.864 30.272 108.864 cv
30.2729 108.864 30.2739 108.865 30.2759 108.865 cv
43.5415 108.82 li
44.0791 108.818 li
57.3438 108.772 li
57.9912 108.77 58.5 108.285 58.4805 107.69 cv
58.46 107.093 57.9204 106.613 57.2729 106.616 cv
cp
f
56.8472 110.831 mo
44.1455 110.857 li
43.6089 110.858 li
30.9067 110.883 li
30.2852 110.885 29.7964 111.36 29.8149 111.944 cv
29.8345 112.528 30.3545 113 30.9766 113 cv
43.6787 112.995 li
44.2163 112.994 li
56.9185 112.988 li
57.5405 112.988 58.0288 112.503 58.0093 111.909 cv
57.9897 111.313 57.4697 110.831 56.8472 110.831 cv
cp
f
56.4434 115.044 mo
44.2842 115.034 li
43.7461 115.033 li
31.5869 115.022 li
30.9888 115.022 30.5195 115.495 30.5381 116.08 cv
30.5576 116.664 31.0581 117.139 31.6563 117.14 cv
43.8169 117.169 li
44.3545 117.17 li
56.5142 117.2 li
56.5151 117.2 56.5161 117.2 56.5171 117.2 cv
57.1143 117.2 57.5825 116.718 57.563 116.124 cv
57.5425 115.529 57.0415 115.045 56.4434 115.044 cv
cp
f
56.0596 119.254 mo
44.4224 119.209 li
43.8833 119.207 li
32.2456 119.164 li
31.6709 119.161 31.2192 119.633 31.2388 120.218 cv
31.2578 120.802 31.7402 121.28 32.3159 121.283 cv
43.9541 121.344 li
44.4927 121.347 li
56.1309 121.409 li
56.1333 121.409 56.1353 121.408 56.1372 121.408 cv
56.7095 121.408 57.1572 120.929 57.1377 120.336 cv
57.1182 119.741 56.6357 119.256 56.0596 119.254 cv
cp
f
30.2871 11.7709 mo
30.3188 13.0902 li
30.7441 13.0443 31.1699 12.9985 31.5928 12.9535 cv
31.5601 11.6449 li
31.3511 11.7172 31.1318 11.768 30.9058 11.7875 cv
30.6938 11.807 30.4868 11.7983 30.2871 11.7709 cv
cp
f
37.0459 11.1615 mo
37.085 12.3832 li
37.562 12.3334 38.0396 12.2836 38.5156 12.2338 cv
38.4756 11.018 li
38.2412 11.0981 37.9961 11.1547 37.7412 11.1781 cv
37.5024 11.1996 37.27 11.1918 37.0459 11.1615 cv
cp
f
37.7319 10.9115 mo
39.2695 10.7631 40.4771 9.37933 40.4238 7.83148 cv
40.3726 6.28558 39.0859 5.24164 37.5581 5.49939 cv
36.0298 5.75238 34.8213 7.1225 34.8652 8.55902 cv
34.9092 9.9975 36.1958 11.0551 37.7319 10.9115 cv
cp
f
30.8994 11.5453 mo
32.2681 11.4164 33.3516 10.1606 33.3145 8.75238 cv
33.2788 7.34613 32.1411 6.39978 30.7798 6.63708 cv
29.4185 6.87048 28.334 8.11273 28.3638 9.41058 cv
28.3936 10.7113 29.5313 11.6713 30.8994 11.5453 cv
cp
f
45.1157 9.80219 mo
46.5884 9.69672 47.7446 8.3559 47.6934 6.81293 cv
47.6455 5.36859 46.5313 4.23773 45.1558 4.23773 cv
45.0908 4.23773 45.0264 4.23969 44.9609 4.24451 cv
43.4873 4.35681 42.3306 5.69861 42.3809 7.2348 cv
42.4312 8.74261 43.6519 9.90472 45.1157 9.80219 cv
cp
f
24.1099 21.349 mo
26.1709 17.5424 27.2954 17.1811 27.5903 17.1615 cv
27.623 17.1596 li
27.7061 17.1596 27.835 17.1801 27.9858 17.3568 cv
28.2642 17.683 28.377 18.2445 28.3628 18.4701 cv
28.3423 18.5502 28.291 18.7543 28.2173 19.0492 cv
26.8916 24.3471 26.1543 27.2582 26.0225 27.7074 cv
25.6904 28.018 23.5347 28.5453 21.062 28.8051 cv
21.0049 28.5004 21.0254 27.0238 24.1099 21.349 cv
cp
95.73 17.2084 mo
96.0659 16.641 96.4419 16.0277 96.8608 15.3647 cv
99.3486 11.4125 100.746 10.9086 101.231 10.8744 cv
101.46 10.8588 101.647 10.9301 101.819 11.1029 cv
102.154 11.4399 102.288 12.017 102.271 12.2504 cv
102.244 12.3402 102.18 12.5619 102.085 12.8813 cv
101.606 14.5072 101.19 15.9135 100.836 17.1108 cv
99.9722 20.0258 99.4775 21.6684 99.3628 21.9975 cv
98.98 22.3383 96.2954 22.9379 93.1934 23.2465 cv
93.1226 23.2504 li
93.1162 23.2504 93.1113 23.2504 93.106 23.2494 cv
92.9565 22.8686 93.3716 21.186 95.73 17.2084 cv
cp
17.2632 40.4076 mo
17.3604 40.4057 li
18.0674 40.392 18.7749 40.3754 19.4839 40.3588 cv
20.2437 40.3402 li
20.5562 40.2182 20.8799 40.1479 21.2056 40.1303 cv
102.01 35.1781 li
102.327 35.1615 li
101.456 34.1225 100.944 32.4701 100.801 30.2299 cv
100.799 30.2074 li
100.8 30.184 li
100.978 26.2992 102.227 21.2846 103.294 17.349 cv
104.292 13.6674 105.062 11.2533 105.56 9.80701 cv
105.445 9.90961 li
106.074 8.38129 li
105.785 8.29138 105.138 8.17719 103.72 8.17719 cv
101.166 8.17719 97.3799 8.53363 94.04 8.84711 cv
92.4146 9.00043 90.8794 9.1449 89.668 9.2309 cv
89.1904 9.2641 li
88.9951 9.27771 li
82.6611 9.72504 76.5825 10.1635 71.2158 10.5512 cv
66.8257 10.8676 62.9121 11.1498 59.7241 11.3744 cv
59.293 11.4047 li
48.9624 12.1381 38.708 13.0805 27.9419 14.2856 cv
27.7349 14.309 27.5176 14.3549 27.2974 14.4233 cv
26.6113 14.6361 26.1421 14.9789 26.0273 15.1547 cv
19.6099 25.0922 16.3535 33.0326 15.7896 40.1264 cv
15.9204 40.2035 16.2412 40.3363 16.8208 40.3871 cv
16.9775 40.4008 17.1221 40.4076 17.2632 40.4076 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 18.1.1
%%For: ( ) ()
%%Title: (1501.m00.i121.n061.P.c25.92387506 Silhouette truck icon.eps)
%%CreationDate: 1/6/2015 11:14 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!#+;ddR-^T'-"^c40lFQ?ie!hutJR-4h:Cb9Y$Y%6/TjQ^PtknG_gaW[,"%[_^3KPJQtf3VT'`Ib%Pr;Q6Zq;EoDfD\$$Z
%HL!]Nrc:54o?<Y5nVkAfbaRksqd0jT]W<2C]qIbqbMt4@AD+cm_i2LMChW\uf#_rMfiYN3Xq$mtX2!P/=/0**cu-5&^%G(XB;LmH
%Xdm9^Q-@:Id:iQBaYt^"9;n'/EDK4"7T=,HS!AHBb?>&&-WKnI%r+B4phu#X[&T*O/_Z!V;/N3;^\?q.s+LA2N;@r>2>#%16jGC9
%k$Zar(B&19o0IJ)n+F;XI_FS6ZA_4n4.b[.0^;WU&'u0#"92SW+#Cn"X>4J]`Fq$<'`>;PSA?OQ14($0H;r(?NYq`@P5c2FYoj8#
%s4/%d5@&*t?heQ2YqqF(B7I[PI;i'!ZSIOK5BBtYNHB]l&e,J!GSE"sNClF0\`MVk_DI/Mchp-FL=r8PCHg'j?=qH'ghc1c>Y]dS
%&H@o)[/`V0f:tR]1G>Lq/aCK(c?9#>p&DgT3\CopP46;\&U!!=l@!%Z-S,rFZ.lEM%5F!NHDscXWAU)2s-4mj.c']p&&R(=$ud9=
%1P)BOHS]?$.mKeH:Giu\luf&R;>WKcFNngl%!QBFCraYNbZ,><H@CUrCrZ&qgVa<#\n]m<ak6nJh!<P;l`Kh;7LOm];F4`4lSU8e
%50jAk5=@js0`E_)s!NR/K_P@@99#M4PJXJ?ag/4aLY2?EX&`mmE<^AZ4NN/:[m9p3m;r*(re#ZP-3bJ^$iq_og/+L"_M8*hY;bIM
%i+0SWJ0/-?gOmdHl`C'RIkBbsmF*KT5-">2?'s)EB(,@Rr3;bpU1K]Pl;jq3#5fL.a]@\tjTu@tS_Y\=IYGB*Vu$GBe;#mgMF9BG
%d-]EQ;5;r%)A_G_Zj;Pd<U",ZLUb0@rHJ%5!drEj@_o#C+]Y!S/KJ4,[6eGZg:sM8nPbmZb4X=V'80AsrBK#l9:W4i<7*0T9r!K1
%;87E3goNpDQ\P5br<q6rU/nB4o0WASq2Ds&=IL!5Pt%NthQ:lPlIASB46Ts\NnWkih"mDqj.=KPkU3I"P)Ok>D=+_64eo^5!lH%1
%L(e^,\@9!!\=VX!=mAF1B"M(K'm7Jn]XH&C*u0n5Er@h[0HU40T!fU2?8HKT7.t'Ne>nSmn7SpHV:&(n<>sXP*[Q;nq'=o<ETpR!
%K%"mDDh4I@3?6QGO^=OEAd>Hbbi)!e'+p"!a[=m[HNO)5\SnUP:#+-`-%7t(rrNm6+"`^)n\6mGnCNHOnf'8Ikhj@*'s3<bpZI4%
%2DRpT2B+7CE=Ec3Xe-+"&Laqb.%'=D/&Pqu(\L8")muUIcTKm3m3MZCs3q")AAaI$bd&9@B:^)0UTO,uU#.A[JLpIa^"0s.U0+JE
%'W#1;ZJ=_E'6=c9cS,,DW)3_:MjuWBr0`.s5Gt!(T.*>+H$^gtG#!(;c:-iJ9dZ]C90iq$\h.CFA5!pppgfi=89^18Q%HM6l.'mO
%9UefD&%\[s3ju'9AF>7W'A4!WIQOSaCUoX#3N_qJ;E+G,!6WclaeA:773%pn=_lC>X7e'Y7qj7$/::YY[G$E73nSqG8aB56%&Kbn
%/Q)AQLr8=3RBUSY)`6"0d]-\IATQChfl^erX<aR98P6l;oC\WgPt<uP&%^<TL%%Z4Cild9)dVe'K^?h^)FUqo;7?V@<shiIdHOsp
%p"!..0KClcf%1<*?p4)';Cn/A1^Z!=-4f$+0fmKo/6o`b,A,oW9c",BilX7h=72^>b+3Z*@*:Lc[-PF$ETU.%,%f>k9<g)c^>-Sl
%>PN4H?Z([UKeKq)jlX[OF6:T291@(Kpi:.t%_T>o6qk?[Q]HTV)M],o>5OAqqLEH!r>i09PES'5)ujV^E0Wom+0E_#oko*S=u#le
%:?fNmHiUMJ/R&6/.YD'2?>8N)T!dgkS(!5Ke?>;T@TH..44S4gHV-XmRa%gTMn;pbm&V#rY?;;jllkg0D)8`F)e_BD2ID_%DZ"Ko
%[GR-DbWd%\@Y:uAFRPSqYJO1JX7QVPZV!)9XB*co9;;2ud=ho#H\8BMbq.R*bXsTi5kUdIl#-OSBt'g;)R;i5g_tb.kps,F]mf'4
%o][h]l>Wi8QBac>VVN2'<[ol%g`H`u4r"t88O:@GDV`=bDqA4lEk7pjlE;/HTj4U/BfF83d?An:R<m=imLB?]cR-/1&8FC)3MoLQ
%bhJh!V-ECq1o#L<@V/4SUbFb]dk$n[IX<oIYX'nFU,,(;S*kR+e'MJupH2[qC.lq3g`?oaHClh.cd;rB")I6F[lMa.'7?!7mnG^k
%gRQXHW-]R/-YLl]8Zsu5F$>';-l,rLJ!Gl,(0Nh&;02&+5&L^BVEM#KC.b?cW0uC#.C@ihHoHr^PN&6QEGo>.mVU0L*`K2$O5eDg
%S0FH^k'a^:Wt3VaXX\R"e>*\_C"FmbBUH1iPMLDkF+GtPVV%]Acja,+YD)QD40j=t5^CW526n*$?E((U9tBguRtjD[ds61`/.E2t
%[_QN8$[*"5`huuee#opV1ks,2hX41%e[r?I056o5g\n$!A9%H)Shuc4N,:[5r]n;"BbTWD8Xn=]]*\FWZ0.XSR#gK=jsc+RR08XO
%MYBTN+h)N7PN))2E)C>WU;gWkT[.nZ3K"fTEa//VUc9O13IRZ&DL&]?epAG8.M@40A[g*UaXsDnJ`]iM[EXH(P=AtVqlZ^/+dEr@
%-VOAY19pJt1hO-FG\])o%keHj+_'"RC@PT6l]f>0laKiF2=2mP1e!(*qH$/o,%eh+9lp4)Dg8Qug/cs2b%.<SHD?TTA#F<nF.>R'
%qs?3u;1#>)oW6ebVO7fAG$B'a=A/ojET_7rJ;LWBQ+nmp]+MRe.Hmh_lM*NZ1o/)ZDi:Vr]9S,HC3@lC>a&$I+Nc*[>@]VVXf.EB
%?:2-KW8`#$;imi6hO;U!b#^9XL"!\D,td!^$^H=&e*&oZh'^D%(+GNg+-iHIa8ppl?g4FESOCS(odhSpH8F)\?i<tLR"pIMk.nH/
%$g&QFV)f-T-u"L)[ID-Z'4mWlZ`084Zn&5grb,].B?M($.$D$<a@3)R6S:tL,%b]XRIOOH'P?$WjJ'l;Y#CmH>a.'5bfgYa.`K$@
%79S]Gr%5P*+r=hEI%@gl7:H4H>a4M9jJ&Fn@b**q=jKN.-!8X!&utPbMirgNR5%+-,St#-:2+;pV^BrG]7JPCc+0A3a7E3*i@SYN
%p>-=JSVd-<UU\P\bglTE\Xep.]af,S(J!k)EW;K:#M/)/h4HNTg&L'^T3G<s2g]+JU"=1Vf=ZfD>NiI4ctb)kFJ7;%H>VhU]*l]s
%>amsc(?*3WR9!NoCC@7f"0K!ceeVG+#.3+$<a07F<*IO/&N]`G&*mk*\YW]M5O&5fZ&ES7N;UXM9#6+u10Q6(KZpr,`_DTm-AXiV
%Q2YB[]e)kcPf%tKc`",+W;JcGLT?DmD[WCL;E&@!YC'8XefJb/[qa;n]lj"'2\VTcSZ'siVL$k0.!o0o9i<<rLJZ!R[Wi)>f9"PK
%i);%f$(IoL:fs/66l%GLr10Y]g6YWR8'3T'K3K5U_LJZrr8._V)ufjHp`]6EDH,D_#BH"E?`)()R]k$iSu2B-pTtn4l,]6[2#]r=
%@CgSHb#L7bMuUp#cK_Z3[GC2VHf4,T%8qT)IV.*GNDD*DEmsqE'gY.1f1]q1Rn;AaCP,6ghS3_nrA5]V;d(>5eFGB>MRgC=V\rA8
%Q7oG91I2,4mWl;lSLHjW4l,^KeJW1T#%ou?a^=\ch^j"as0tdD((VU,.'&8qIZ'\EMt>h5G5aQ6mgCbnIoA%8EW3R0s';/p0$\rb
%8Ch$p#\.lR]/]ihS#f+B!Tqs&8kX2Eju]E%KddQ)0$\jJciAt[ho2#Prt<!\,'94C.J-$m>;L.pQo=WDZU$5oZs0b'[aH_'OW(\t
%h9W%IB`BfT`('_'U(7FYWq`Z/$4;P=9XbM%qAh$(@sYgSpC-u8[#6G;r3kgP$XjN'gXMJcWeZ8*D*(ifaCZY`Q:eP<_IR.J>D1*6
%@C#NkjPkfsM_NiAAC5=cGGD+E!S21r!IIoH]Y3i^^"nM@)r7I$dI(%==.X1\ib,`o)hJd_bfYG#bsDB00CpK3\12c.;Wsr"-YgG(
%.3g]>fins8'^OhcQdKQZe_HC`E&c"gI%*^4#A(8u4\U4hJ^&!"U">.$@-DdslRkT*l&q9Ls4IDX,#u^)[*#K_Qssu2UV/reG-oC9
%n?N>4/-7J_^rmqkZ3\)o!\]JIbJ]qY_^m#$,,6h+Ioun\VUtuV"C>sYGe#t!l*!5n?3H?t+G\D(RHY"*NI:N#&%0X;HP>ug@ThK]
%SO-%)DdP)`gXde#]FZdaY>(g<WF=LfRn,=GMq9<T%f<]L?`@BMURoF614<?h@WS%p)-cHce%DSPqnBRbKk[eFrma&FSmGg9@CY;=
%[lManH2A'3FRf4Uiq9/&'%>X]al,[bf)B1LOd^dB,=VXN>PU'b$D_nrCiQ"onV$`<8k+^,?.Q/VSr([X5Gt!*'H`=26FXC3SXoGJ
%5-BWX<(j3RJ(7QX?a]%jLrOq=&+JK#mX.%tdl'"sn5sXQ-=u/0c%:_j*:(FO$2pW*99kA]bMC`ua6YY$>X[i)T]1R47Eufm;im3_
%OLdkB.NK+8/?)i1Ui[Sdn_!CVN\Q/-fpp#9]L<fMWX[lHM.6[0&B@=/_]k,GLgr!q(q8rh:YX)EiY[S5`f.hjcpR,#;C1NYr3L\<
%cd'+eC;82Ae#oUjq%`QL1+$o<<_07i`S!A_P6I=JnJ9>_V&,E.d>pTCWhqL7LW\KiD/!=-BapMX+IKpA\k6fT^+H'_mDFCd?bIr%
%RrG@3gekbIMRGq;>?b"s&?e_o`8ZL6OUZ=,*u_Gj.D@I_Dl;9ug/G0EcarLURe`Uc[meCY5Q$aXa'H@T1mYMf]2-1rXLW`QBhk7J
%qR(5fh-TU6-I2npWkcs.TR/_5J0(<,TO975HJ6'^\U3sZnN=mr>Hr5a-tUsl-%)O5AnD[idL\4rl!A'pR/UVL]g\PuFmF@>!_A4O
%KbR5G:GU+*m5Vr)>4W\j:Qa56Lr;s?VBQY6bA7*_G%TNr9/e:-Dsm'@B]72f]X`_T\+&MqhV;K)c)!+M(Z*q0G]Rqn*bJt^]LafP
%mT^+A(@KtpSQiUF$[6LIc7Rh^\TR)jH#i(G&Ml62g_uXaLFsSZe*k^*\(e=^DC*P&Z1-r=_4R4+0<M%_+[>A"4(n"SUi8[;mn,.f
%Q1u<:D!KoCR%O+-k<KJ0*ls^`[<:%#F&dU.IJpNMWEsIQ"Ouj=WqHA;oi.X@?N4X_9pAhI].I/Zq.9B$?W/E<R'gL)6G]/5<KpOg
%VLA32]C9EnSjk9Tah%Map<o?PDI*Fne#)##IrjnZ>"N92,YHs[`20,!I^u`1DUDP.dl7fS2/\>`5;#i>(2q:?SZc>.LRA8T=1BjY
%k/?4ROnR6CFO)Ge..,_\(;DH4dXUk1g3;B&Pl+H$3am1=Trn6jhAi=P$]Ia8ec^=KhG/qHn5mcJW_rJu80TAY(I'TqS*!YS::k4#
%h1=qXY8dfsK<j88B@<5Q=9]/Vi"dns)h%@$B&(up&+D$j\,Yg%>>Zko@^O8lHV8+X2fP*QX"94(Ki.IMNM;,$oTp*L:p/cF2MuDI
%.Inps*Tf#:5F4jW,5ZZn28Qreo2WBpr^AV8o`4qal%B`db%7"fF31?6WkQ-G9S*I,h=GU9>=Ai:m-1D+W^N3W%F/hE\,H7trCXP7
%(,s>,V[/4*EQVg.YqJlDShf^1@N'YWmJC@]H!'Eke"j<^Am`2Z[,N1:2pPk8H1A/UJ!SJ<47hu87kp2?0o']Bbh#q8kP9\^`OF]9
%m7F%/O8$lfXdp>ZR&F/=k#/j-0G?MF-?;$;.\('$q7gqLMNQ#FdQc4E$<?T(."23)He7>!c*3M,.p0F8XgRCo'D#cUc05tK`>]]D
%]nh,CCu]\FXI=pb1=f@u8Q5Xm`no^;M.p;j2m@(pIaQJIAf\nHETJ2=Z=e5k7O@s7%n^G!jJH60R,k'QF#PmJLo'onqSJn3Coi->
%.f+*"F\DDq/]L#PD2.qQdknBm'@BCC8TA]8"M[_OYtL=qASk<`[&O?eWCH#AaKg97b07Jb]i^*DD2T:$Iq=q\e`79^EU_-B;7G!=
%SYc.F_A(/jc)dA52q$hDqB=.-I\#:T)n4H8ToZru=t&Jaf4Z]tSH!a9/lF6M9oA$c)SlkIK(L1p_lT'h<\=:f&n*CZ-Z@_@I;">k
%(g<,J5!#mVb[:AJY;[Ku/J,\a2[8d/4o1<J$n,1mT155rGL3tClrI;To;J/3ldfI&PCC`3?ON,gUOFifW[rJGDE"0&Ig=M^0g@m*
%c=H$eJ;E9*IK=.aN"7AIC4sbcgP.d-Am+bUpcgB/D#X:iLZ5dJ[ss2EK(iY5^2C@YB[L1s-C6oK3)i/DI0%H8"&_HYp9<E?1nqLA
%Q.a(TW5KhVhhMO_#On@%aLL7l)(Y"X^;jOSLW@9I#4F5bqMsa^H67006_tNGpkaL6Jq&1Rljr#BAiK>WMj::?)h'ob`;lIY?n@NQ
%NWNugDMYqZW1(r%rCS="pEMuErojjr^@_4$)X-k+'M8Nm+Vc*uK=jkVnF(ko=5j2MH8ooB2k-["1n'f#;49q9s&(=Sh:%F?5F\S<
%"uc/S9RSUJ?IaZJFKo*l1r4Gc<r*pP%o/]E!$qmM9^HWs(gGmbT<I*BTQ%Q/r*@SF7D2s&nK49+]44&b=aJ`cSbugYp,478f2*<6
%R-=OhUZj*)S9\/C^kYY%V+/(C),5L(Ldn+rY"f.OVtCgS*,KX:-Bn\%3K3fQLmf$2R`5;!U%mN5Eii42i$9<nl58t][5-1SoW8K&
%.Y[/\f5ETtTj!fj.W;3\epgIk-'l6,V#O=)?11e?ikdhmemWkrrB&TTiT+7B^O&*7[?Q#NIn]n94q5]2f;Md67uc8ST+-0,oAh$o
%1p3N5eX(`!*;WmS;a?o6ANeZ>-Ba_`gV5QXj6OHY5TnBVkVZ,0DdlnU(rMS7[H:R"Us]c$dPWaXR7?^f9'??<PAdq6UZ]#?#D9#r
%Sb;`gp%-;1:E%GjV5^^K86Lgh07?lG3fFEul_\,2c)>!KJ[P.e$mtnE#BR'q6RJdCc6uDKV3Yl1&OeRA`V2j^Q5j1JLTsMmRK4@B
%d)hM&Xn+j?4Nd$"4+iQpi,XSXEMY?fl1Rp-Q#80@Dp;p>k#=:bNH0G04RQ1[G[igVhQ>Bb^&!5;;2F=h,s.Aee:h8!K8.ZHe<;rI
%W@Zu<Y3fOY1'YE]nZ5D8gl3?OM%o9M'3d>]1U1)(\BM8]4"dVsWDI=-?KiJF4u1AQR*PYJe;LoQ8"$.9c[KK<<ps*bl]$5jkD8>]
%S,Et=^E9jk.]Ane`c1rfRDOOD7_O`(6)E1o](Q*MN+EKn?FqpG-8/5)Dp[q]qPgNWg`GD)4s[YXcU[A_q.%))^1alL.uf1[1MHE&
%dj+aJD5hYSldW8HPTq?=%jb\.Cp.q1[G%kS2ClJa@B@nUpP(&nf4k!PHHkhfEeAg&B#g8r!L'8oFf#XbWq7NtUkllNf9a3f[B#X2
%@.nlT*A:j-XHtr*kIK%+f/#,=8oIBhb:!W*2X7Cme*D54QVlJbI?;;hetOul3C>fS4/efsB$/Ni;+#%^(1^S!$u0)1G"RBV6](.+
%W/FR^^T,Bd@bKChh`;@np$^99:cTmK7GE=c[<B3[0WN8`fhiP/\Q9kBNL,noN2ta:<Z8JQH;n;Mc5r;V:.3p/@\Tt"q[n.^f_&@g
%c]a3*Kh=;%ThFsap,c(Vl313WKl3eq4*B(C]`\*:@h4'@RQCc68#1F/8k1>$p?tkfK1?!sdtD^BgYH%4)oL"GP;hlXnoqKiP[WW5
%W?$2?s6[f`WAcD::UF!mjEpb\X#)X!@-<9AV=',^'#g,*6e,&P?ep#5%l]K6XXdTC_P68fU,JQoVAmI,@_Ks2k7kkmE^J*F!)_jF
%.Z8Hd4Eu5'52BqD[53Pb:1Eiqh43'nbmK?S(&NMa^2r/DbatR,\'N@*_TZ&-n<N+)Q0r4%V#34?,b#nJ+qQG3D/)*FkG%!K(3pZ-
%)iSWT>Z\Uf,?kgudBplV42+uO0$>,Eh_et,[3h8sNE5mQFD;In("$SuEnln&3aGnV3^uI[frn;pTprIcfK"VjAdBW#=>mgtA0MjE
%?A>+P]a:_mgAjs?Y%5<'8Ms7?\n_`5qU(2k$+X:B$%m*$Q9"o3.<],ul<YWK=MH`52G8kd0_;G"248HYZ*q:L4/odLE[*>)`Q130
%TSH)+gLp3!Y^\C9i2Q?`-T>2m$.Uh/<DV[r\!ClTca+G>;;:;HECEVN;JimN`qsF!?:P)5NAk&;D#AF0Bm=dQ-S(DQX.i"QJm]qJ
%'ufCj;bZbl7K-pI-AN#LCPJdG)V-*RY:+]\Z<:j.I]-q(Uo<aB0:B2+f[pqnbG)i%ML*n!%?pq1+"CrbB-`eVW5-\"9k^fJclB)k
%\"96,n?>^/h:EHXibmLDLr-ZRXm!EL<q1<Y]Ed1MmeD[`.n4Fop>\1qC\>$I_.i@!nutfidHR71[:qX=8>;WZe5@+fVSZ)*>jhkG
%$;]Gf&iN7(ipN'[Y"+YLE,m5aN?8KoS6!5QMB`o')ECQVb+bk>#A\<gk?X:ACTK<l.'!I;,6bor5kia_r3"[BYr&ETI_FXKhQRWF
%,hp>kNNO79%l:L<'oH2Yk1-W(78h:$)]P&;XI(@N]QPr[ErC;O7hNbC,GF.uX_S`L.+Ds1Pld>_@JkRKQadERkBZG7J32?*<a)X!
%[DQ`kPs=!j?c8i734f4fljZ"O&F$NkYlp*C!N:5(o_,Fd6cK\;c(EU)cS0roV`)&^K]mR*Wa8$toS;9h]lb?&W2nct1.batATI$8
%V,M)>$6hTH=Zl:&qP-R.g8g_dUqJp"M9oA)mE(Q_E$gl7mma_]TP;=RYB%UTK*gBFN,sSB#&RaiN.PPrT\ESLZ53,ukH.<*&_@)_
%VTqWBq]?if**\Bi=m4G"/pL-Vbp7p0EHoLRnWEeHT2B)_lCLGpKQX,CZ]&O;4.-o@8e'%`9VkaQiSCbn<jGaDK7(54W'qlmO]ol@
%=Cup[nE-9uC+4HbGsEV0PEEp2D-Kbs,?8eO0\cr3in/8g8BiGlKpbFNXgS_#Aa1iSZ,s%'8_Z'K=%%h9]GJu-r32/AT$G5AI!.9E
%U8tZ.MUH!ZC6"n*F/-Pf0]lK!0uno7bV@4R%%NAkFJAB?iA`)%U#DFm7gkAj/fUCdO`#S3ad6)re'),'B;(YHNc=uekZPTAg$&+F
%AfJ,R6RlQCFd^'Nm43:r@HI5sGL5R*Jb7_oa>,)j3&#g6MLFS6q77JYm]`q%'=^IJD2k\)4E-n\4oDsuH2R<^7chPQ/,S;^>(3OL
%U3X"mhR`<YFD#a\;5%=<p?m:r?>b,af!jMLGdcp#?SDHQBQpL=W;<?-^)K1BNcWOPHH#?lo2Y,Uf#H>.j/pSV:2d3-RQl@@[Pl9P
%\uO8\IfB9,g[`pm'-.kR:S1XFg$GL*OhSuGO3jS-/3R,05J?7s^OO?eT@R%ac$$W&>j5Us4S.tM8k%qBEW1=Fd4o`A4L8@bNc"0t
%+.i;shgYPVG>uYt^UdLQh"mA>c-+P%Xn?#/\Pc[\0ISNdW1?45`37UuPJ'9Pm)uZ+Deq9pXInT-qLo=W'2*<*gV[KcQ%*Ue5(@Z*
%)M19L$=D,o[c(R(Ih[*A4*U72_>!i;_mOhC0o-@*g&S\j^Fu]g\#\rOV8@q-ZE]gE?p@o<^KLNDZ;l/AY#L2]O.X+8Fmie7>-2&h
%^Zm?(BB9NK27&lRr,2K4\+TUL=1*G9_=L04h3Hk%\an^s+%X3<f#F`u)nPPthLF5$[Ao:V.o1@JT(pRfT%8>i8ajmKFfRT?j`6p2
%9id1UHLHE+rhIP![]S80^$qg!PK\3B0!26Fq1cZA'Jt1g5M.IPCu.81?4C2QhGN)(m+m$N(YW4t2W*+MYOg4i?`;dnXTq,>1[jis
%S<hLXZ1k\\XEp2I>kZaEJA/4P/b\;_DXg;0o3pn/b,6k8j5CMUW>-lah,pS!G9$Hhj]Q:rrbM+Mqm@hZ=P`s'>2p_#%S6'oCZX6U
%m8[J?If<;)FSp6%U\=Z2=.7BY`6d@IhGrAsWVifA#[d38f[A4N//:0u\TdV`'4Q/?l90@(:Yth\m\oo/V0M^pooJK4jjF%>GP^`E
%\GtL)]A-^9^L')bXT-rLnR_Y=]#d#UO%ogF5C'Y4gF$h!IGXd]gFF#R+.j84hn:BVB?^\EV8Cnq#!@;,c1_``D;AW>pnRXG[o\%V
%\l;q;]b]C#]G=-?7A/P[^0Q$`^@FXQoZR[m>8p*2]=F\<rP9n%6d.DITdJeepPs"R&6@.a!O'(NJ#YXkkMJ1i(Tl,(>;jU>k-rT5
%&S0tml:Sc2IN>#`,]h5P<KeTEkP7Pb5^Yn59NJhV^W;tY@O*n%/"MZ<V5:NMfpoHqoSG6Ys10XKP2qEX3!c;-d_j@NiPI[dgg2FB
%93PY1*IM[eZ8p^CTqH;>l=rKcipJB7c7cVQr^QS:6-fMKO,)n,s(15=U@GiK[b"PU_f=-<?:M++cqWqA\$c@\k#kg1QTnf:)_Vp`
%b.[T6T>BO?jq`I*m#Hs!J%rA'hq0=lh+rF[fo'cn)+]qqFB-XZgI9`?HY[us8bZcKbP/'eC[oNUcK"isI]]#V[,/957i*986Q<41
%iW_HuX6hjYoPi(TS3&^BGQcR24Nr.&jU8%KQ]#L;?@"<^p4Z>"g[@A><#Qd'Gl?aF/o@.DrIFbD>Og4R36o3a;!fRP4j4odI;T2F
%)f(q=h=SF3h<4q-=4V!_EiDtjD8'CNL8t8qn@2r5"ni^!FYi?*YeB]$a0FKHL42RB?L%FN0YlmkUd4EdARhW^#5YrXccrd^j)aYX
%gT,r(29^L'g3d&E6BQ3T5p)=5k1QZK8a^P:jQKsM0^:J[RTnV5qEluKk!FLeEV'!4U#l0T/,-,HrQe^!l_W`%r25ji?F*g1r9MnR
%V]l!(__](X>:.A8o2Gh(0oK(Cc.>VO"]b.Ur+e=J(R8NReUqO+[+6Zl\`X4eYO=nW6l,43DW1\+.C12_VHFmV_\di-j4._C.#0%e
%KVP;C?kChITTkn`@4gXQ"X[Fu\u6RL50TjJd)3P_2^N[@4[I?Uk=5,GrOkoRp$Oj<kB"r0-M>.GF\=H0o<#h3_9u,?hPaJhjtq.a
%S)eCFTAQ,5`m@ECDYTb=MI/&:=oS"K`Ms&26ok4D&/l0'm!<ab=&G/n>)3CQ0@clr2=W':#0kC-ic0roI(E67l-f,XatNUB\f&OA
%5qXlZEQ"Lg$]jC"$&CmTjIp2>0]>i"Fr7]N*0.:-"i6h'-$mQ(7'@](M05Sk/31+iIFt>D&'Pm"AE:nOC:FaI;5M"@bIPFj2eD_O
%TcpRg&B#HL(=0^t,hD"$iP-!pRMJK!?lH.]m![RA;u\&)O:X_DUYh4miT&_@qq%suet_F7r.$S@mN5l?"hWrC\b'b5j*Kt8j",(`
%<ckno-jsGM51h[1bH9fOn'2=6Y:!Q/e]T$F`SP4Z(iFj'C3R_*795Gjh*Gs2l1*+sMs"m!c\5*'^U*j-hXhH[R!!?5rM-3nE%s?I
%<.+Z@8)>L?IhLiQ>/e1W_lqlp1i=7:9pY-XKj9Q/2cesLF7!224oFW0]??h_;17?TY-&g/aa:(9c#>7;rq*i?4l1Xe9eJ2o?4B6G
%)eklA(@2pqSS;5Ws,%;*fI4/RK\893^]t+EXgOef*rM>AJY<)J[_2M%IrSdmGV3MlrK#5s$I;//K<_)P+`YB(:3aie0=;#u1pYr(
%EZX(#\<LUSLKAc,E&F\<;fh,HOM@n[Y*Zm<?g#*md)5EgrpA;"a8*1T^@]NH[U-XTrYS\(XpRc#1[fIp\F\O[B[3=3J]s<VODDQ%
%h`&\J\\33j60r$J$5qA=\]X(H/:HZ+O5kBP,2_n85Eg!ch.ZOjFK!Snn\sUB#hI\`9alMNiErYa(S/19@CWW%]LfP9^;>ZYHmG!%
%Mqh`NCB^`1s'XB0kBhUBh47BRZU^'$i7Fe]+ZR8%?/@):r,u]n7XT6N7,U]R#gT.[aC"A<J>9E"k/7X=*W:_rq+L_ZNrC2fH#(+E
%CfiYsY7dG6QS32ns-AXKnOm6(4MFnND@LQ1ncrSZ&G!5Ts2jH>YEiPWhsPFMoAu%X2fbjLNt68Lh]0@#QX'K.r8!ZTDEkN+bJEGW
%<UOB:07%tBGGo;b4GS7_X1O+(@`^0<Fh8IYSFt^ukL@D(omGd=3e.D"/1g-)NUM#\0D!I3Dm@i:]fV'rq"uucDS0;6IlMItAEu87
%X_k7ZFmm%j=aI`nl@A.\"p\hLeq3;STN!sT^2nk4g0:&E?X$aTDc\!_?`Y6u@5eV0PIMRCH6h#1Eio,:qtQYFZr+BEZi*Q3NE:.p
%[<0TZHb"p=,uVs!dRprjSFZMfClAL`0mJWDZU2?,pF,sDp)/gHm2q%U-<!;7N-=+8J^%FOA"1.[]P^Q.FV`bXK3D[Yj*j5eqBN%t
%\U=8M9s%N5L9!oLQgTGes4f(>?JZ?bdouXoZ`FELLhPQ5;g1D$p+VZ2HFa&$hoHimB_8Mt[Kpt"qL%lepp,>=otb8XrqW+e+8N*5
%nJ69[9-<A*n,<Ds7_"(td/!D"P>CkIAOH=k1V*:$$SS-I!TbElFq0`5\L?`]g=t$Kf=fWHYZNe[pREgR=')K\Em@SX(0'74+RB3`
%^O:$9oD-"R`LUW>F5D?F+e*iUGlKmME3rN[Fn=P1(I*DkC0f;=&KAsC-cMY&ji;%c*)I6oeXM?SL*%Bu]RO$E\bGT'nI/NcDZof9
%Mm&G4QcS78>(FhTo*:U))<'D2ZhoLo@sW9*><V1eY<;O(bl&%7X)jI(](Q&O^E7Z*L1ridj7USAF:.X-;0FP]gS6j]cK?"5ZAj+P
%V7>s]pTq4!qP1O3@-arW9#ZiE+-.X!;9iHuDDo595Q>n4WV;JP2q<o$TctH'fB#Y_]</h.hl(Is[QcKCP:k$!\tq&5Rf19fYh\tT
%fo4##]cQMl],/>sH1$**;0Z#as*R@&jOm&tc=\i1IiQ6tDuDB67bO#k"V)X7'0UGd11hT5YY\\RhUBo6Q^br`g!p;4SB.o.mM*tW
%^U4IB]D#TmDeC`THFD9D-V-'Q.!p=.C+%e"HbsfMleAVP2Y%m;/=0l$>h\JGK`fiO><2^Vm7m+%r:X[u;q-:V`7".%pX'T*!ae1S
%g)#*sO_ICLM6/3&o/Ag[(tS:!6WBX?p$?Zr&mj_/O)f\o5ka81na(*'2eesCjEP%g.i!)3c:`kno7ND(T<b"mpuF1h^.@\^pT=0[
%4-e6+Z#:$Uo^]]->O0>Wq,Yl,SkphV9K1^Rq(^,1aO:&V>$?XYQY^7)7:Wg;o#uUR').k;T/JmQZXnd?h!SU,s"2=5pP2uAc]/3!
%j3PA>K4=PI[^NUCk51u`\\ioW]Xt"@5p"k#lh3i/j&&4Y$2\.?$6D'r>XVr6.<\4AacVp:KAt(X]j>^O['[NWI/h#EON<JIo$+j\
%m\nLF]aNTJjX2gV2V8Wj4m)juE(<]]B1H7s#Hb>0YnVD.?bX3u:qH7EX*a;N^Ne>tB#hu0#lEi]1*-pR-l(%!gNj_drrt%Z+2bS)
%oIA\sn@`^Zp[Y'Rin8qim#KF+Ok]0u:VF9oNRH6Mm2-kjhb[O)-q9\5d?,9IBHJrm-F+^H/I-0;iu!`O(Z0:\/8p/"rqpePo3(7J
%\L<_c"TPJb0c4Wt<^1lUhDs=NGO>'-<#KLG2cPZhqR+8&`bn[u9BF`JeSRV(CY@f(r-FV!%sLZ#%j1OemG-CC(#8la?O'Z?YlmO]
%FhYT%@`.&Ko^GVU-(C!F3B("kJ2hFbojKj&[;m%4?@!!Rp!)3nIdFYbXd>S#WpjaB%6[KXdu08k%6Ar;-HF9X=.`e:%"`?[9>9A'
%h'Yuc*f,,e1>tG=T^"L=?T[$/`jD2>MVXWB<kcuFHlMYJ%7r@ao$cu)C\*[&hod?0nO'HVM==4!*Zk#W\V#(9?X2Fa;,[\KjWGUf
%@_\US*c>'JH=+J:\^N-I#6uo;/W_&-&'Es.Dk&[,4p:?R];JB!0il+CkjRmi9fR<;NM3Us]Y1WFBE`YUFmZb\cZW_[^:k+`Qa5Y_
%L2Q#-O1."dV.J+@+)^K8l32uZq+'DgG5.%TR$D<t:SCgRW&g'@Vb:rp5GADSk"5O.qPLWB<N4D<j,"!Jdq`dq+3q?:_2DVA&(9'%
%9<Zq'(YH?3D^/G8fEA2bQHcS)rFh@>8K.GN2+jmo5qY.aS/XNmWS^Ki.ke^ECg.ikK;^l5LtduK:Q-4^))Fho7QGq%n.:QK_bt47
%*/+90E)`;X`ZBEF`!Q&KG!UkC3>a37]=Gi0/XW%!a/q`g,bs,E_;1;[Ya2t\VP6!pA?\;+U:bPMX*O0kI<cq0cO2B6(S>Jed07.o
%[JADQ>($9po58sD4Br?_Zr6#Ep=@6MG@6R0Dc\L(qP+Bis3i91_e5Oq6,Pi\W8u*VXkrW(]>`C*ClnXCq9CteWfdAU5P[esK,04/
%%dt.((=-:TmcNfm\%;>#a5_#UP90`PD3h2"-t?NtX!sm:Ue^5IT4@o[b0qsBDNU(o?mK(draDqBM5GU^rms"J&RDTjW^lBfnp!CV
%=CXiS5(*4RK":./Fo5#LH1U]N;#9lsE.JlHO2uTMCTSX<1`>G/>P+eeR$"^&CWA.+n!8!re+6nIk7UL<j\=GDNP(6=]C3S=rAjp"
%IXD,Fmd3:>.OFIAGP'0Fdd.>p\%\2[puZQ?b__khFpr^ua6Mcfbr6XfO@oGn5MA4L5-@,LDQ\G9S^.J?44rE-3`8>G2R\gPikCj(
%C&2\!NKp^0p0PMPF4^#Ea9eFTe(_L==%&Z>.`^rFki+eZrr/Rt*Ob:g?U%f."5U<WED61HhRgJIhkdV-Q[ZQPn^;H-UV0t+QJMK,
%noEQ)mCZ^JLOD.@r>'4#h9mO0lMI3^f00E%H0<gd1IRo8FnIk@<9udAI_;gGIgR7h&pRcQ/D4Ieb2]D0DGJe:T,,2k5Me37/T-C"
%J(TCB=1)JO/R3,BequPK_XW^*@.C_@h(((jc3H<fqk$pD"q)%UF>)2WFnAPemF.hI=0'G2f:UEWGZge4[gK![$7Ym>T!W@bP4=t5
%mE2p,X1?gQ48Yjm94'Y2MVj;pm[RF+J?&.'Y8]QM0+Y_g&+<8ER]%KK7h@YZ2dTW(+@c6H)1))&N:VD^pV*HG>&qNEQ0mCm&6@]2
%.]fJAhKJSF95*VH_p85Mh=g%/iV>3SdP/+r(t6f[boL(hq`)auH_tlVP*phhH?:E4-K*>8SOR*SG;%\+b[5K7'h>W</=hSe)XqWj
%X1p<N\?Y1F]2@0Oro<<#XKN\;0ZJo%:r'jRQ&^*EU)kUu7:"TrDS+H%??FrHW7_*E-(_sm8bO0OSa0lhi324\;7G!<kWJX8$Qq$"
%ksh*?7?iqd=#7OgO4<hXIp>CD9X""Kc9\:l5mAl=4Z-6\b=naf5Dkf%To\ujL2?!XNuEcQp-cS^_`un.9EtcnBt#j[?mlIO1jWK-
%[kdWBW0]5`^RB_6is&[!#Z8?r%99/sST9fBR79WpqhYhQ!6$Y@iba\s^/b[FhJ!]RZX#L:HC"M0)OUVb\p^F\<:=B&X\4%>3dZQg
%.NUt#eS`&Vk/!C(V%<Hg<isf`mf'JSSe=`nEHM&k*rV3fCrIVZFn8B+kj=FA@==X1\qUU`[U$%_mBs)bdmrOHPUfsu1Q><ej/?1#
%mc'55'P.fLo:_llL3o#pZZZd.)XVGAqR^=D)QB5s4,GIt'*aSkFLN>a4!\e99)l;c9NBR:ID9Q^ch.q^e/%[^9DQYc^,VLkk3I=D
%1"pW;8G=)7k>u=ih63]!#OePQ:>>UHkd@K1WdW]7No?\0HPji7[X6d\Xr4j8C7i%gkpa'Q>d`<MXn9f%T2@/s@kWVWX-^!0Q_7F,
%%"GXrQ\I]7=iH"bQWLAlR@j8'`g'Q3MRpW`XB7@#:]H6?-Bh/f/+!@IR]bO\jI?'3;jp"V/\r2qP*dqOXq8DUmiHKC](M(Ujp6-)
%j#5!O[#"BQBX_aL$$XWn%BqGJdb'\-lZ:LA`ik,RgUZ<Jb#qH=fTaQs8D+ifY%KWB)rgOuK>SS/oV81>61_H`WAe;0Fi'FT*([`Q
%G1BUSi=5Y9I"d2YCE=Q-:2s":>Q"ZbG8cZ9aQScV,[["B=?JZtUH;)\S9^s<8\\]3<<YI+GQlno[!-7m)V<=#f04VYlH4MgT98oP
%H6%!OY4"1FK3;nG7W7YDZ4tJ<Bj4iWb9tora@6K].?kHk\I^i`9%Rjn7?kT7o53I'%c<j7^"Y9c`-m.!q6!Jh'cCpk?$fX)f4Z-n
%34RV&gDJs#)de::qB!`\r1XMkqJYDp.(">ZDp0p28K.N1+(c?#1>I$2%i<Xal+d8+7&;\U3E'gXgC@^4pQkH`SKbT6U@\bV(>cfK
%!la'9YF=E8:[fScoJN-LJ,K1N"8.)5e0!,<guq*d[dR`/f?^OD/F.l4CmpHVje;'Rb)!T2a7]T:D.`Bum<_uo1BH,<,J^W*!Otml
%.:>#e60hjm6rP.+YS_pTpI%a!$!i+,(*[YIGCe^-;O(a24>0ir3M%Ib@X_pV*#QR2eF^C)F$l7d;Ian$ZK9^=o^,J:Bt<$@fUe_C
%\Ldg-pB_,!]KcOfaOHSC-\.f59ffO2Q^Mps@_(G/SN$m&0^/_YE<;?L@>Z>(Y+Ki!Q6]F>4<&O27tYjb?o\T?(toiq4O/A+p`[kc
%)eQYBata!>L88S2+;O0r-j,o;Cs@[qYA"!T#)Q';MSjBbP>iC$moh';__e>Q2-B%O[OiiV(^P]$Do"YO7P-%WL'E5SZ@,ru<XaSu
%Z676PVHc('\Rc_DV%B(H&A\>^M,DL:Vp,lL`JDoO%)rC-Ru.G86=X$BDD%!;Fs#hjYt`q>'U$h=>p0O.@o*UoDCQt_ma7id[m;X6
%8\<;7_Hi@KNL2jY:_-5WV$B4YUSQ_1,<bL'=930B%L%_9fW1+P/AtpY=fSHgW45?]Fsue^Y"?7kAAb2KBuK3i#319R9uV`,Ti'5Z
%_Ogj]`PLJfJAHPG$C$;hTmkQ%Hs!s'C^QI39emfu0ha2d4?uW\E5&"H>0_ZP+\I$=id)(pW'o9A1hqfmNY`fP5S_oE&eMba03,`;
%#,!H=lZ*UI6,bT!A)%BNedK-L0cC5;9n_36M3a>RCa]dpU`gH'DZD>=>q6jrcjdHdQ>oaBFoXZ1\8B.qFoqi!J"!<HKknN5Dc@6U
%Sbf:lF<:]4#=GSK;,Gl74-C<sF[4FrQT44in2!>V*J]n7Au^RAF"BB\[;d6*X:R&W;$I:84cZHC/VG!0R#?"/)!p9j3B.e;m8+[l
%%3>4F'l-u4G7m>-CPO'HG(jnma3b#4LP.@_.H\SP/]K&Y@5d0lN!a]`E<-EA"[Blr,bQ9<MkGSF;.'[aBcmfp",'[nK.s'I!(OOX
%b\TBQ"j"O5^f(]."_cT!dR)kSF-6'uf*8I;YJColgura(Gj'Jm;9K*W`Y!i7!Q%5K#a6$s8:q1nTLoNq4<,9@J^?`9"QhMETeNJH
%!'M^j"SrVl"[kW7$,ja3$@i9e0a;=W"W_<20iSp8]C1%IK>fFMSE0m,KI@kNXa#jX"pOlcBtZ4dL(\NHs$cnP3m8rSIdq+_E'.3`
%m+TZ`>D9ru[fQfb!j$c2YQRI!L^$cX/)Bc56G*lR251r_m7B!RO^Q\-Em?XH:3HUFf-/_]E4IXGK7M097UX#?;Xg_8TJV'0#I#1-
%+`a*_nmJ:l7G,C<OqH3GJZ'E9I3[goFh(m7_bCDu^ib#^29_hp_2cIXE$#f2!'I'C!'r[L&JqRTJuH_pNC5M@I8S3TjbQ804e%9<
%_pD=,ots$+jE$ef0fKdH8<lsNZka!XJ45VWTEto+S`LLa>UpMEAY]&:TN1B;'`]eHMui%X/\t:t*P6r\,<H$82"b!:1WVma<+M\!
%'0+C0PQK':i*_Tg$T;Jr!Eg4NK<T7p;)87-\4mWf\dh.L,g@L=(_A49WV7:U?q=01"qHP[eA@1_71K/6159%<$Dd,X2^m@^LWUYM
%Mn<^opM>`q\b-u4$qN$^U)4.fa=+,8Qk@_*/.GJ(#uT%F"N$7oIE+e2fF\DA`.6brY(:9AE@`hu2QEh)Cu9Dton"B0KtuTfJu02%
%H6,`ef&IgoRcr,mE80Lp2[%5/(Puas(bA<2*7tRNO>?I$,YrtH.-5ub6OOAA%oNW<cT5)L\Eoq:U3^5.3hi3ai>Ms_$N_l@!!i\F
%_o47Z-1#eAfIU^R%tr;[=U6R4Xi08`Z/KF$)$'j[;bO8d9?9".-,=+g#VK3\/-@C)Un*?B#lM"0_9X*(@eokl)i0BUVO8`f_6C-f
%r56K*)h*Ajc6:,K\6,_@>#7ZK$uUCD63s\:_JEC<+9`6G%1F0qAksu%!&o;*#ZJtR%&a<5Q2\R9gD:,5&\-Bd+<(J]#NjH/(@ur,
%Zp<gg_9a&9_hO0#;hMH1Z3Q6[jWM*HMg?dO#WUa)$?[P8'7teu$!)Tijhs9#`l4\H)%GCl;%dGF-MAD>]&u_'a=M'j`'r\7r4t#e
%c(>r"@RaYcM^;f*nRDkS$@S'J&271C's%iW(jo@L/o\@G6-qlQjPJkSXpPfa>pa_p$ZueK2@ILdl.]\(;>u+d!<NK(_&BRF.j0Mu
%W1@<F=m2=4rap5VP&)Oa]7J`A@=@,B'WMqW6a6\iP!!eMjXBbs+63<a/$]kDJ;mEuGcO<PE]lLhUN9BGjIiQ5T-IL4*GFI5&Jl1M
%Bio?.W#R0n=E*%'9acW,NeY@hFpfLu8H]?hLHq`$]<lj.JDgs3>_3rtFl8$5W=20u?IYDFQ&Sg>K$ot6*Q/_c*_6\cL)4'VEdY<(
%C2u)T")X(h!"Dml8=HY#Fs!qM6>bR'_GGg%-86X6N.on`Q8NM3C'+>7b`N4JHs"I1UFoBh>[,`YI=Q3&VAKEo8?3Jo,6l54K_ErL
%!Jjs1U)\jCZ@$8)%3SbFc4JSe\oL\81^KffL+":FBuo/oW!#E<B]4glC(O':-O:0G=q"j/.%RS[dD!Vg!/Ol<5[7';;5Cu>&53=)
%b&E;3+ne%d)(5tLE("gRUM;=\$0nHT%<A^PPm&(h]83,>dtSVJG6/(ZY^i#Lj/Qi:A-E/C)U0(hJ@oES#9ZR/S.+3$&FuoaMlCj7
%Xq4TA_]gT@,m3jo0OmEjmQ<U/f+A?\es2f!.&1p%N!,FHo3#P@!.dQXMRkNVLiP_Ta[a-X$/QidO"en!bG[SdZ!il?alLkR;J=*+
%(:]*.B2+#5ZY"`mAl1^)mA!.6cs/h@aMK+F"hUK^D4f1lXW+BK7TMEb6\003\3``kKCRucmZh25"Mt'@6eAZ";-9j^hP2]9_YqI@
%#fHV>o,4Q6Jt.'iFYM/oA^*M>SWbKB8;VFK(]+C'1,1!/"l\=WBN^ud7XHsaY+eA%VYWP+TJ3l9(j%nCA'!l(3onr5KUIq_J95W3
%C,!hMJk[qB-mXV)-]NJA+9Y$g)Ks(#FM-\CKKV:/&COlI=gQ,VA0?2&d\*isR@odJh*EUHH6D@YA.+;N*0+Nr-nR'.U7\+q+gm/U
%9tX:7JHb6b(GlWB-i5B"q)E&S9V>KPfHa?W81G6VQr^*(0d3N_bdpu/)4`0MB+.5/6Y"2@CDrEdmAe90.bJ-m;Un@)l93;nV=qq^
%AE6YU&R+bL/I&3D0Z]^8@YRaSD'J&nW^WE\Z+6R9Kh,T3Y1`ms;&.$pgf"UCi\3;fif+tGAT`MsD:/V$mrem^GC:>uo3s"6k(+,C
%P6Q[Pcnk"s,OhT>&i2Qsbn`*oW9kNl4^/VbL6)^5F(n;R;T,IT&+J)U.$TUMAi.DH+P['g,*^5eiZ"UmTL-^:$p_n>6(&qX\3uR>
%nJ0'nnc=@J]6(jI^g4d,CmYchQ<mf436j4F;,sl6/hJI^hdJBsJkNnbKm".tk'5;jEhue7^laq8j`htcjG-'[!lR5l`0M6=FY+IP
%`Ae@jEg^']#QSiklpBpdVO.oG1?3;SkC=C'LD_KIKS*\BDC8;'pRo,1'LPHCCS9`bEouW&#fkS;PCl>SPrSk$W8f)mi#+YM/^jBa
%,dTJA818AEWB<SPdbtDr&TU4`P&j%"'"J`l/iB@Mgo+pXL=(\f+_)Wed#8PeM'W+eiDqE9"qJ2?fUMpq%a-QI-(7/9==Oh\YR^15
%;",-P3eFB'8)#ts(/?N2/sd9QM`Nj0"/3Uj6o[5jdXPdiA.!Hr.VONeUEEcC-C.0m6]eOdd7L^$;'*aQd-ndn'?B;Zo=9YYOKDt*
%V<7$'(+SqJ7gkuH@VjdC?(Er(6;O43?I]cB,b..`+G9e\E"`=$d*^@a2$bN=2qUBtd92IN006o]S%I`3L)%Ou@OC\07tqT8=e`6K
%N"!5!0r&<"P\GKOOQ=>i%jC>0Z"T(E250[odWc0rZY3Zn%sRFQ<LsKC\0`]WVo-X?<2^'_@:0Zj"q!9i@G&h+E@ME<gJZEK:EUEB
%ol^1iq69BK<ZL,i`0TTHMFN@0+^57F+<s`aBZ^'ln9@\tSljplEi:fC@MR;u5_M73U.Phg63Rrf$7M;C:Eg[I2)#AQ3+=#E%@.8d
%Yh_$*Wsl3ElB7H69L1Rl2E*TSL@I#b!#@!lJeeP]%]Cu7K4)"fqhCQH@**[2.YV_6\,\]Ei.-RB@d\f%jDZ*roaFg"i4sA4Fk_*T
%lJ%>6!=YNDil/p::ep0q4rsS*(i:$"UOsUMch3^lW+]1E'BpRY@&0n+<h\/D!4>[mZ+B%,)?HBKqHUDk\tTiB,Og=F%d@CMNHl9V
%4A5kl/MX@-OYMH]6Eibc!QiEUa2p)7.+n#KRIUoQ>Wdm:1U:j_'`b#Ji^JKPdgc`W3I$dDF2]`N"W+uL(Jo/Kj;E2idLlq3;kXsc
%<WPKq.oT(e$/,0r7tF:To[Y%@)29q`b=RR/*aQQr1"!9l/Ok\YX8@/<:'rN>KHRGK[uu#%I?mtS!ONX=^:Ai7HqXt%=DI%-].>X4
%3aM<p6,$I2A?4'sO1E'Jo<^hc.fs_Yj`uTh(rLVZ,p#O>R5rMdE>6a<L(VT2Sec?Yaq>a["e7PcMH><uE^Yd;ki68a#V-?F#b7\i
%PC)Y[)l1Co[k<RDNj2+\@^KF>eKiskhfBfJj[lr:[qPM699^d=iT<JH+`kZI'jhN*0KaJKBEu[<nh!f%.$Qe\q?;qn\BeF_V*lJ&
%Be5sr4H'i09fHB1#l9Q`UhWmq<C]#9n_+qQ4Z0@WHEJM9PR8,2<^`J)a.j^b28DB_2M#*bTJo51@.>8l2P?jWX3dYRCSKa>M/ak-
%+NX-UZR;t-6X-d#N<`0PDE5_P8UH(BU(ElT.6h8_&9GqJ"-ANL&E033-G2<kCt]L&@U_"+\5C=!l-*$h:K\[]0fl-4@h-Mopos"#
%U>!gM:m`Y(1i%W/i8]XGXO.p2)j=dpQH\Y>:f.?bN0ms2,_$A^`+)8)7,U].U+gJnbJL0(-Tj?Wno.\\Vl,qNAc>IcM-=SIE6;b^
%k_L9S7p)6H-CK'Gd#`cKF@\YRMFOc7$MA,-i7J3BAP&+"pLs6#!L]%p>V]0I\R_EX8s#Ms3^GOb'L7^K5tUrWTui]]d7!Dd7Ut!u
%e7>d'd$XWk2@sO%Mq#M$lbsY2VYaG.P050Z]5S&1kqG^jehL!S/=Y-AT!X'(S:FFAg0F%E$4XdDFIeBD>_)!kDT;$E6:lVU1s&N,
%eYJZWg.$pZ!!sNG9CZs0a;DC;.KXa.M@1[,<qB^WdnB1B/^2Z\RKj-GVni?nqF+q\)'HhE"lH7R-BglFUk=MED?=7`kc.7u=JG$@
%=JDI'%/`'i@jFOA&kYoM6Bb>UU'B-plCb?(c)u$[Z3,/1)DT765tRZqP[qT9UX]Kd4CKVmaZ?+Y495L'RK*e+`(`3V-4$K;fWQSl
%;X9F0kFeQhHtEJtGa7Zp),M_-"8Eb?29`nPE0enPKSF)(U-g_ETEa'rC1F-9Dfu:\.#cAp5R(bXgcuU27WX_',MZ>+!-Xebp)M;O
%#h\W'89AMd$ks4A(jUH7'SI_GEZe5B?=?,\R)nYATb'[.Lk?A#\e^mnLDcjIJ6[3"N.)M+S-jrsVnthZm0T"iKprqRjOqZZMoVS9
%F5R8&.#_AgfeCS=6>YG&S>$$:a'=he'qs"8<1#(gYW5hu#o(&[3WW/-ZI>/Q,HE7"JQ!R[0>p+1J]c0'X^Np(cBu9PA8!"e3&D'_
%1rqR?4K%_/2G&G\ABBrNLbW?@<MULl.0bb%>##-$c@Kpt?$X=tBG)RO1^OB/0o:oiGli[7l%g1C6qMo7=#LuF5%d-J6Q*g&3"!Wq
%RUs^o0OKc>QgRm@6dm1*Tm8=gK6.4g0T4-^bcZJg?j56'GRVM-[t-"1NRed_7QIWLJlsku!M5321_U3jc@h$pb_p"A:l@-9?'8UI
%Q_&#D_);t$KR[uPBV<M!2O^CnCB:D`-'Xo,KdN_76oF4#0]X]0?1d2dBKThfGRVY1\:H+:NTLos7Q=`$(Hb$)h`T+p%(tPuOQb%j
%(apHi\J00\T]eKB-AiApUg?/GV5J046[7]ec@cBV]b-<!NRfd62aBoX/"rZ)OQb%b(oTa3M2(<^,4<T"F3QEEA3bJ!#,hea>#T5S
%j`hr_:?L"O57AYoB\<kiKg^]n_EbYeXt(S`?+f^e)^pQJLe^m1"f$2EKPBU)[kNAfGViebLERAPFtuP%$5ttoOQb&:LOj3o'.Agk
%ZTPQE4@\g/(f_"n!Q?9B:dq*r/nW$Mch1gN1?QMD6?mN+'KY;1)^n4q3)Z&@[\6ii,WY@)fJ(+2Eta0(c][Id#rM:BQSFu)/8tWh
%IO-g-)%msY$j/A#:SPRAFqii'd_eXAn[K$-&K!I(QnZ[$3>%R<(Cb2/"gXNrjn762!5UmDN(^IDZU1q8p`?PkVbj(hYM7L)8IUJ<
%O479n%?,(bR(FAnJT5fF&/M3KU?[IZ$m>nicn+<l4cJsrbF0XYW=ot>pu-+R:^r<ZY;5P-ES!'caYH*(/^H:,dK8D5^9-kY;G\tM
%24Y.S`_8u*@$KsqP5tObJN#tGJ1d]S-]6U$0e"-:85b?!gp)S^eY'ST.TI8jX_V1*`G?./)i:cHEk9V1lPm;:Z-4Jl8]A(M\tMD?
%1_tbI8OU509Nj/3R^b$\J;%\lRa_q4oVBL>MsjI$Z'`Q6isI!.!t3_jVALQ?D+4u7994'kn\rSZ8+Z^*UB-ic9_!?Z^_6t/</_YW
%`aCp5\>a`B,;dQ![^e^]mHA.B-LI20'j;sO0p3AF%)rBM9uTN>4dr`^8hP6@8"ObA9khQ00a?Zh=b_`j_2lqkBfG-%VOaI_D'e<b
%Y;CQ^GumOGhIB@k3,U2m.dk][*K40oY'0#<*"SC\H.Rl*UB:,(<)\,4____S.7_=SK4H3UD5'(?D5-Tq.u&RA-=Z!jocY3$<r!Go
%Gi9+.85Rll4C==sEA<"1Oe8d/lr"n)kK"<?Fkm_O@a!O:GqYDfO$s8X\ijdpnsX8YAhFJ@\0#L\o'Ru*#DS1Qgi152AY6's`!':;
%B(:VYa',W.hpU+dEQ8[5d.-d2"#@%")Q:C%RuF.Y1nFc&RM.!N'T\[F68C9Tg(Dqf@(7mZ64cDh0M4bV^2ed\/Zpl16A`]AA]tfH
%1r7&k.W'qnKb,)Yr8/Xd`Our1jY\?BbDR`Q*TbaE7G594qc(]G4E8Wa$9W;]8n<)o,[iGW0OZ](TZAWV+F'*+0&0!ZcAO,TXbK,#
%'^<hI&!fs_?$TS<8>:I7@2KZ;B,'>k%tc_F\s+b>3/@j:67F81"`R+@^nJ<3HE^t<gV""k_SkPLRo3-<s2LB2-sfB!l`2!iOcP$S
%/[&-#P_tLsbmL.+6Ki=0$Vkq>LJl=u%\i6GCR^trTJrLG`$#1GCd;o<i$Bdo5Y\/e2M%H4MsHHJhHNFeVE9%$"Gf5M;qj'BLUYZJ
%>?%s2E4QU#SNnA/Xrng)R+e:/Kn?GP+"6X?iOq]V4?1,mAsf):$Ch/lKZM?N%UH+*22DNO:rbs@4sIn".Pc,&_dp$fo)0inX&6hN
%3I77!0ePT[;<&:!\*u^)&!J8BGZQ^U(h$8OYJD^s'68^Za\i*jL(YDGhSM@qTeSPCg84EoN1ND!H@qlZC=E`8nOc@TVahCK3F3)Q
%!9s3a'J7b^gpU_W,JYUBTd5kEPIS.S`L(s]o!0-iqP\Qm1X,?3X\B`r-C$8\4o-=]?;DP@+VHPV`s%ZdnBN)4'BKlVK]Fgd_P<!^
%8>?ND4\=EW`fs&"0UR%qa=F'Rja\fICQnlE;^"99]Xm68Ar.`b0FOr4a%'O=:u-2)PS!ngDp,4b@>j0/TOWTS+21%i:*DBF_RD'"
%auCPN>.-,i#[7rk0c$2bN"?qH)BrVoEaV(C>=c%%(Y(6jR,N[#.KO-VYG&FbR>cgG<DZK"6tnY&VSG7r>20b06FuH5#o\@F31l]`
%ATd!cURe>#8cBpj>,,(Nfo;_#-ZJU/i#8;*'Q`+^:VN9kMg=Sf+XI1*?CMH<j1rpjU5\8[\:?9E<Z[HX#S6kZjTo%cYS;^@H#Yq.
%+j^kK(1D5%o>^"t=%rs4Op.5\)c%AiEh)\ReD(g-l5V%h<_7kdS.dP,.?JGb>)#.:ehauZA;D8f.H3eO=?7leO.t=4"HUc&29pTb
%qaEELj_H2,EiCLh-r06k`+V/fqJg,Hftqu5[r@Z2!A0)cmKacsbeZ[XDn+KjW2`)3(#CMT08Z&*96@*o3\P!\%?F#%$crleMF%_g
%-Tb:@Z9qktg^8h*^&lh:%!CcBo'e>e$6AEY_)q&%o5k/9>G)4I>eCa:,fPHY)5.]YA$-8;MhP;`4IQfso*6Qm7_<E<%7gk\=a)uC
%Ll)LS;)-eTo5&q\,g?,Fd=e/058]!H>;g*H!4>(ZouEg60en1)@Uc^GkL]dB310BZUBr(E[1[);Q89VCl$5KeqZGj_g8&Aj5_FuS
%*K4giK]jEl4HC0OU:r2!4\ql83qSLB6D10OM2@W2BV-CSY%L!'?1LYqZK*fTFN\Q]Fu#cW0n<!/nM]L\d8>?@DQBmrHql`p6%uI6
%;)09E`K7+C-&Qp?$1_(4850`UR%%3C<F_7kX9l1D@pXt"Fq:oT"V??iX837h0`WE@`=O`c[ZM"hgG)&_A!FgH/&Z_,Lp6eC`'ak?
%'qZLo`"!rOZ^CEine(EpAg^_Wq7a:QZCW2Mitetm$&0CX-OK<jcX8l41XbANc$5C($G)U`-T(I4KCP0fbV\)!^D53lN*&jBd$k=r
%cOn%SV?G@:2RVQ^9LgKr#?!@+$uZm06Sp$LXoMCI*'3\g=:7=bU!^/2)<HaL1$AED[Mr[F2%u(*^)OK$"6pp,jniMS+_WaWlQ?n$
%G_.?q*[0,]:5(G0)^,a),/G5BH+*t@Hc2Es?5XmjK*C>b1G%V`@BR!(etUZ6*$<lme:m3[,!s-2&KXL*i,OltHV%Ln7nk+64Mb?+
%]p+dq9EN,0@Y3Rl6Ef59'=3R&%M'4oDaIVq9N291+Bei#XC2gY;rST$-/L<c'@JC/;n4@;\:-G6kTI_D40`+bVWB()'riSN$51OC
%EhAb<Y#>kM_"Gt&4Nc`Y.$;D$^E3,nmXj&M#=UT]2QTHi^ed@77p]GV;.ejb>*g@ZPm'UlJFF9l3AiOK0)u(6>g]98IIU'kmKB3`
%mtn$K_uR59aT8i,Q6g:Hp3_6BLELmTN1NL*"sbAD':0:>e7)lNTgcUfL&U0F(=9r1#_IiX1RJ80Y:1WHk9Ln-oi,-]+<KmCf?+/G
%Kp[qiiN$Os==g'*(gb&n)d!$``H,K*76n=gJ@N&W^&Y&GM[53pa+++^KAq>C(`CPoh1>l`C]NuK<P$>>!:`GXA">?1nHQSgJ\_d#
%8#R$S&m6Wu0b(^9/l.I@$j@Qf>rRh_q61M(-koRP;/gPq@SjK[LktA+H4K+Mq\g'A-kO]MAn+FMMl2a+gYiN$<p9>Kr7Ve$q]94`
%6]'_.7muQPRfZ*eEnp`%5"r135[h\]&<FIEf9Q]6QFQS^SHKpP9eS5+NmI'V';/l]!]4O:3R=.X$5)WiqU1mZ4C,7g3*7"f_7Ut>
%A8;WM3..2U83L6'(Pp-e7>r:D6AuTg?<<pq\;8K=6j//-GjOU=iqf[5>7t'SGbiAfI2IbL[O)QblX?Sj]YoU(i<B-:3e>0V4`2B8
%;)U<(&*qlBQ,IWX,'JYH;hFgiisIHJ\i<r!(?;os+X33]P<2is.Ol!8&5Q!&04%FIJs^1A3`pr(&\VV(-b19^s(<I!Bojh\8eBmE
%P$r,.<;_U-[pYfTDpcI!L`!?@[MB%(!K/'a7OL`/0rI\^`cu>AY5rAm<X?j*KsBsj!6YKL'L,*a"$bf&PgP/6dlfo^Hq,;i(*qIf
%!l`7%+OM='L=*nkLkIa%Pd*\)Pt@m/\I&6HSM#X=*Ks"g,a'"6ihJsg]<Sa\<"i2*J85)Cp>\/nLS9gJfGGN.P#C)GUibQA<S*?l
%>"OnI<#a`*F@j.JK%Kh'.D/OG8h=qD59.T:>V$6j6^`K"_UQF!kFjjo7*m1;^s.hfR>HT)+WC%CrAMuaou(]M>-1(]*JV!M(UOFm
%3=aQ494XtPig1rF6'X!:V,M6DB1[Fe?#BnVjs0CCV#*&PN-XDB%2Ci=HO@f+,Qj9J7\OWd*./@>`L*&<gNRL[P?W6^-Cr<NN^8U(
%MpNo-n3'qV2MV0<s)@JP3L^^<*lu1I3PLq@RiXI8\f@(XI!&:gNUeD8JBApt`Z""*LOh:bE2"As%Th4^k_g^0a2*RU+:U1JKSQ`\
%8E6!%+")m#)Ah&MLe\%?)aIZT6VqU'5!;TUYc_buend**0_njt,6AEn.E`8WC<6[<Mjt0&NuGpA&eo.=6.i2(f.746QOY105'Vmf
%:isj693J*KbSK%WhAq=;`*qY"QSlAOklXWi]cDllmbqXh<6^\bTCeX(MBd/c,mB)$*U_o@D5#=/$E4Z'dNjj2+`f?.`hjD[A:Da&
%b5ZO;=H2"*T!1Be&2g0eo,Zh=!+^b@^(P>Q%&SYNF+oGCCXMOj(_hj]?>MLaihJYg.(g`163]tg3Ac1IVtPh5Eoii_//BE89i:F<
%O_c%k\2`<[%h5="Wu=+L^]8?kGXb':"pG'*ga>a`P%R&R%"sOmM_'`O%"&:<"dBX-(fFj%>o]Sk(_Y.kmC>F'V9g/\:P^o8`W_Nr
%;!;d`aN"A#P)B\iOE+kpNA3G>"7\Zi,S8E'eY.jD^,6A+9<(uQ_]BtA>>e"C('Jmg)AK5?Kn!'->J(58#R5?h+baCAdG+M(;KF9@
%Tt0[4YV24cI6GCf"W^i9,!nQo6>YXhJA;76+VFq+STi#W#->nm$Fn*K/Y?pIH?(0<_IC=Bj%6V&n5V>.`:h_Z+U%a=n6RYlFu2\Y
%E@RT$T]=$/^(95uDIOU06(Q3t`'@!-T19X=$*PODbA[`0*(pJ@>dVd2[@M:m9RM/1);JVd<4aa3Noc(pLFAqS'f1H8$),g&"%>0L
%p`U"BO:p]@cs+pdT>`5XKglA'?9o8[^pdE_gFNVojk.cjRS/Sm_"VK`T>dQQ<"!s=__>4gGW$2R:cl!n2()8H*3mHpA7KF-#mJ%f
%b9d6fS?OP@gS)TA758!P+jP18r0nm'Anrs5mh'eq"t;ePMR+m4nMJ?9+EAFj.$'M<ZeH`\7^*,sF^<]+N.;`;9S%s9"f8Dg&I+Kh
%nI#H9fFjNhkS^<7%ut@SG$n[:aqg.Rg_D.pd\EXb5a^am*4t4g2[(D4As.d!Q4Sh]2BGbNJo9+oL.lUre/1/nLF.+u:ji2p9b9nB
%#6fZ`(*rbKOAXrY\fO&#<Y-otQtTaMM%L(Ai$5gDpa:Cu".>ZGE@@0b_:N*8ALP*RQP?C;JmYqT4SdP@I[GYT.(+l1^Rd9/:m)CK
%[YU*Wib:`4*6WB@$4e!*ch5F40+c\r-5+L!Ws+?G]cW?52HDHa_Y!'";:%e'5TVI6LUZYf8"E91@qdET)kR6EF5dH-&f)>R_"&+7
%ljjaT:E8jj'I>Es52=L)K]gHiLD$B$a+aYZ"PRZPKqO^^6CDoY7Wkfg$K>1-An$(nc8/9AG)!3)EJk8'nYe0\R$-C;j&"N][4L5D
%m$:Q$,V\j+4pt'+,'-u.]+X[HTZ2e0]J>?'G0\=;%f0ESetRbS-7#@JfR&Rs&^,2-Q(^q.8K7^N'0Rr21_tJC-7&Fn%/D]:E!P#J
%H!i6gB]3Lc<=mTo!//Eo4:2WumUA)_GW#sj6^_TZD$9bB(-Vf9"l]mXbK'ACBEb&!c%S1F1URt0pu"Aq`sY=4P&*u&5^S&;)peRS
%<F-tu_[=oeO(SS:AX!S-Eu8^<Gl*6;72*bD=+#gVhC-:tQX^F1hkosLjg1W3Mn)F\P=In!#E(:'CKkg<+Zj#MW'iH^hc)t,a2TL6
%*P&`@Mb.U&4/?&m5boE#.H%%SN;2oGN,<hq$&-)_K^Q!5n!"K;03lYE/"3>Wie+FO@G7!mKW-E;`>Hk8[qUN%K/#ktXA_52'!=.4
%&5[G@NT(::[7),D*hJ1]\o`:a.cRar@W%$1I6\;E@/CFGH\+>2mi5IEn\U3i[^`3\/.:A&Ou3h^PbLb[.!d4RrSo,r_SU:5@09G&
%=4tJDB%7!1W%h`[U5sh%R8NJhaWfl-.[PW@\L/=GhE\IU10YTVl5%[`N_=qHD;@#P8qBjW\tLZ;h_FI:*ATLR-'#.BCD]3G!A`-d
%!SmjkP'KE-/bhGI!qO_QV<0UL1hVEWE\i%Rk$;F=Z#tlMmWcs\Fbn=F]L@\B$,23Z&s/i3P^eRqg@-e.dQifF_)"$>?O=lgR6Wu#
%7lO7l#<3EQPdi0jX5JR,IK`'PmtpDh+L%XU_>:Tq%A\Yfi'S7o0-M?LK?l)DY;C!PW5%,[/367".tQ24-rEWR*3t.dfOi>'Kc#2]
%_,5B;(Oq_Yj"\"7=N"W1j_2Z%#i`q^_2RfUK1eU(Ib0Mm!6kENeSZl-"AD?6'UYgi4E+7n;.h6V,`L2?)?\giNXmb]3s[rF\Hjr>
%!mD08D)ukBj,mU.,#F.#5X'8M`\%lY]K#\"Ao++W;rV)1DFq>7l*7Acgi<ga$h?oN*LelT"pqX#*5LJq3^f[I4Tt4N'fk%gi]Z.s
%nPlrNi&tAOEBTN[#q4qa![Z\JJo!5fO,tBf+l8t9`jr9t:D^J!]h\*hEH*7BnfD(,HF6?6h@\'8b5IiTmgCOc<+L`_n&6tbAn_Y0
%]CLM>BrWBG*ANQt(/*N5nV^#JM0Y-mCtgGR.FNE"*a)X>l3A3E1#+T:$OHU&D[Hr_`5/Q!=r7FP'WWJq!+S^5Ss!5"5&ceJBHVaC
%@QgB16Gsk;je00r'58Y:_G+!%#)3uFZq:'ZoA1KojS0@I%(O:iM/RMla->=U*_YYm8k^t#+5b%PP%eRXQRu^OCk;[(+b!C>4H;07
%i(0>(b;l`2JM?_SQ:Q'&UpG"F?PfP=LMt]#Z?>XnK3#*@&lC:c-DFfV(I<?Z=&[WY;"l/"@jG;Ik=5b^PqRX*^#4;hnU@3"Dr*8P
%'O?VUc=.@]FiDqoi/=8472Uh2FAeBYVa30&NKtQ(Jn/sOOX+!R=<9EXndlgTM7F,0fRPU^`ASljJe#)s22FrfZr/T*NFJ;@lqj4<
%)B`A=%VRV/;g>$eJI(),6B[!mYWQg=,D=-$\1*GPI,W*_)`.-JKr3[`CnrQi[&N(%CD$no7/"(ji\`'1elt(epZcQUX\_/Q,XI4f
%bMrdh64!?t(t]XXE6n(a:nF87__21feG@<BV20YQT_Tg;QiorMO@E0OL]A8T8gHua"O#g04A6#A623ScqS]+U-8l&3+h$l='o6[J
%<&*rG%0Z?P(s6>2%8nO:D@3^#I!W5,or*rt+VH>e)t4+VY)")+6C<_185L;eq*M;#Lhmc>IV>A$;t)+XY@SUhHJj$_Tj+hE'/o\#
%5_9?"Q,a>WKSWIC/1<Rr5Q0^]TKJ5+b_!o%-^:bE755EGHq'u!oO\27]ke"-1jI2JpEu(K'bW'Y)t#BtpuDF=:QXhb2@3938]<@t
%L_7'\'sfXlcp7(cQc\Ff%FCtj+2fa6iZQk:d#*m-NM/qJ4DqeVFEeu=Mr*@9](?$P(_h'oTsES_6nZKuR.u2"N4<m,AHK6c8McfU
%7-)AO;'JRu,Zl*H?pP(tK`NK[cUS,td9:)_&kH=W*he^IN1jmAfD0/40nKE6L<nsB#)JnjU=]Le'4Oon#/Z(FM%qn(?ZZP-7Q6%3
%MjU36HW19j<q*XdZq,<o]Jr7m@1kCh*g0&S`7R'2"r8K?^')Qh73bO&-fTC`K*ij9)9S&ZmmtgCHUr%)#s(ceP,Es]*Tn)(M9U$+
%Jm>llX<<D7GVWu=THN7hiC=Su67D&L7sqa8#\njO:1JgAPp0PM_QsD<j.ZVX-K9fN*_%HoEGQY?M@noaLj+WEA2/'d:C*O0-3V-(
%W+1B..aZ(;N&1sUg.CIZ#h#l1@;7eV:Ll&PK><(8,*)F0#?o#cN]c8bcil7-+o$qo9#Ddi7A!RJgdKL%5p*,+Ui&ra"TC"DE]Ms7
%#ac#/qP;'o@oR^"lnKfOGh:LZ8SC;cS_(_8*FC1MMBk!3;T^HBX<a8,\Q9/;:@YS#5p\\?mq,$XW2cW23&iZ_n69X<?\u`.k&MS1
%4P@\e.QI^'5)KII4t88_Cbho`3T3oqb+eWi3(4FA%=!;fAd^85U6uE.S3hgLFjh"B#30SdkC<UJ+VVLQ7uW6i<;s8@;.F9cd!+4J
%q^c/'="2Tt0#dmdW1[)Y8cubb_s*=/9TtMji-@^7(QMFZcD;uKQ9J711QhnK2$4Hs'*25L$<`IHN/htaXAq"!,Hr2>"Sc839L&m&
%Oq$sG(.YBjOM9/"+H77mPWm<IXCi\/Miel,`6f]^+Zsc,CZ0W_@`ud[icqWK?R$9"Zm/LB/X]LK6=-1k@A%;t@L>^fM)sXLg?:re
%^)DXOfs(7a19o8$e7CPl!Obi<hadD(%]o*6JE08*4cQI=Q]n?l:\UQN&<B7GKs<b)iOu`\Bkq-I+=M+A.$,#:=9p(;rIp?VeF#fB
%GKC2Kie`HN8Ckf2$+6:^d>(6LAoWg(`t2ur4?2kJ4ViF;JNe@_JG8*F-muJ@,LaLEB7*G-B&-:RnjsCVXW3VF7=2L5!a@2)(_eV,
%AE&mpqF1hu;;>T=aOC]GO!b,dNJ"M?A4,nE7W1#Y`Y:?FO*d*R6iH6knLWB,GJ3McGp:d-JH;@ZOPle;6Vl5toOp(;V_@9,l)&h\
%dSt=L$A").$o;X[=nL)AcY1LP9F_o<*1Lh?NIR2:C90eBaFQ!CN1-!b:R;/?(pGtU&3gj/1TQW`0,05'+N*'0S&29;?bJ.J,n[s$
%>9$?f&Ebk]#:lf+'/FhFUM=VV2)YA11<7Q?(FD?:^fS&j$H*n\+tSD6=df)p_1<HA>lj[Hh%1Sn\>F3p"?A^h>W+8u*YUgseWNB7
%jMrC&.W.`cH^$QC#0'2!Hn\?k8I@qY:FM;g.d>-X&it%i&;,-8U6\7a`D$N0#a"<m'iGdEeulp7@e_g$E=Yc%AK\QS"-`o:9rYsi
%dO=<Ti"W-og+f)<ilhDm]>F)p"iZ!)Ll0Y"TI[l_7T3\PiWV687u:2Z(q.WqeAWu,?E9OCLs_t(MLk#heDNi1*2X`@D!@/Sf<lp%
%4$^[k%r2d`3W+_Ri4mX3dk0P=8'IJ)#ujVoX$SNGj*!7gFD$27<,kQWi(<2:dJ-+jD96&(!:;eObZ,!8+L\?S_D!0K<:n-M"<m..
%:l4UL"eKtE14cCa+/>P\r)KM?'+na$($/7\O/i.T\>$t['J`"MS8_7@3G\6m&XoLi!\J_(L/\DLq3unq=*fgOQoHC0e^,+#e_YpS
%T?t%p\Xc-!m_2g7^\U9b<cR^X66jkMj>]Rke\!QLJ?)25JKamNS3-LV't)(NG!_BX-FQMMJk?>;=r7GPn2<`;0pK9S.@b01Ktb56
%A;hS#3#O^$8r?85f@FWW7,e\N:lHoB8I^*$694(W3&9*6if%AV)`NNk@T%d'N.E79=OEQ[%E)pPp1s<!7hWh^=%4oa=:r#Q!-*Jm
%-:XidO_c$a:el;KFpq7"92#[r![(W&l@n4eHXb5Kajt5[7XU=pPcP^;OgofQTcrWG>%WcVV.^f8d)ZcP_i%d!S&?LPl6_(D\hP[L
%X[-aH20=a_L'Ai'X'+okfC^_t[PZ*KF$]h]3t^+tgJkmCL\="<_ZbBpA8>_Ej$ks%8u<nFr9mqW&QuZj5([\IcFUWfnei;W)6mZ>
%l2CGl;%oN++2N37+3AZ77Ir@p!P\3qo8Deu#b6A1R`)^dF;d'sU5pQ8=V20dl;nK7-HU_kA$t[L^0!<j#&+u<5K)5G>r>rsJb,?M
%ghkfLH@#);eO-5trq.sc^kd4a0J62o-I37n1aPo\B[hZPj5bLA2IW3G*i9FQq44OpIlL(<S,7==FFNsLUOgbWFuS:Tqi/")[dGko
%d#H*`0q-08RneV!JA-t7TOF][YM7(@dCRB^5r[Nn.n[b0c?C;Ul];t>Xn0/J#Msh(YH3c)j8h8+)WS2M5_E4B_n7s[EtgODNKr[<
%gS-^^oGBd5C1(5unO'esAj5+\OdBM/T\B+PBt+,UUX-5*g[gds+>AT_(o*JGV!-411J[-RLBk6CEkF#`S)_,9&]E+O8f)u+3$X\u
%^[?W4miH.!n9NjX`d<2"bo1X%6eF^s<Eo'G!X`*ERN*^E&6f9LoAt@^D4L3UO"I.W\%R:e@Ba;/fB$r81euP[HX=0CnCH't+a?\T
%iroXJYCu`A$AFmgU+)I/p=jESS?$]M7`T30T6W\o2[+/LnA3n_rLTeSYC1NM)9Q)WF2QG!YBlX,Y7OM#o@`:t"tC7tD$scf6ltRn
%Q)hY_lR8k+,:DQL4O64&a8$>5-tcHgkY$D8&KmEWPulcRBHdh.BPt!Z[Cc%Xa5Wd\;P%'*MqG&@J:)nf/Go#)FG/WEN<<$>Sd-?3
%nGIkq`j6ZjoVJar)VV=ZVpiZ\/_#oZJL7[Nk0lA:L!J0+6)i/%YI!qOIeU+;O<!F(\:<+_qrE%W#sFnD;7CJYD0P!A\$6^7dNG0+
%rr.f?j'XT>OEIq"bXsa`Xo9$lP%hdV?bfg/Y'dtO"aZ3?'3/D"f0s>4mlm:&)]1eM2p1s)p[6%AfGj55'@2\t[J5>e]cN4uQI2s-
%pBGm9kQuNq^-'"2d.<A5$JqP&o[jo!2e!.7/NKIW]oD-X\(W8UpQ"$LksQf0N[G>dpMA83DN7G;6BPN"5.ee[o8s],9:fc,$$gnD
%`8T+."8^I#08A&G3VF:n\Cmo<?NW`U?KcquAe+$,CBnV/k]tpkT:XB#L)0Spfr=.iE0Sl4,3]-RDf0O'D85B#_0]5o<VlLB_pDio
%^EU,gAS><VT,?s_'07')TOA]YY7(6lq!MR(OUGUko299-?6?@tT_#c#)@_(#\%D1eherq*ZZV>&<Hd<<7PVpq0PsbNJ6k_,6#@S^
%Y6u$/Cu&T7Tc4Vpqffrb,KJOKkT#hHme6%Wm7t=gp0UrGO0ODY:Z%QY7@^/P2.Y((^c<#H%J/e.=kHP`RiZ'tTkc;_:Je*E+@,B&
%i+3T(;nMa-G15@GpoK@Z.?C%=fYi3k8JK?qeof\L-Zl`Y5]%>YY7'sdq!MR'0op'24S2"ZrJ?5C^[?WtEHojd_#:jB)fP]RFE$.5
%%q0)o]^[-f,RWbom%cB-$9bpZ%r1_"I%?7qo=L'k"Z18+pCH"RmFe[YhrXp0W#OBM<,[!@XhScVnQ9#9$Oe(`$*32'$KL;;D'L'>
%ZPdngd;<_@UU>T[L\,lD".^Ms;7CGXD0OrS:LaNNHGlLQYf*KHVL4?;69OV\B-47KYZaoN1K*`HPXjfg)nLWAi8rW4%/kS7K\VgT
%fgdPP5@X<ECs%LhqWi\tZ>8c5CbCC```9d\\lXQbhtcJG2Z\&OMKML2!L^<*6TKC_?67?'pA00sK[c+Hd76Vf^L:F=BZPaPl0IN8
%O'0s)`TBM\oU>I&n,YQB5;`+9kW'n`Pa9;a3nkb>G9<<4FUcO;mgqt'2)`/8"ZchYK=ZL.D7^I"]oBErK&c7.Zm*aeH#5L=F2pDf
%YZL$#fI*]m*3Y8)*T)8``3Ys;U0iAZPt8ZlI%s`6TNh0'b6.];B1"NBD0G?'B0XC&HpP,CO%1:ml.D\VrBEC9JY%Oso@Y^ESr]C<
%A8K8\a-J^!&KBYAabJYuq^*/?l`<G^Ce=:$8Q$ST*g18Va=W[eCL?MZO6uo:kS=9H2bqFGH(I0PlgYSAF[o(7j@aF+>$M<=aC0(n
%)F\EH9%F^*k1H[oTOXB2BGa><D3#jJ5Pno0U$*b;Yrt;SrSH,2q6gMg2ogPgUMIX30tQ4gH`GTA^Rdnr\q5*?>:Wbc.YV`g*73*5
%#MiG/o=Ad34l8D^Y'c._I_GXj1d9[?XOfV^q:u.4#!T6Fh0ADWG=L33]#3`(BiCRU]lG8=]#?_,T(5-R7O?D8PFgBCA*Ra`@<@&r
%[D#mu@@h,hi?Wg,!M-!kdG;V$Fh8U]rV]gKaC07g**6e-G!She0mD9_3Il0%2S)VZk@ND<3ne\C?)W$Uk<+6MZFWfaNRp>?b?-m*
%ReOI2GN$6=L\Z'LkqKkMq.c^5C9K2Q*7i@8*DJTAYa:s5D6)stmV.-$j[PZlqhP!pZ/Tm2F:Q9BmKW+24l(AKn)l=Kq>A,g^K=0P
%*?^Fkk?>mM$hP]W5A6EWceH=63kfnW?`9RM?;*,?:N^RTIbOsqT06&\ms3aW`ER9<L>ai#Sem(AnpG#<2_WOdK+9^HVWVf)<?3U^
%0u!?hm9f5]I9uS3k;Q2dNJj,D*I-sao`%+ObDTl[Jt\Hlc4g0\dKtCcH^sRS"j>B'ZViiALMSBHX+#J?]/#t=S<0624F:`fa%&IE
%3L[7I\,L[rE_ra*H=fq3qgGi`(ITb2oAj=CjV5Ah>GjkldI_JZ"XpB,SBl)=i9)%,UkV!m*bsj-NR0,8Q5n7e?TeVFqI?"m1%8CT
%l7W>KlU1Qd.THEakWC15<6G72\hIN`cQ76G$J^NJGQ0:$S!Gkep&[B$q*`cIj)qsM?[E_BTmS^,?)%/%%]cVL&!9<Ip:NYOW'4(d
%kBL:>kP4IRG\'^E^6iD\*`^Xl/)P'-0;oib]In$(p\on`f_b$j'@2DlV>,XU]cN4Up=$?:pC;GVkQ>7O5+[^XG0?N@,:=1a/b/&0
%.?8>b%QIX45[Sj7<AL)Af-:O/Uj@S;WLcTj61o'8/X;oEHU?TH0@+Mrn9j8LglgjR6b"0Z#t+#laoT3L<hiKp]#jhCo_;Xh:&.'?
%<K80,QI,`\,pK)\'*U7JR-kJ!3Q'2INfP=G1@la`p_BJu4PMd[d/II#IpMsJh%)[GV2`5rd&/\s,>XZ``ocm)qHM$'?6.3&6r2H^
%^C?>f'"!$1eH_p(=VQEABbG,dUEG7-d:H#?9+V?27ESp8JS_P"Aeb<_gUPm=\N?k#!8b^`4&iDT]OHVC"IfL.?8F2/j/!XFVYpSK
%R::\Z6,\)Ak=TmYqk9@iGP"7Jn6!"N>JLb/V/%c))%-pbRU,h;\<foB,8t)11HPURm"\.36R$;iH--L0APk=0K#\4,$r*!.OT%M^
%941n%DFf[/5r&-J5q!4de?nimKd*1#k/EMUW7O()]aPcn$p6QE<kJ%-WYq1[p]Id.B";L"0KSIg_9*k=,*+[bFU>'q/gF;mEs.oY
%!CSshMLmhX)\EOIjai?`pFdkG:D,@6-*lDd43L=&,\PY<^CC$0E"^qN;`K0Krqq1R:!``HRWg+c0/+YoMuOAp*rPmN\<BWj>n]BB
%@]r\@6hPDQ\V!us<1KXQ%nCb+<@((gFc43s`34s/?WLLP.N$=RI;?5H<E#-*^]6h0k6%G)i_3.p`gPP?(*hWuTk&,RZrgtWi88_-
%?nlc-b3c<bI/TpJ7$_Du%J<u'V?nOqmWPXC(BE!H67%Nu2\Ob,Ri(VAMH[$'en(Q]J.1WGSI8o\;o1A5onjc7n)oH^F\r,?K"Ri]
%F&JA<"Fd$u."?&qCg0_L7@gOiEL"![dZK+))TmbJb['mTJ4+Ab-.-Ig94FQ?eATTo$cXE=]A.aLni7q>Y)HTO`mWGaVTV'nLqkIg
%=n?n6OR+Et&[S'@r=Z&$-($/<)ZmZSO/A6q/b$oFZf[ia(PsFcWn&;,E)K!L&GYGIWe;eZG=a#;"h*C!TcO``aHU<MmoO'egpVcm
%#0e"8Eh$GbpL88i[*Z7[P?#jDJ<ogNJfoSrA]=1+'*(-;C3[rn77Zl"1^4\1HJ\897-K(K"U4r?#Y_N&^-]2I1AJ%DO2[d6Y+!0E
%Fh8N(%[:j`?UE:WPj;h0'-L.>!\+KT#,I7&_LI`#hgEF*\)$Ul@Z<koJ"Ii90%8<XTWeNV-hO;>&D6,HK;9id#`>?6Q5cj(_[E_8
%Ud;hnEof-(SCAA9>2hQn7'bW$!%8X.dXM;.Y[7"+n!`Q[<!8k&;1g;?j7N.!<7r<\EO+B@ln$\TS&1p$Xas#[5SOFT2\k$lnuK"=
%q%p"#IU`#MZN-/P(=7_*o7@pSm3Gk4r0t=!?[PfG3<b"/14LY#]ibh/a2[HWKFhoLT"XM!4I_F&>_PF=J8cD=Y)V8!Z+(pLPb`j>
%3;"O,2hYt!Ckjnc+AV6XSgBHI:[0AOK)g!>bVU%LE:RHCZLHgK0^:F.r^6Rg-S3^MEf$;rZZ8JWYm/61TB1()b[)KEK5HIfWGPhu
%1_G'7>g'J]fmZ\<Qe**ECW]p5K9RrWV%+&jbDKt!@0_E;l,#3&Ufes8Y*oFCLKXc]-ZDBM'paB(e6YnG.B$Se59u*rk0a)=p4m)n
%'_>Q7BrMS*LLqebUGDa`k90jS*pnA/XNT-@0kAMrj6mOnA2,UWCSGNVid4"`*`q:D=u3Xiibqd0'Cpo]UKGL/6\qM^[oL0Pe74*1
%:->7,Va/FC$RmdZ_R*MqmT#n^<U=g8XPs\ULEK$aF/,``hD]fXTtU-!\GtNrT6&B9Y17j2_aQ@R'TV:q5gdKOZ&6.R<q7"X*X^bc
%I!kgZ0>nS<@f6j@%b)R7G:8Fg4H9i[f>bes)OPaMd9^BI:Q,kforn-f<rjW03ftqX^U'^=W\SZ8V''@22F18<L>)SkT5+(:@at")
%/ABTmLWF+#huUJgEf3487(Jk"jSms-7OaOJpTqM1IDiM,i$`W1hdZP1<gMju!DDD$\MR<5N5*M4Cc^Z`.o]Lr!&C>Hf,HcA(@XSj
%N:7!c$:JL&;)i"taF/;.OZA*cpQe'D%$E-Kgdhqs49RRo_3&*\efbscRh;mf-nC2<!1piFh@iWQQiNsC7>S%.KJ8qjbAMs^*t894
%(0@JCBgLddX\nbG"_cAbU5Wa'06LCH,%9#a:WEiep!qiXJ@,#P`FLBbk8I;=R.9?e.'.3%N.o]!8-"2[/C!"!:d3,>7gL4s^,\qJ
%'9[i9KaVhM?<eo'Jl9%M?;8<H@>QHrMMjpogStZC:-r'BM7V#$@?;i"*X?e1-C$CXZ_L@VO6Q;3"dLHHXZP+oA>p?qdc&3!q9!@=
%WP,6RJQIh$eJrS%6X,3NKq^ITScjiXLnC-/3NIWhY?c1YpiUYoUqeRDH3P:9SACg)KQ^-\Q@Zm:BKRc;#VSnK?JR](1l\(M+#LkL
%p570<Cu:K-NCdn:2i#DXSCsg+j5&NBPdT:K+hkl*(&a/e'jMP+b@G+Q4us#sRZn@JpY`I!`Q_RuR=j:.fqHB%\AaA\LkQg!$4p[F
%)W`$CmKh??[jYL]I)??kW_jq=cnD*8S)@h/`<oF;Q\Vc^RKHN%=b9+^+t_k!EB.O!MqElrg6Y:DP"-S*Y#R,)A=ldi'M;TR]_K)A
%;B:N`^rcK]Ys+<nc5Gi%5nAdc_6K33_XBB/p[&#b(R;FCP"??%.[@&G'fkmWD7Ym4N=[Uq,GkO>n&9nh3rhJ!S4&8g"</lKG'1uW
%=a+FEJg?3Sg@SAb)Mf@V"MZT4Q!FEDZ5J$(P(fh2atgKS%M]2d-=>]"6A+_qAarEV68l@.$O2jG\ktb%Y*.:aQ5BWZ%$5t^>tpS>
%*[2(PC1c:#8^&C1epS7LmHe^F8J09\edX&L!_aMi+]88:McCjuLSP!NRnaPp0T^bl)hJk5[i0]g*UX?%[MY"ND9l9:Pp?`ieINEc
%Sf[$n&deB^ESY4)AiTt!<ap6o9%8`36Y;r$rJ^X;VA4T;,r0,^ed:W95fEl^,2FXn.;)$(J-H'5c((L:+g"9L$Med,Mnu(g>pO0p
%!><3\+EEqRC9ephCebisRJ3r7H^@ERR'iBP"U&m9coPs=j3f"He9Y*i&tlf,]-tY$Z+=&j!8Wo?6)8-(o-6dY)pM3nX+i+GeUe)L
%(9XSP2e4e4A5<6&FnV+hSRQn/M*bAJ\g=Mu3a2sTR]?diTAW(Z0lG+Hr54b#<6O4eUX3!Wk?TA6pc)=e(`U#W#>0Ka)X7rA[n,bS
%9<HHQ5m;HjOAVra9U+_Cg+P_A?Y&aQ2j]VJ`EAh@Cf*>EZ;dJ!lu5!3kOP\haS.a&?g(;2`<@U!,Hmj434UkYl#WJK*q'jQES(AF
%mi,*,h$V=/IgTh`4,fD;/c&bPdg2<Q#\=<oVdOYE.@7`?ab5QFam6$\$]CZWX7Nh/9*u]^[fLar&D7,P:DTAgdS?IS!U?3[&[WSe
%LB@4.hEPD[UMXQgGCVPm1<b#50Ms'G5fT"\pXSC.MTX;VVVSFK$P\UBQ;gpAZ6g@[\1YmliO)rW%&9!njnS7U&uo1`<*bE*-rKf,
%<&Ou"POf\B8k'OlHr\HYXLSV@@e6bT.1i?oXu@@2:fgKb$(VfJXYcEg"5Fp68Qge,#*)r+?Mpn4aq:d.^8cN7J1S\hK7^BEe!7<e
%WhQ0V[ej%'JuI:JG,FBPh;ZuT/2&V$""KN\Zu*0Y_0AC]bAaFq[!7,n(=8Sj,))!SkcHtN.;D]LfqgbKTcGq9aZh#@"pK]8RS+t3
%MVm,/`q2s]_pKps$BhqP^.,C:)ZMHnGWr4MY\fQG2fnZD6,PD*<]Ef8$Y+?l=+$be"O@sn`a%:-f"F[d!ZE?f^9\ef(?B3:3!P@t
%m]sl\[Zc%?A?!h[_ie%WGEuB7FK./8&#.1^>,:b\>FZ+;B`1OI>c0.:P'HQ]j)$SlY45l3nc?9qkT?<sIau*DdQ_]7ND=`q_bT:;
%*t8cV(jTQA<i0N+<2:8FBCGY$frBp/585rVg5@)JG<r65@qVc.1dH3rnmn)rC`*G%[>q_Z9@hgHT@A6s%$mEKG:VPZ9SiRU5JEOh
%h2bH"*88S'bVHr8_=_4gKG!k+oIc\Q9sci^T$,c5%R1->P%m='9`q6XDYWk1?jd/qZ4WB5q2cLAi<U"^`h?*+(V<#[\#ND6@IoK?
%du5:,7HY@X>Z4#$VPPLJ,Qqsr.H75Aj]<+/KE^WD[07bZ)USH_CaaD!N.nV9Ko+gk,IcZ?TSj26MNhOaLP+_Cm^F\,F1(7f?$.N>
%+Q'&jFQ=TVSO31qTgfL%KXki:JgM$mLNT=<^X'!Z*&9->ZtQlkI_Dk&c^,8uffadI('&IE&d64-k-QgpI\>B^iYr)4M;4r16K0:p
%bN-K?NBdia/1\D\[]:u@Sj)ea$aN2hC[0BX+<q)ONT/^j6Ut;MX&9^@_&$2$6L2!MZ2KF2gO*2-MP?^+.9St@?!HB&R@$5_r]"l.
%NL<.=g)O?u7%g3R[VAE5N[FJjlI%dMI;PVjJsSb7<Q]#E-B>%+'-8HRf(bq_a`"F`oD!Gt5Bj%X%M=hG,uUG&WgfjGUiN/Q@l(0P
%O0E0"VbSY@hRsGFTAS*$r:ISb2;7[X"Zm"2nXt\n"W%*=+gad@0gq0]*31>9iVrAA=$TRKqP+"#W=ZLg'qm=oP2lHLYH%B(da]RB
%k`Wu'9gcmK_3B-c7nQgKGm*VR?-:T,l*<s,:]di+5>/CM>8&V5[6JrHA\LD-Pi#k-GkrO%HHl^CVl>q'hot9HX#h58?9-*^#%0Uo
%XfXL>:Ro]BK_`#,/NM(-C?U9rm@BQ`eRGdl]AR77HH.tsr;<Rc2uQRtL0XF9F'q_,;k.nRgd"KghrK@[G+ga(o<-22$s/d++':Yo
%]s"&h15!:9oS;V(7@ddAI%K<A4slr\Jid38Tn@o-WQJ8`Rha9nN=$?9nca?qZJmbgm'rip/1E<,;?,bkn1?BV"N<R>>'68nkf0CM
%jPg?3L5ZBm,iEMb5l[^jV\f]2Hu7uG`hH:P!\Ms!WF\A:9b3I;$IL':@B*RgV>b>8'qqWiM$]Wg/"`D]6.7nXMQ.;c1QhU#E)PV2
%=\;SU:KF+<To"]"5%=f\%2V'_R]Ok-^.u/pDr$D*%kkW_(ZpSG>:;#/)=<mm,40#Ha:[r\[P3*E@A1ee2+)K&l0RF^pC[CsGuLP,
%El]lp_)0'VRNOgTTd^`/cTWa-cfoTL%],ulj."=XUS*t^Skr,r,DG[m#@*K)D!]@_((t_q]hSr_$Q]L!cPX"n5fsbS%%BLYD/h2:
%[C`_A>C"E1/QB\Z*^7YD&#epB7e=4N$=CD7L%Lkk`\9Y@OspQ)s&^0DPf+#V8(p'l>@]"D:=6E$A%V"SH`(UO&')]liamog3JE2Z
%,P>l%PRCM8j@:i&0.00^cgg5Y)<rTMeL8@0C"rG/+k9=k5JHB`8"i!=5b]O'68MK0b]*J;D6nD2j'<E!%R)m_LZ0i@Tq]:&8f`oS
%7D&K8Jn!$\Ts^53G0CM\=$4X"_?X!#Y1Jl>7!n=IX:bG*^D3fRZQ\!WZGM"dVQ[6=DS_csO5>m9)'9UeEY*)NZD"QLQ"1Sn6H8!2
%YX@G:)/?#"KiG&m2\a;V!JSju.uqs>e.Q;>V-Xrgl[bZ+oUnb\X'QUr$k#IOe)+e6PS/:A;kY;96^sWHm_Mt<l!tlcgu_[QSenQS
%AYC<;Z.O"S1hCI$(cIuq:K321eG=n8naM:R"lIj:*lY70hMMQU:M;c3Xn+BFg1#Bola%g:M/CjA37KuF%;?jTq"Ii<osK7]5'pSU
%if"Omd\aQs&/arcAAoMqKk5K(NV[[L?Uuqn*f++MZRbaX,Dl&Pm\V[1<t38-+:-3cc@50gfComB<E$4:;1PZS&lEm0BOo;WK=++d
%*g#BYi0)4U8k.$^:1[TLfnCNMml*Dqi%.4H^?_GVQ.;RT&mS1b*E(r6\?,2[(=1PQcoJtbXZHS8-^d1)FQ]Js<1oS)1oaa>fe>O1
%^*B^)KnVkZ'i=2$!L)M:54pJ1G,Yqm9#5^)h+]G[3le&:$7alGFbKZD:GKP2HrTWM."HI)G3Z*\?Z"aCa7!W#=bC:ZYJqS/ST`o7
%m8ke^B168/Uuu:N4o5rN6BP6CX/Y0$TjC;('=&J,iRVIZ4-i!MA)ZdJ1E4'"2XGVW]hbElg"/Eq[/_SX.n:H&\DZ:JR8@U5`o;kG
%&Lj/b7I]#]%NF4,_#]5]PAg;D=qPG3AiH4o^ZDB!:<k?!6d*fbO48udjsW(G_q302fjR_\s'oXtl.S(PNGW\e'G+Mhg"TIgDm0PF
%HqSHK2<iJU'm`g2m@c>1,4@r$aP(3-6MJQY5+Z%)o\S??MSMJ_T`["?d6jU:;+,,b0sL&&%9C0k_dZ2p)Y^[81P?W]`o;-"%+[Je
%)T.h*[]MjYTa*q31dF#0ZYBe"D%_/W!@d,nLLaKE!]rTC<<EH<ctDT1&uuH(_g?Sp1nIHUZD7HNkZl`l./-m$VUP%2M\:PV+-7Se
%pQH3\2&JbMQXgWUR75Zi0O80UFsAbj./^[#49j;Y9+jr,5diPK*VmfX'N6pN4lXXSO$<&JpV!mf$@2Ni\l*$J'O'1';nH+k+3H2=
%<3q!`,`QnuQ?G:th;W9j8_nE0CjrhE*`,uoJ@/X*fWj#;m_Y_F;[WnlVds9^P[L3m77@%2'VV"@[cdn_._k4cMuth%ikd7+C/Ki"
%K5DaTUoWaMVO'$>#>1a+/"9PG]KDIiUMuj%XZArGlfbt@C@>T2[s5-"Ric_^&K,"2>aIc:`YHe:mDQu(O?se]#+Cjh*?2ZLpnjrD
%"D,2Ol,2:3EgFm<4U^ckWhC^7$DD9K4sC1td\500MnR0sF\!(@((&-L1QDi/)UY<l`;@^=F&s+!Ue&?mP8u'T(-BKqT-u;H.bTuq
%8m+RpD@<BrSW/Pl'nI=*2Q"XB5d/VQM5S]+\5pHga@c/ZFIrat[:H'G%>QX@8,9S2hD1]!r+tcZ<uo>\l#1+_ZK57<h8VoM^4bKp
%_U;iVeQ>9i3l6t&5`R$shhm`\QgR$Vi`7kDfAK9++^.I/53a,@dKm6F9jK1CFrXGgO,5BW.aZI[J\pM/_W*_H`dqPeH8I$]Yculf
%>Yi<n6+9/t;2"T9j4Uj"$nJ$W@(gcZnq\850`2hh)s'_:*tA(<ak1t!B#,CtZHkIE\iL"m<?jpUi7VF3D<WkM=Z:ZAF\%:fiGuGT
%Y"e%lE]cE'*!M=u>W+pY9F01S2&7i_LO($G,,M4qUC:::;eE?gS#rE6l0]@a'%mmr*iAAh)<YYV`D1tPO[6J\P=B$fR?0Qn?@-^X
%7rm[gF+TdT8/-M%jpjt8_<[I?JZouO30LiaEUg#%JQia@mP/K.;69:o.L]XbWn*X04YU,crOG3])OBi!O9'PEmAuSO)c(!61<Ce/
%U@OuGm>h`c6A7r[RRdWMctk01)b2uR+r]7I6`m8kn=cohLSghBCIP.E2qJHd7ZH*DI[2E26Eu<2W^(^5?W%+Gr(\gVM77G)IQ2h8
%jB+gTG8NoTqZfBR#);M$(R7g@R.lRqBgaB&r\:G\E:'`nLm_&<NW<T:V@$6Pqak*9UtR&o!(hEkPX\]>V%7USQ37B<Wj(aU)bm2J
%Q'`Kd?N;OH"k0sA.DPah1'#>h1-W8mF,8r\;U,iagNG\\T=``<PG0fCFp+&I(.OFPEiH683MD83kEQ&k(,"QY]BcBqL!9tc<l#cL
%_+4\S=OhRTL7!*E5Ep?Q*R.co2p*4_@d?hj,S;e7+es##kobB=T(qT)39B-A14a[:Zo#P!65ei!Lrq@q0OGVmN+VJb_691GkhTsd
%OV51(Ee@M.Laa`oQSTm)@IEX-9ScUoV`NiU+<hGJ,)N]f`s`bN$d-Dl=.;cE%6>E/[`_nT@R0!b`-U-qR$En;;J<+PJ!>boR!0=u
%S.M15Q3+cL;8'7jN4>:#Z,r+#^=0c1K)fD[F7%A%Ij+,3-,Oaf+=,DgN7qtVngP`]3.q/c"C&-;pF=T`Yshbf).Dr=d;>j`8!:%;
%dLrrL$Q0!@#UK[Q$6(jpgb3KH7;W]H`bB]j].V<qrfnGWJJ^PQ2agMMge%7.HI3u=o+_+_Ht-)?1XXF*21/O:jhuB\29u=`3R=/M
%T1Xr?ar9\j\>b8Tg,eYlLiDf=L%cLjp[+JYRN24:Q(V?F@U(jbVGrK7L#ck]64#FZ%O&3sWH2H3_po"cP[i3NUIK\rOt(Nng(6uN
%?Ui46nu>=B-HZWb16F>ACQ0<egr6"Afp0^J>lgEHjFZF4VijTU;Oetq*J/j%W/I`n7DeB>@LVI&kuj\WmY[gFjm(\^#at/,,f%50
%]AUsnEhZ%e*6$=6asZ=l\Y4R^7HPgM#G&Urg7#LG'8jrODXOS\A['hsE9;p-KdlScdEP"4B-=VGh*&bP_prONnrXZ@K0`0mj%SLW
%RkgRH9_bN!"L3Ruke+rPHc5`=pSt\>jW1Ek`mC8lE@Git#R8KM`/MNHX^db/NAcer^)i#3F/kk<[(Ch/KO0[Ij[Dp0TA!Y4B&5bj
%Z6$AcHBq=L26GZ`ct5JSdcFS_>(Xh]?eTWHRE'7CZj`uemcKVYb_fMY5N#jap0^dS0dRnQZhup9cHuX76l<pqEk`hQ;1jRhn>HTA
%>[[a#<LEoi6I1^Ch1?TQ_#VVMeP+0/:5RCnKk6m6>MM2k`UkY.MO8IFe-]o[8\p]7;@)a=:I=;JG=&9?):3D@<8%sI(-P+Zn"aVI
%jO@hn'?@M,Q+k;CG:_mJe=%lE,SeH?%PF[a#TeSRnO4+#+*ldU?P1C34KP>i*0Sue(pa72MOsjH/7P+naIb<AB#It2hnj&lCDhmG
%igU3&ddMpXedSKJ.g#otKb$=ngU>D;i5YF/961"L9-P9R'`!071!Z?>#h?I2oMRD.^.mdRgr@&YQ6RO:EkVnRS6nTeO1^dl:NMCe
%$2uid8Bc9mo]j"N_`"Z.DbOr8fAW;QMl)4#=bh)CWr8Zm$5=erY/6>7lNs9EeX5AeI85\IXALj&Wjj*lN2:c<VrLA9cr_M:Z1#Xk
%)r7>=.88ET>QUh`J6Y4I_Y^`&lg7'&M!8n2WQ5ip*[7,T<U2=fDJ_,YTl'Cs.*`P;@7kOpcm8?o+ZtNHW?c\>(R71WPk'=m9&8B'
%%nOt@Ntt@:dDnmWIFc'%=&5tJlH2[WK?luYZ:V*lXa#'6B9Po/E&k_T&A0UsZS,T#;Q70:-:4VQ%OY5GWq<^!SV>P&g<<CEi4I*W
%g^QLnd!gTE]U\h&>MRV-Ld'0`e/!roe:#L/c;VHnHP`,=V'1!]9'eID\je&.b2nWg7HmH$`o/mB];#!Ljoj6d\sEP!ktr[CZg*Vn
%@.itH$[Nf_5!SAcami%"JbYo`cZ.;I&h-)nU6N\e?ElN_TS7Sh*</[BV\(`Z5'.m9_kDB(>m_JHm3?%_7pEmc_df=hjFC&JO\d4q
%),Q^U4bV2tC&(:l;/i^[f<D#'--&g;@XC$bVmn^r)3@HP1BWqH+eTHGR7Dt'[6(dOd.!/PWn]H+VH"ton*"bAM<TeP8qjQ^CC2bb
%Y$b#7CkYc,nZc6Z7\Nai0HCgcoOhmoi99SmC/WrtK3dTpF=*@sSmc@fC^$s[8!'p&cO$u(SK<GriH=63Ne1>9p%u+F4Co&.(J9@j
%ni#D&a;9S!@?<i"a`7Dhi^pYB>::402%4O'Y3Ud5Eg1K8&T91_''uD6?:BaL0OEgSNtS?II'.nJ8uW7J>8YUF7gKgZ_56$1jrmsW
%igu6L/'<V[=Y/=17f-6Z2,7qQ)I@p'GtH`eiW!-Qi'qX#Eao`br7Qq-72WE;WjN+5^#kV!+sIYE8M9h'@@0F2b:\Q?/gcVTd7]n#
%L`IaB!8^b&9I!L!he2Z--\t0:kuV9R\MX%Si8PUY'R,d`Q.='W3m?giA=Wj-chYcb[J1S>:LXXkm4U+VWTinSYgtOqkS;*M[0(tn
%/J<'49^rjM4#J3FRen3lqnUksooJ*jWAqi_a=4Ck^@_-\34\6EjZPGW(d&LpH8ZM+7P348ZW5d=KR/:[OQ>9HV!^>nhK$u)kmFZ0
%'Hb7_ouf+'eipq[(]!WgDXhGZ97&s.Q-A;1:+`Q,m=l"p"0Y8VL+BiS;s0Nro@DaD6R5p:[*05XWpg)sprIkm">Ue9j[`pQEY+Ql
%3?u1Q!-@h1Ap,m\esX3H8-"6]R+YR*e#@ih^*mb..![Qj0!BL=YNZADdUJ9u'^MaCf_pep1.f^>S/+b,OS?J<m\A,Xa[e.?ASZMc
%as.-PUnf^@LaU<KR?ei[QURllf@%>C,P<\bKNL)e`u)tDcRNU[:q(`U;eBjQSDIJGm*Po0-kbqcQg.(Z`NZmu#k@!19'!rHZLaRB
%5/Z:m3aCB*dJ#>^qLlChdfu[&k02D*(mo@a<[+%Bh9k`aAFO`q(3"b06_13Y"lpe8Z:VI>4:Fjk(M&Aie'NoSVGUjqY:D]9Q#m(P
%QTVtJ=UP9#dTMV4\V,':coLo+=BsG,E4V.U/2G3/4JuDW30/*6d`lJ%Bs_Mi*+$,mU&E\h<_:tgs4g:3&+$qAPc`ftmJ!qgDp`)s
%$H,Gt`(qVE*?.m$0eCt=?Fh'@TI>AS6A="VDkV1e;q,Iq+u_5c`9YB6JeK7N9:;k'2[pC+\C.:\L$Vms1_:SrcolBrj?/@&Xh,d)
%"TD]*n!>!!jDM)CWO'REmmAG(#b<6U!?9IQJ!dWrhg-4LTg9]@lkAVPIg`rtb`/(%MLc=:(,AIk!6*pBV>$s%`F[*"IJrNh*Y)JN
%>DZ^(&_k(";W*dXBqn&EY,[e8)0n^XmB^M5-!#UHKU1kXn?rpk5ANrt)1LgdMur@pl56OU$tl2tN8O3VI#bNtmVn(@EQ7K;#^afZ
%g(TT8.!MW5M'ja'OYs+oJ5&f\Q]S\D1eNNT+aI-:1Q;!;NM*IGOPqR%YmRKDgBc&HDAJo)#/>?Tfb3*6Z@7]hL0>dK(ejqAhP3Ph
%c%)f0-XW]_/T63oV``c(8h(h^KcDpl#CI^uf9K1.mGph<]e1mPB4aE'XKH,_Ml2cPcl:@X?hd1Wg;L*N$SkH<HZ)%U0I`6EMp0o;
%ZK]a/FqPUD4db@NJZA2G$<W=JgocUtkV67dGnol'Ld79b'THWWQ\)^V=bR!>^t?2:UuF\.!$/\-B]\)UEJe:H975qp]-AN1RP2!M
%>'9?\`UqmCoqKC`ZOUEF.[s(cJE.8(ar=L&fiHM#[bka6`u\:+=ai7;$;NIO'S-LkfQFtA=:l1J+mED84<9]Y%F`E/]uBjK2h\"q
%pdqNA.<qTDB(`4l5ka/OXp/'<bZ8)4S<<!ZQ%Ke@X$hVB<RUYE@F@St1=0o&[GdjfPL28B%pP8U*aAkK&V>7NqC3R(fDq:"kQKUJ
%-Rq/$bCRdJ=tq;ql995ZTW#NCA==AsR(qnOBfXC3.`'VN-#lbbG!hah='QKbH(kR@X6/GW/!bmCg&h:k"E3fUi_WmRr%RJhXci:.
%H.%hs??_4^<.#AV4/SjT/94,uc%o7dcC"oIc/C&cefdp@FL_+A+hW$n0HH8)5Eelc`X@,E\rs:J2SOE)U38EO'Sa'HSSN'@Zap&p
%iqUCX)T.6[EaCV5lo>WZ(`Kr2+I_;.Kn9kl;k&(M9_8fE[bRo-fR4GoRiQc4=IYd*46ci,KtcfO,pJRD8*:9m*rZonr-h!iq0[h_
%SA=D`'bX>EQsuEXputZ3QI_n7d;f'FF,#f8e#j''f)II/gYj<IhMJQ$3KhSEa!3Db)4]qPI[76!C*0`I[/D29Q0uWchEJhbcNn#L
%9hETu4t2(URu&7eMLZUl/p_5S%`qONKA0<VieFY7[@V3f1A$@uI1X6U)GCtm@Qf8XG%Cf5&Dfke1nYW+khV"6;;Jb1No:Q+YLAo]
%^.C_?l"pjHhN*UK;c\qbINi8u:0Bh`,Tou!nC\^oMVRj\iKnJ\i;W=+ST<Bs,5"AZ;m\GOl*7H5DMsPuk*hD&73\?9:kYfCREg94
%N]fe3nQKqL4W1elK89,HIq'VZndLM<Zm7gh7(#_m?b:DKDFq<_8sZ5]_lSNB5L"h]%=%](OVQKEoM^9>$i#K>&,qaN]h:M096N1g
%As&Af;$.idZ2@(P-q'I7A1NOb3e[<Ve(GRl][P&eVSXT3UQu2K/58IcQcb6hV<H+=3CX;m7p(f4,po]:&dbbrl,_pQ3&iM3Gh;\1
%M!U$>7"o2B?YAb!6FosaY+X`d992c1Tj@sK\iSI@h:MWiqr2L0jH!abHXE.%Qc]A@!=jq4nE!f768j6UQ9+c^-ftf*SkXRsg,#KX
%SE"k7ffHUX2eOF#_DiW&-Cj:'dQA;J]X7oA^u-H,m=rXl'gWisZchG.VSCHkBU_):N,G=[fd/dM&O:$LJL1o_g`aUHj=rskoK<7Q
%?%$3G?IM-O[@kBhFLC5^p$;1+!0^"\(KIpeZm$\XEIgi*[STg,>1VdcAOb<VIoEp6&IP#:c>"&$Xfo7W^5&8e<P$<dObFN)[>;01
%Qg[*O:0[r%M&^5(>rUWDCGkneE((+BfR!=TJ`$U*OY\dGQ<deuTRtth2Cp-sKB!=Bo@QO"kI=Q1@V]fSip+K!`q6XI&cnrhd[p3s
%+a.eLi&GhIA]nL)K>/#?VCdQV!OqQSSHIcQ]HXkuDfVj9pbA)6?)db/&ZKr3;&\g,@Pbq:Z'L'urEuP@W>U@-d!N]-iDlPHj2G'I
%,rSE6e4:Dg3@Cn+nOo/i]Jgk&\G>0%*dtA^aDn-##W+SkIg6=K#P'PIfl5&grA1;f$7SFmd(:h.?pU[TeFB,!,68;G7CpD)bY'&u
%23\^Z!aB'nJjITl"V0Al#6@BaAR6`P28DlpjARYT]m]^E,%ZVHT7GefR\,B](V!@gB&`6Hb!8;12o`@9pGX<r3=qN5FJ&UJ<>$t+
%+hke2b1)d00g/%[;aRcZ8=4;?RGS'7SK/ga&nVIg7Rm<o0f2GZie/S43G3E,&V4*r7-k[d2MVeiRUX/3UKRO4*?Ll&iWs_*CVY`p
%0MQS-(u<eTnXj9"AS_AiX_aK6+S[h`b[Gd;q\OtZ0I5am$U"Jq@CSWHmb]SJ9'=M))<Zi5!R+8TXrY^]=c.S0a=D\i>(IB$6U<0^
%!l^%-eV</*VQ86kjdY6mKh89,[(O\U:Qqh>bDPtRm$bPJ)jo%U''\'@5T$bF_8#9h--OF"#Z+:m8sYYT`K(^+g7q]b28/YoQ)7H>
%`%#q:S#TK,2j(2.+r*jRI'D/o+J3Q9]%62n3iQ=4SWaWARhB]=Ka[\eQU#.2Z_A!=bVV+r&YZ$&_,u)mEYYL7@iQ)2JQJ]!4V10`
%Hlpfj^(A4<aok'0?4T(!3iNi:Ae]R\6*WYNVNqs5GBrRt3lLZq8f<8<T[f8"KC2A8`'Nnkh(=;rAlKe92iss29Akci!\S:Y<"A(u
%O?a0q<QkGsL,;2L#1Z8nW*gqTi^!J/lFb=1ioIXgU?,h]FmT4(d.<-Q66[5XWV\"B<RGRf.cJZ\GX!GnY,0?+<orI11q)Z#/o_VT
%87Y,or_cF`A'aA1TY".:$O6XZa3^`@nh\EA?OjKV*%h<,?l%Hf/Cju9/L)KmDsO)q1K(]oUD1KZ6tJ2F.-`]'nU#*U"LeUG'^H"[
%*:"[ZhQCaH&iEMKGBGWiVE;^\?'-stQq7]!:8Bmn$Ap=#%8/YBj.rp^pp-F(LrtCiNZ_Ne!?sUY^6\npf*q'3B-d^_)i?JKIHs[_
%V,;Xt6M1?uD:Y99UQh:[j6]M/i??FT:0h*R.PZ-QA_eG6BH1#0OG6*Art<E(JKGYCAYi[fBBXg9mo\lA)C=f%+Ok?bU6JS)TK%>u
%NZ+!7"u\9`07oNib@'g*@T&[]&VTX+XBteoq_"4g=p[=^'a:7&-ifMMKa-RPP>rCXB=rjDP)V0+&Xla\>W]k\6O3KWd'6">&`iQg
%67ICQXtN&)rFlNPV)DJ>6D$!HmJ&4q*5?SEo/]#=>N5QkQR1cW8rKu"7=bq#k[+Tu\0GHE.[^tr,;GQA8(eDX5YJskYml`W%kT/%
%)5NHO0F!5F>Z[fVF'GG.W.rA^BsD]'5nJ)u9eO3T=@CFh,ZE:t9YtjSR2K7tIGErp/$1Fo6\aM)k@Y(PWq(a$01Y8!9GI#^F(7K8
%WaZk)AMn`6<[3rr0=d4r#"X]L]"8`n'/t/]^kgmrc<O5Pp+fE#&X!X-VElQ7r#io@5PuX0IfsDD%S7*4aJp:49S;H<L(^^jJnD%R
%d'!''Lpq.kiSN5f.ZJOQ#=e4)Qqh7%Ca#7p`HN^>FuSit`L"t#Gu]%t!p$]'WG6O2:_nm@ZYH.\%1\3>-$'#7/&_Z?4Q\h+==Vjp
%p!,*_,m"g,=j$1kPr`tO6WVDL"L'L=n\`PL0?a/]-72.#C6X3UYl2uW)oXf_G15N^PH<!>X'1rJMIYbPp&MCI;MC[/%.U3]@DVMI
%!cg_#U1uAtn2f\g/!!?V0e$m1lqjPZn9SqE=ZB[qE1Zg##[<rPa0`U5?]jp>DnSf^Q]\nsjqnRPmdZ6/i60KYS<h'emiR$uN/lC8
%AE15s'mlZeLG'A9q)!Y)fh\;,qpmQ]htP#iTt4K_V;V#N9j,_DdX;Zo+XI8^#d/h1:ZX2H=C(4P-c>.>KNo+8XrguM"O7imOUife
%+RiNET5\2"5/jS[.I!jdVSK@6>TkG(("^MQaqBY8Vb'Ha,Q(cFpcaY9B0;q&4hrL5$_'7.1pT,f&B)Js@LRh+5e.4&lE-L9LT$HY
%A1@tJT67<t8pgoR*'>6DL6^`"eFFnGGUr9W[OAJ%R7bJE1"><6dd^0Lrh[C;((FaF23R[E6meG=?M.PI`7eNIg+o^dlrkQ87#EUa
%.GJQOZKR#r;/qD!79P3&eW.:3eeUWGIqm,"\9N\d(eW$(/\[6JVHBZ35Zh:?cY/\BIDXZ06jYtY`P73SZ)fR@:b4O)o(dYJhjgdB
%kUTbA=ar5Z*4'V3.u.Jb%hn4R_oA&8@b155hEkcuQ7$-9A\QhD32nta[K1Rs/#r0F8:o/@Q1rH15kiZJeZEqsl'"nX7.uVulH4O!
%8Gl?mA^iPGkm(!K#p"OML)n?7.Va.N)pYJJMm/@M9QbnLm?.ZN=fuQMh.QjeoH!KdVJUS%76F-><[g^'q(Cd[!m"QD1eFgUkkLda
%mOOt\Xs*'PIZJ[JH5KW7/4S']HllVV5jjhNW1c;ESSSr&9]U(-e(QEZ9P,TQ0FsQr6g7N%*B;6qfURf>Q!\-Yk1n;eZ>4!E;G(;B
%;_m_^B:?InX<GZQXpF=D9FkHf_*2>%&'THBCd3rqVQ"3f)_AG;&j&p0)!dBsC"8Q6I`%eu\:J3($OS.?jFOQ3CiTS#T5tOJ",_4Z
%k_7_9IQPM-FqReR$4NKN<.-_Yrf7eJf<@S]2.Ks6r6<*5pHp`gq,c1U%iE2T]gV&Kh+-7`1(nSdbn#LH$e\J(=QR8+(CrqUo]DmL
%'SRG9Q@S)2RL1k<-?fMVQ9UaRN@gY-`dm7))<O0B-:Z3aF*TSBbhR&9YlSse-FIXok-[U5K_52#kJVKl8A(\$d1?j!8fWB@M7PAq
%pDQLB%%@BQF]o?d0@fqlq_G'Q_'6rkBghBIr8YpLNsrM)9UX)bae/3"h`K[ZbApG6G.t8Z#tUnF"c.1GCPf!bX/kni'PTNP7g7J<
%\WJ?":ela,L-c#\kK9e3rY<n;&9=.LQ?6]%l)MS,T`AM)UX"Mu@\=aXan*!I#8I=J<N)rFBAESGfgGqhe6"&c#\)N/$I1a!4LA5<
%aX]otnMBOOatTq9)Uq3o$t.`Zi3(FZk&&;ZZXJW>o9&IC"%4:Y:qN_AGc%%o8GjL6joHsU,We6RQTcQ.2S(8D^4Km-BDo^'`!GPg
%[nTq&!a&pI;3@?q`:5cQY,FJ&=OU[m@hB_h/0'LEF,TK5%Ur<Q-mhO@18GSe;NjZSL=sp2)@P"Hc:4&7]_0RIA@Y<hm?Dbu:ZH*!
%&;'3bkBBY*0FpS`+&poj<nQ^(TIFJ\L0tB4iE)^I8`",BfW5oF?+qj-?UCEU_9lBE2q_nQO7t@d<SPu]3TiL^0j\Y8[,6F#gOci`
%Jh)@8P_\fmPfXGZLh5t&64BbS@SJqL!W-.QZfjIL(+7R;d&[MkbHZ/(Y,_U8<2r0A/JDr*Edeai>ClS/8]YuUl5!%R09Q?W-2hL"
%7-#.=;?m8uqk,!^\A>8KN_>ZY//&D0B2k9t:Xu=H8kN2AV#cFC/C:q,4pJRnapkt%2q9aA;[tj@U5(uN[tfP2gCrQSa`n3X_RPGu
%&MCB\$^_Q@MSPa9dogU(WeQpHet1jX1;fSja]Z3`a(i4Slqpa9MCXH._XOj*#F)eD*(u>*=32`q&S8Uh+rJseQaQ>;,o:*E7u[2o
%Uq+'$=e(;j]u&;%f5hD$GPF/&5(Ude_BqX;&V&8HQRs"[_:um:$1]Gl7&;@'<J>&LZc3iN/:uYH+7,\ZKOOHshsKs:6YIiAj(]n$
%s!<topBuSZmSBjpOKA&?IoEh#Z4\.?9@\dK=^)=2!VB+<EubU:!9-=c4XpMR'i##(9j[g+F4Yc?o&HSc2(Kp7rBjY[QS[5;'-9'.
%6<aFE3"DdYgPVXt-gG`cjQ[i8e0J"."L9b%K^7u^+LC/X@%pMR:YoPI_3fHjej3+H$J6YM-l%Y18_&gJN=hjWDT^_4qd/p+,!6>D
%74+DO`K]XJ\On**=,632nNo!4.R>uujKeW=]qlhQG`\>NQ<IgVi-p7M]d^MPb(8oCI(&JOM]uJ\`:>_DPUahp(8NI9.Sn<ET%+i'
%oA-^O7oBj1iF,NH2RYE/W01#.b=aQ0(&=P`Zn%;O=_=$:BAE+d^"Pq][`[ji>//YI#i=kM2M[Z0;90-M1J8IXI]@Rt/-[NXNd//M
%3"#gX2/pD.KZg*.k"XHLD+=KH#[@1#2)2Xr)A\!%1h87G_%@"RFj3"FEiOcoO<!naN&B2FmL2$Z8)V;jP+jo:$Z#5U,W6u&de07d
%L(K562(HYWLX>oI,hO8;d([I8=.0`.&*"BCXNOgLM6L0,V4&k9!CtUrW-6,L@jdorR>XXYd<`/?iJ+9T\NGBGI3pcJEU,T"NaW+^
%2UL/Tc+/"t<*N?0"BL<Q.7qU'03Q4\=I*5".V`?4Me'?=@VS%sS!3%U>)R,`-lSEh'GM.Y=[?C:Cd`'F#:OKsM1QF/T+r(ed)e]Z
%>:^6@R16Jg@WW>pFn)&`(.9nA=DLOs#'#_KPIjJMlKZC^+@1DU4tfU7dS@$C;2Pj%lZ9D_.@_+<;o]i[X,nDlogIOWlb#JtE'FMa
%XK\aB&2"-j53Nc[1O+n3p19CNG>rdEV9@lPaq.'B&dcj?Bm[`!A;3'fB.Cnh$`kA<@IA8D9ADVo?2tBdP2;CF;=HmCmktB-eNp^#
%R#k'OFsYP;='4Fo=1AiGAtP#";rnB88+>'[@E0,p?Aa@+5kY/[LV0Ki8mI'*`k\lrqs4NS8C4@e8L"d_foWYC@Go4&5BJP0bFVq6
%2s2O(p:%!a/o4,:$N0eZ=_#P<;C:boY%#(<kmdZC'?'!2]2_4o2iJop#6ke9&#>=R7ICd)I3KL<n(Fm_-M!KjJJ_SN.'B/dV3+^+
%B3a-(2NS'>Bh0\fTT,@8V+f@u_=(<s#cLW2E/V0jkE2d50#\_?:Lg#$50YF48^g;F*$!/ZruLcH9.b2Ch^]:!`@Xu>=MkZ*'8<J=
%=[lYPAAu3\0EbAf4_]?BX^_d8P*0!]Cjql1VGX0jJ/5^sF/gY^o6i;=#3!(g.M#NadI>3c;1*S-aeASfUW0,F^a;efE(qc+Mo?cK
%S@"ge_HKaEY1[bj;UZjb(a9fDOMnuna<I$`Llt:qVFm8bSbNCV"bOMj8cg]8+)76h`*)UW;)FG,+gBpX5"A=h=pca$8Qm8IC,']j
%IFPX\M@8bN&SYKq3'ZB5<Y`Zr@)]0EM8=k;n*B1`bYs1tZ6793*d)PSi?B#UkV_X(QW!mj/rC7SUp(-WVcCLM^e"+uLdRq[?0;i/
%8P'%papCpNEr;+3\kEp93ujl;Q+1Jc7mcJq^*kcH8=()%'j\N\*pMLU?<+<G=;1'H\k<EsRI4>nppgG2Lta,4hU8?5W<tmY8kL=7
%8iT*+=Rdm:rWM<_FUZj1J@>/0^jFu[FTVAFPSH0&[fic]N'lX.87IC&>lXbsY+`W5;"oK)do/!b8HK0(X/>`E";ZdJg'?VljWSKY
%IX+h3iq*9/O)F_`_h0oW>i4ZD]K_]KboVrPQ%J;l5!X3XeZhb4+DY.3/_0KER]7^kd]0#hROQj9`8S@NKae9n33^I>`'rK^mZ4X"
%pB2M#fi5iR;_tMd>]>jX(DJEh9(S^>oH)6N$1UE?dYEKF=B_/jhM+%TQu/NlQo^k44HZ2">F3.&^_Dfek%,u_(3)XG".OS2JOo2d
%KH'/.M/dhuq3pXK0d`71XX0gJie%_eF1f;d>/<K3Mu][sOo+$dLs\<r:"F`Yq=SigWh30=J3j24iY^K4LdBH^Ba1'j?3.ogJE^!G
%Fh?^Gie1>5g$D+b5+8A=@3R60@Lj!D[b7!-fe_a5r+8a3k%^stRDc'gA3&YJonjItTqk>6=_R5KraZE;KDVD1q#'8NX2c&jOT#UK
%Tf'Vm2)/$kOB<KR9t]h`maQ>$R]7e\Mt:T@JgXHUN,]u//(;$c'-4'EeleL,MDSJ=7bJb&UWIQ,@t6N\(@/F(Kbp\(JVa=9(Eesp
%/>]MQ()`l@iN,M9-hBMRR]a3g,9@[bNh506FJbcC:g2#[[#5LI>j3Yf>f3,:VJA6BDMZ:9OfYhog/ORW&36]D;_Sd@cq7YCgDKs.
%Q:Di5Lc2&]/V$VT_GQEXY>ctM"fWlDfeQ\SBdpGukjdW"9i-TYP<SqJ?FskTS,=bsWk=)kdjG2"b2N47!2AJ&D(5omdq,Qa\iG.M
%b;YEL"'jNmc,uW[@^\gC]t`*,H&]\3@qi*g<S[h60Jb]p4TKY^NP7c>!$[RC!MM7e8JDNJPbL\T9fe\J!9Kp]?P?`\Cn`m+OO0Z%
%:'7,)6Zh;^;;XVP0FpEIAaXOP>OXbcg`N2`lPYel?/;A*IC,FkQQ%)mC[.9JBoOrRDm?Q6]nTT=.GTdoXC!tB"51IO-5d$3qg<X[
%V?>u=jP`t:H-/FlIGlI&1td(<:q]]0]=HtNV#[-ZK,fK9"$OnZmtu178"=_W_q!B\;b\-g11BGSs)tn,Vc:U;7Ps$u.g)07h69lM
%N)8W3#f<-C"\bp!;S]I+5aVS7"`u,;Y'k)?Q9#P-':%BlY$U0tPsAHkomLBFLc6'%K^Z#n4`0hI3s+&,*'7$FaP?:mXR30)HHEAK
%BNkXg"k\sUBWiM]N'QFg8jl6^=L?#!(GG$]Vo&m`fr`.AWkBfXbFTW+18AR+ncjonHk!Ymbci*%7ulG`F*Ta-.)=4@ON;f:eqncp
%\rnT?`6WD!hUDSG)$4b[QR#VB:J\;[@IP[!HS<AMJ\(<6Z7!hs.J+ACa`?0#5]c8N,cY\c-k!Lc?W,9]kh@p&W-DALhO4P`jNVmI
%FYaD_>uCVgoG;4&!*u>0,7]SqA(a<qpRa=a;F_O1m"^73MPPJ4r7+aM+\>a$'hq>)iB/D.A:SM<+H`pk@3kEtM1"k[F#V(A<n&+`
%7(cS33>aCG:?gd0*;^eNMPp_q#L_<d$(]Q<AQgor'Ko-Ql8#8e$`!+:*UY9e-0lQ*T&Ce\DK#YZmFZ"rJjqX%fXsG=lBh2;3.u:0
%OG^f/(^=e!`WQCZFYmYTm$^+;;G6n)0]`KU/l]&\8_jFJ(A(g,gqfheIt26Srt`UYFd.1X)8)K)Le8aK;T@h0(+fE(bEm4ZW[^PM
%Rh?*['k2Ug7)idB6@9C(bb4O&ith\V]Mrs'IkMn7U#Vkt#du1pF9O$+!N8"c40na-M\X&ja0FH`U4PZ#N?!`T7i[;]MD#sT?ue)^
%">)``E"b()<H2Z4,iWql.okZpF,1t'TZAM:DY.XD"/p:N<l@\<2DOCT[Ol_=_W8J;Q1s.3NM)!L*5EbmF!'FuCRqqPIE$;-RC3TT
%VT>sFLDfB91fB"2ok%fghCL7IW]<F:E:O\cWi]An-pZA*[\U8p8pIH4R[m:-P\#ZpUo>Ut.X06S=h=liVGQrfA<uOVW0$/BM?]H-
%U)5=[:u\@f]uaKVeCQE!l*O$*@:kYlMi4md]@%cH&V4*mAI!B1R4t+n01fk)h^rulmLXGGkFr!:0j]Y@;dhH]rMa]kjQ$%BR@3kp
%kFW#)d[uD`Jj?%f$Hii-d"psl=;l/3NZ,;mZDdF[l$TJ3EJ:s>Pp;M,k&C(730LaJpjC>6K.e?/P`J0&2mKBU=4O8K7IRgFE&.jj
%SlQ]L$9)gBk-l&-o![56OW8d0MO28bnmKZ:[X?@CT7shtaIkfp9e4N^?G=P]:h]8SGj00]dlUl;@F>.R$q1pi_.k+'6rr0-$8[2F
%KFGHulm/nJ3!J$$GI/abf\,t<.PMgSUAW.3_MZe_KF#(3776-@i\=QS``@=+!TDGX->d6p*pA9BP5u+g]2X!q+<]`*_s&)O@"`E7
%3N$X/ICS1$3V0&lpn_=m#($"VAQ+=Z4DZ`W[\78bbaj<4W_6lIhnK522.m)%7hMO_j3%h.Z)RIJ96OhF.mX]pRC'qXpI5ZT6U/.t
%97Jq#NP9jl;eDe&Ne[aS<B_\shO.d$?'^G[5<NYK1`XHTnBr6]A%=gL;*?;YI93?J_OF++a]%79:b0(%<]<7uLR`\78n1IVfB\+M
%JL?AD(eBR6BbhT>%3H#-4)bK$U5p1__\i;roX?O?G&=Eo@:_;9$WYf+/IHd]Lr8Ll0G;`GS>Pf#_CT;F-r*@Y*W0?)`@$l=h.U=D
%_"sP7:*E\`p3nbo!l@!r[lF!JO`>>#"J:P`Xo`%P.HXj`>o*h*-l,\^RtFVP6[$*KPE-qZ-4e/rihXe1)p?U/E(Ihc+NYTYCH7if
%)QGPQ(BZLf/3Njg]GB(dPndRh05D1lbi8,S(X6NU"Jg"0BVS;4>`F9M(qiF.Y2C,49!R-/4.HIbnATi*21X*]$\Qiu7#FsD3d_[^
%Or@W@g(b"6%1e)Pj>0=]V#R[*\kA*MWn7c@Emds]6S3(a7&@m'odM'%^u%qEXK0.Sb.FW*g3"7l]U*.D1=F/W<i2Vfn=_"*6"E@l
%5i#n;(oD2%^BCtcJu2(P!JER1gr[4V9EI]uctEno%o<P_p'\_Ynni0\gTI>*W0RIIR@"-f,7"d<pP%ZV&HkO7oog$_2`DEY.,h)"
%-K;1<T<dls)sXUlo$OP'>1eG("dg=lc&A86CWj+6L?iYC$rfckiJ\tmm<FgSZ<V\%B':^4N\aFZW]Zf0U;Q4_.aNgA92Io@eDN2<
%dXDCE2fcf]gV[\V&XP5CQNOX+?o>9hs.#*#T^ZXm4,U5X@7`0^*[)rin?135%.YAd;m"\"%[*?`Zk\\2i!]GpUcnba=hL3b(#C:t
%M++rS[sn7EJ,A9@rRX:3eZXK&LVN]OJ+k&>J,c!fp`I9Mo`+pgQ_-K\i331PTDni9s5bn`qHs:"c[Yc.?iBpfrTR\gr8UTQn.5Qo
%c[YfS5Q@AQT76_:?iKt!s87q-q=BYsqOdf_It?OOrP2e?p##\Fs6tfYqZ!TJaq+~>
%AI9_PrivateDataEnd
